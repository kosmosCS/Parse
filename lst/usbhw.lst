   1              		.syntax unified
   2              		.cpu cortex-m3
   3              		.fpu softvfp
   4              		.eabi_attribute 20, 1
   5              		.eabi_attribute 21, 1
   6              		.eabi_attribute 23, 3
   7              		.eabi_attribute 24, 1
   8              		.eabi_attribute 25, 1
   9              		.eabi_attribute 26, 1
  10              		.eabi_attribute 30, 2
  11              		.eabi_attribute 34, 1
  12              		.eabi_attribute 18, 4
  13              		.thumb
  14              		.file	"usbhw.c"
  15              		.text
  16              	.Ltext0:
  17              		.cfi_sections	.debug_frame
  18              		.section	.text.EPAdr,"ax",%progbits
  19              		.align	2
  20              		.global	EPAdr
  21              		.thumb
  22              		.thumb_func
  24              	EPAdr:
  25              	.LFB55:
  26              		.file 1 "./src/usb/usbhw.c"
   1:./src/usb/usbhw.c **** /*----------------------------------------------------------------------------
   2:./src/usb/usbhw.c ****  *      U S B  -  K e r n e l
   3:./src/usb/usbhw.c ****  *----------------------------------------------------------------------------
   4:./src/usb/usbhw.c ****  * Name:    usbhw.c
   5:./src/usb/usbhw.c ****  * Purpose: USB Hardware Layer Module for NXP's LPC17xx MCU
   6:./src/usb/usbhw.c ****  * Version: V1.20
   7:./src/usb/usbhw.c ****  *----------------------------------------------------------------------------
   8:./src/usb/usbhw.c ****  *      This software is supplied "AS IS" without any warranties, express,
   9:./src/usb/usbhw.c ****  *      implied or statutory, including but not limited to the implied
  10:./src/usb/usbhw.c ****  *      warranties of fitness for purpose, satisfactory quality and
  11:./src/usb/usbhw.c ****  *      noninfringement. Keil extends you a royalty-free right to reproduce
  12:./src/usb/usbhw.c ****  *      and distribute executable files created using this software for use
  13:./src/usb/usbhw.c ****  *      on NXP Semiconductors LPC family microcontroller devices only. Nothing 
  14:./src/usb/usbhw.c ****  *      else gives you the right to use this software.
  15:./src/usb/usbhw.c ****  *
  16:./src/usb/usbhw.c ****  * Copyright (c) 2009 Keil - An ARM Company. All rights reserved.
  17:./src/usb/usbhw.c ****  *----------------------------------------------------------------------------
  18:./src/usb/usbhw.c ****  * History:
  19:./src/usb/usbhw.c ****  *          V1.20 Added USB_ClearEPBuf
  20:./src/usb/usbhw.c ****  *          V1.00 Initial Version
  21:./src/usb/usbhw.c ****  *----------------------------------------------------------------------------*/
  22:./src/usb/usbhw.c **** #include "LPC17xx.h"                        /* LPC17xx definitions */
  23:./src/usb/usbhw.c **** #include "usb.h"
  24:./src/usb/usbhw.c **** #include "usbcfg.h"
  25:./src/usb/usbhw.c **** #include "usbreg.h"
  26:./src/usb/usbhw.c **** #include "usbhw.h"
  27:./src/usb/usbhw.c **** #include "usbcore.h"
  28:./src/usb/usbhw.c **** #include "usbuser.h"
  29:./src/usb/usbhw.c **** 
  30:./src/usb/usbhw.c **** #if defined (  __CC_ARM__  )
  31:./src/usb/usbhw.c **** #pragma diag_suppress 1441
  32:./src/usb/usbhw.c **** #endif
  33:./src/usb/usbhw.c **** 
  34:./src/usb/usbhw.c **** #define EP_MSK_CTRL 0x0001      /* Control Endpoint Logical Address Mask */
  35:./src/usb/usbhw.c **** #define EP_MSK_BULK 0xC924      /* Bulk Endpoint Logical Address Mask */
  36:./src/usb/usbhw.c **** #define EP_MSK_INT  0x4492      /* Interrupt Endpoint Logical Address Mask */
  37:./src/usb/usbhw.c **** #define EP_MSK_ISO  0x1248      /* Isochronous Endpoint Logical Address Mask */
  38:./src/usb/usbhw.c **** 
  39:./src/usb/usbhw.c **** #if USB_DMA
  40:./src/usb/usbhw.c **** 
  41:./src/usb/usbhw.c **** #pragma arm section zidata = "USB_RAM"
  42:./src/usb/usbhw.c **** uint32_t UDCA[USB_EP_NUM]; /* UDCA in USB RAM */
  43:./src/usb/usbhw.c **** uint32_t DD_NISO_Mem[4*DD_NISO_CNT]; /* Non-Iso DMA Descriptor Memory */
  44:./src/usb/usbhw.c **** uint32_t DD_ISO_Mem [5*DD_ISO_CNT]; /* Iso DMA Descriptor Memory */
  45:./src/usb/usbhw.c **** #pragma arm section zidata
  46:./src/usb/usbhw.c **** uint32_t udca[USB_EP_NUM]; /* UDCA saved values */
  47:./src/usb/usbhw.c **** 
  48:./src/usb/usbhw.c **** uint32_t DDMemMap[2]; /* DMA Descriptor Memory Usage */
  49:./src/usb/usbhw.c **** 
  50:./src/usb/usbhw.c **** #endif
  51:./src/usb/usbhw.c **** 
  52:./src/usb/usbhw.c **** /*
  53:./src/usb/usbhw.c ****  *  Get Endpoint Physical Address
  54:./src/usb/usbhw.c ****  *    Parameters:      EPNum: Endpoint Number
  55:./src/usb/usbhw.c ****  *                       EPNum.0..3: Address
  56:./src/usb/usbhw.c ****  *                       EPNum.7:    Dir
  57:./src/usb/usbhw.c ****  *    Return Value:    Endpoint Physical Address
  58:./src/usb/usbhw.c ****  */
  59:./src/usb/usbhw.c **** 
  60:./src/usb/usbhw.c **** uint32_t EPAdr(uint32_t EPNum)
  61:./src/usb/usbhw.c **** {
  27              		.loc 1 61 0
  28              		.cfi_startproc
  29              		@ args = 0, pretend = 0, frame = 0
  30              		@ frame_needed = 0, uses_anonymous_args = 0
  31              		@ link register save eliminated.
  32              	.LVL0:
  33              		.loc 1 61 0
  34 0000 0346     		mov	r3, r0
  62:./src/usb/usbhw.c **** 	uint32_t val;
  63:./src/usb/usbhw.c **** 
  64:./src/usb/usbhw.c **** 	val = (EPNum & 0x0F) << 1;
  35              		.loc 1 64 0
  36 0002 00F00F00 		and	r0, r0, #15
  37              	.LVL1:
  38 0006 4000     		lsls	r0, r0, #1
  39              	.LVL2:
  65:./src/usb/usbhw.c **** 	if (EPNum & 0x80)
  40              		.loc 1 65 0
  41 0008 1B06     		lsls	r3, r3, #24
  42              	.LVL3:
  66:./src/usb/usbhw.c **** 	{
  67:./src/usb/usbhw.c **** 		val += 1;
  43              		.loc 1 67 0
  44 000a 48BF     		it	mi
  45 000c 0130     		addmi	r0, r0, #1
  46              	.LVL4:
  68:./src/usb/usbhw.c **** 	}
  69:./src/usb/usbhw.c **** 	return (val);
  70:./src/usb/usbhw.c **** }
  47              		.loc 1 70 0
  48 000e 7047     		bx	lr
  49              		.cfi_endproc
  50              	.LFE55:
  52              		.section	.text.WrCmd,"ax",%progbits
  53              		.align	2
  54              		.global	WrCmd
  55              		.thumb
  56              		.thumb_func
  58              	WrCmd:
  59              	.LFB56:
  71:./src/usb/usbhw.c **** 
  72:./src/usb/usbhw.c **** /*
  73:./src/usb/usbhw.c ****  *  Write Command
  74:./src/usb/usbhw.c ****  *    Parameters:      cmd:   Command
  75:./src/usb/usbhw.c ****  *    Return Value:    None
  76:./src/usb/usbhw.c ****  */
  77:./src/usb/usbhw.c **** 
  78:./src/usb/usbhw.c **** void WrCmd(uint32_t cmd)
  79:./src/usb/usbhw.c **** {
  60              		.loc 1 79 0
  61              		.cfi_startproc
  62              		@ args = 0, pretend = 0, frame = 0
  63              		@ frame_needed = 0, uses_anonymous_args = 0
  64              		@ link register save eliminated.
  65              	.LVL5:
  80:./src/usb/usbhw.c **** 
  81:./src/usb/usbhw.c **** 	LPC_USB->USBDevIntClr = CCEMTY_INT;
  66              		.loc 1 81 0
  67 0000 054B     		ldr	r3, .L10
  68 0002 1022     		movs	r2, #16
  69 0004 C3F80822 		str	r2, [r3, #520]
  82:./src/usb/usbhw.c **** 	LPC_USB->USBCmdCode = cmd;
  83:./src/usb/usbhw.c **** 	while ((LPC_USB->USBDevIntSt & CCEMTY_INT) == 0)
  70              		.loc 1 83 0
  71 0008 1A46     		mov	r2, r3
  82:./src/usb/usbhw.c **** 	LPC_USB->USBCmdCode = cmd;
  72              		.loc 1 82 0
  73 000a C3F81002 		str	r0, [r3, #528]
  74              	.L8:
  75              		.loc 1 83 0 discriminator 1
  76 000e D2F80032 		ldr	r3, [r2, #512]
  77 0012 DB06     		lsls	r3, r3, #27
  78 0014 FBD5     		bpl	.L8
  84:./src/usb/usbhw.c **** 		;
  85:./src/usb/usbhw.c **** }
  79              		.loc 1 85 0
  80 0016 7047     		bx	lr
  81              	.L11:
  82              		.align	2
  83              	.L10:
  84 0018 00C00050 		.word	1342226432
  85              		.cfi_endproc
  86              	.LFE56:
  88              		.section	.text.WrCmdDat,"ax",%progbits
  89              		.align	2
  90              		.global	WrCmdDat
  91              		.thumb
  92              		.thumb_func
  94              	WrCmdDat:
  95              	.LFB57:
  86:./src/usb/usbhw.c **** 
  87:./src/usb/usbhw.c **** /*
  88:./src/usb/usbhw.c ****  *  Write Command Data
  89:./src/usb/usbhw.c ****  *    Parameters:      cmd:   Command
  90:./src/usb/usbhw.c ****  *                     val:   Data
  91:./src/usb/usbhw.c ****  *    Return Value:    None
  92:./src/usb/usbhw.c ****  */
  93:./src/usb/usbhw.c **** 
  94:./src/usb/usbhw.c **** void WrCmdDat(uint32_t cmd, uint32_t val)
  95:./src/usb/usbhw.c **** {
  96              		.loc 1 95 0
  97              		.cfi_startproc
  98              		@ args = 0, pretend = 0, frame = 0
  99              		@ frame_needed = 0, uses_anonymous_args = 0
 100              		@ link register save eliminated.
 101              	.LVL6:
  96:./src/usb/usbhw.c **** 
  97:./src/usb/usbhw.c **** 	LPC_USB->USBDevIntClr = CCEMTY_INT;
 102              		.loc 1 97 0
 103 0000 0C4B     		ldr	r3, .L17
 104 0002 1022     		movs	r2, #16
  95:./src/usb/usbhw.c **** {
 105              		.loc 1 95 0
 106 0004 10B4     		push	{r4}
 107              		.cfi_def_cfa_offset 4
 108              		.cfi_offset 4, -4
 109              		.loc 1 97 0
 110 0006 C3F80822 		str	r2, [r3, #520]
  98:./src/usb/usbhw.c **** 	LPC_USB->USBCmdCode = cmd;
  99:./src/usb/usbhw.c **** 	while ((LPC_USB->USBDevIntSt & CCEMTY_INT) == 0)
 111              		.loc 1 99 0
 112 000a 1C46     		mov	r4, r3
  98:./src/usb/usbhw.c **** 	LPC_USB->USBCmdCode = cmd;
 113              		.loc 1 98 0
 114 000c C3F81002 		str	r0, [r3, #528]
 115              	.LVL7:
 116              	.L14:
 117              		.loc 1 99 0 discriminator 1
 118 0010 D4F80032 		ldr	r3, [r4, #512]
 119 0014 074A     		ldr	r2, .L17
 120 0016 D806     		lsls	r0, r3, #27
 121 0018 FAD5     		bpl	.L14
 100:./src/usb/usbhw.c **** 		;
 101:./src/usb/usbhw.c **** 	LPC_USB->USBDevIntClr = CCEMTY_INT;
 122              		.loc 1 101 0
 123 001a 1023     		movs	r3, #16
 124 001c C2F80832 		str	r3, [r2, #520]
 125              	.LVL8:
 102:./src/usb/usbhw.c **** 	LPC_USB->USBCmdCode = val;
 103:./src/usb/usbhw.c **** 	while ((LPC_USB->USBDevIntSt & CCEMTY_INT) == 0)
 126              		.loc 1 103 0
 127 0020 1046     		mov	r0, r2
 102:./src/usb/usbhw.c **** 	LPC_USB->USBCmdCode = val;
 128              		.loc 1 102 0
 129 0022 C2F81012 		str	r1, [r2, #528]
 130              	.L16:
 131              		.loc 1 103 0 discriminator 1
 132 0026 D0F80032 		ldr	r3, [r0, #512]
 133 002a DB06     		lsls	r3, r3, #27
 134 002c FBD5     		bpl	.L16
 104:./src/usb/usbhw.c **** 		;
 105:./src/usb/usbhw.c **** }
 135              		.loc 1 105 0
 136 002e 5DF8044B 		ldr	r4, [sp], #4
 137 0032 7047     		bx	lr
 138              	.L18:
 139              		.align	2
 140              	.L17:
 141 0034 00C00050 		.word	1342226432
 142              		.cfi_endproc
 143              	.LFE57:
 145              		.section	.text.WrCmdEP,"ax",%progbits
 146              		.align	2
 147              		.global	WrCmdEP
 148              		.thumb
 149              		.thumb_func
 151              	WrCmdEP:
 152              	.LFB58:
 106:./src/usb/usbhw.c **** 
 107:./src/usb/usbhw.c **** /*
 108:./src/usb/usbhw.c ****  *  Write Command to Endpoint
 109:./src/usb/usbhw.c ****  *    Parameters:      cmd:   Command
 110:./src/usb/usbhw.c ****  *                     val:   Data
 111:./src/usb/usbhw.c ****  *    Return Value:    None
 112:./src/usb/usbhw.c ****  */
 113:./src/usb/usbhw.c **** 
 114:./src/usb/usbhw.c **** void WrCmdEP(uint32_t EPNum, uint32_t cmd)
 115:./src/usb/usbhw.c **** {
 153              		.loc 1 115 0
 154              		.cfi_startproc
 155              		@ args = 0, pretend = 0, frame = 0
 156              		@ frame_needed = 0, uses_anonymous_args = 0
 157              		@ link register save eliminated.
 158              	.LVL9:
 116:./src/usb/usbhw.c **** 
 117:./src/usb/usbhw.c **** 	LPC_USB->USBDevIntClr = CCEMTY_INT;
 159              		.loc 1 117 0
 160 0000 114A     		ldr	r2, .L28
 115:./src/usb/usbhw.c **** {
 161              		.loc 1 115 0
 162 0002 10B4     		push	{r4}
 163              		.cfi_def_cfa_offset 4
 164              		.cfi_offset 4, -4
 165              	.LBB56:
 166              	.LBB57:
  64:./src/usb/usbhw.c **** 	val = (EPNum & 0x0F) << 1;
 167              		.loc 1 64 0
 168 0004 00F00F03 		and	r3, r0, #15
 169              	.LBE57:
 170              	.LBE56:
 171              		.loc 1 117 0
 172 0008 1024     		movs	r4, #16
 173              	.LBB60:
 174              	.LBB58:
  64:./src/usb/usbhw.c **** 	val = (EPNum & 0x0F) << 1;
 175              		.loc 1 64 0
 176 000a 5B00     		lsls	r3, r3, #1
 177              	.LBE58:
 178              	.LBE60:
 179              		.loc 1 117 0
 180 000c C2F80842 		str	r4, [r2, #520]
 181              	.LVL10:
 182              	.LBB61:
 183              	.LBB59:
  65:./src/usb/usbhw.c **** 	if (EPNum & 0x80)
 184              		.loc 1 65 0
 185 0010 0206     		lsls	r2, r0, #24
  67:./src/usb/usbhw.c **** 		val += 1;
 186              		.loc 1 67 0
 187 0012 48BF     		it	mi
 188 0014 0133     		addmi	r3, r3, #1
 189              	.LVL11:
 190              	.LBE59:
 191              	.LBE61:
 118:./src/usb/usbhw.c **** 	LPC_USB->USBCmdCode = CMD_SEL_EP(EPAdr(EPNum));
 192              		.loc 1 118 0
 193 0016 1B04     		lsls	r3, r3, #16
 194              	.LVL12:
 195 0018 0B48     		ldr	r0, .L28
 196              	.LVL13:
 197 001a 43F4A063 		orr	r3, r3, #1280
 198 001e C0F81032 		str	r3, [r0, #528]
 199              	.LVL14:
 200              	.L22:
 119:./src/usb/usbhw.c **** 	while ((LPC_USB->USBDevIntSt & CCEMTY_INT) == 0)
 201              		.loc 1 119 0 discriminator 1
 202 0022 D0F80032 		ldr	r3, [r0, #512]
 203 0026 084A     		ldr	r2, .L28
 204 0028 DC06     		lsls	r4, r3, #27
 205 002a FAD5     		bpl	.L22
 120:./src/usb/usbhw.c **** 		;
 121:./src/usb/usbhw.c **** 	LPC_USB->USBDevIntClr = CCEMTY_INT;
 206              		.loc 1 121 0
 207 002c 1023     		movs	r3, #16
 208 002e C2F80832 		str	r3, [r2, #520]
 122:./src/usb/usbhw.c **** 	LPC_USB->USBCmdCode = cmd;
 123:./src/usb/usbhw.c **** 	while ((LPC_USB->USBDevIntSt & CCEMTY_INT) == 0)
 209              		.loc 1 123 0
 210 0032 1046     		mov	r0, r2
 122:./src/usb/usbhw.c **** 	LPC_USB->USBCmdCode = cmd;
 211              		.loc 1 122 0
 212 0034 C2F81012 		str	r1, [r2, #528]
 213              	.L24:
 214              		.loc 1 123 0 discriminator 1
 215 0038 D0F80032 		ldr	r3, [r0, #512]
 216 003c DB06     		lsls	r3, r3, #27
 217 003e FBD5     		bpl	.L24
 124:./src/usb/usbhw.c **** 		;
 125:./src/usb/usbhw.c **** }
 218              		.loc 1 125 0
 219 0040 5DF8044B 		ldr	r4, [sp], #4
 220 0044 7047     		bx	lr
 221              	.L29:
 222 0046 00BF     		.align	2
 223              	.L28:
 224 0048 00C00050 		.word	1342226432
 225              		.cfi_endproc
 226              	.LFE58:
 228              		.section	.text.RdCmdDat,"ax",%progbits
 229              		.align	2
 230              		.global	RdCmdDat
 231              		.thumb
 232              		.thumb_func
 234              	RdCmdDat:
 235              	.LFB59:
 126:./src/usb/usbhw.c **** 
 127:./src/usb/usbhw.c **** /*
 128:./src/usb/usbhw.c ****  *  Read Command Data
 129:./src/usb/usbhw.c ****  *    Parameters:      cmd:   Command
 130:./src/usb/usbhw.c ****  *    Return Value:    Data Value
 131:./src/usb/usbhw.c ****  */
 132:./src/usb/usbhw.c **** 
 133:./src/usb/usbhw.c **** uint32_t RdCmdDat(uint32_t cmd)
 134:./src/usb/usbhw.c **** {
 236              		.loc 1 134 0
 237              		.cfi_startproc
 238              		@ args = 0, pretend = 0, frame = 0
 239              		@ frame_needed = 0, uses_anonymous_args = 0
 240              		@ link register save eliminated.
 241              	.LVL15:
 135:./src/usb/usbhw.c **** 
 136:./src/usb/usbhw.c **** 	LPC_USB->USBDevIntClr = CCEMTY_INT | CDFULL_INT;
 242              		.loc 1 136 0
 243 0000 074B     		ldr	r3, .L33
 244 0002 3022     		movs	r2, #48
 245 0004 C3F80822 		str	r2, [r3, #520]
 137:./src/usb/usbhw.c **** 	LPC_USB->USBCmdCode = cmd;
 138:./src/usb/usbhw.c **** 	while ((LPC_USB->USBDevIntSt & CDFULL_INT) == 0)
 246              		.loc 1 138 0
 247 0008 1946     		mov	r1, r3
 137:./src/usb/usbhw.c **** 	LPC_USB->USBCmdCode = cmd;
 248              		.loc 1 137 0
 249 000a C3F81002 		str	r0, [r3, #528]
 250              	.L32:
 251              		.loc 1 138 0 discriminator 1
 252 000e D1F80032 		ldr	r3, [r1, #512]
 253 0012 034A     		ldr	r2, .L33
 254 0014 9B06     		lsls	r3, r3, #26
 255 0016 FAD5     		bpl	.L32
 139:./src/usb/usbhw.c **** 		;
 140:./src/usb/usbhw.c **** 	return (LPC_USB->USBCmdData);
 256              		.loc 1 140 0
 257 0018 D2F81402 		ldr	r0, [r2, #532]
 258              	.LVL16:
 141:./src/usb/usbhw.c **** }
 259              		.loc 1 141 0
 260 001c 7047     		bx	lr
 261              	.L34:
 262 001e 00BF     		.align	2
 263              	.L33:
 264 0020 00C00050 		.word	1342226432
 265              		.cfi_endproc
 266              	.LFE59:
 268              		.section	.text.USB_Connect,"ax",%progbits
 269              		.align	2
 270              		.global	USB_Connect
 271              		.thumb
 272              		.thumb_func
 274              	USB_Connect:
 275              	.LFB61:
 142:./src/usb/usbhw.c **** 
 143:./src/usb/usbhw.c **** /*
 144:./src/usb/usbhw.c ****  *  USB Initialize Function
 145:./src/usb/usbhw.c ****  *   Called by the User to initialize USB
 146:./src/usb/usbhw.c ****  *    Return Value:    None
 147:./src/usb/usbhw.c ****  */
 148:./src/usb/usbhw.c **** 
 149:./src/usb/usbhw.c **** void USB_Init(void)
 150:./src/usb/usbhw.c **** {
 151:./src/usb/usbhw.c **** 
 152:./src/usb/usbhw.c **** 	LPC_PINCON->PINSEL1 &= ~((3 << 26) | (3 << 28)); /* P0.29 D+, P0.30 D- */
 153:./src/usb/usbhw.c **** 	LPC_PINCON->PINSEL1 |= ((1 << 26) | (1 << 28)); /* PINSEL1 26.27, 28.29  = 01 */
 154:./src/usb/usbhw.c **** 
 155:./src/usb/usbhw.c **** 	LPC_PINCON->PINSEL3 &= ~((3 << 4) | (3 << 28)); /* P1.18 GoodLink, P1.30 VBUS */
 156:./src/usb/usbhw.c **** 	LPC_PINCON->PINSEL3 |= ((1 << 4) | (2 << 28)); /* PINSEL3 4.5 = 01, 28.29 = 10 */
 157:./src/usb/usbhw.c **** 
 158:./src/usb/usbhw.c **** 	LPC_PINCON->PINSEL4 &= ~((3 << 18) ); /* P2.9 SoftConnect */
 159:./src/usb/usbhw.c **** 	LPC_PINCON->PINSEL4 |= ((1 << 18) ); /* PINSEL4 18.19 = 01 */
 160:./src/usb/usbhw.c **** 
 161:./src/usb/usbhw.c **** 	LPC_SC->PCONP |= (1UL << 31); /* USB PCLK -> enable USB Per.       */
 162:./src/usb/usbhw.c **** 
 163:./src/usb/usbhw.c **** 	LPC_USB->USBClkCtrl = 0x12; /* / 1A / Dev, PortSel, AHB clock enable */
 164:./src/usb/usbhw.c **** 	while ((LPC_USB->USBClkSt & 0x12) != 0x12)
 165:./src/usb/usbhw.c **** 		;
 166:./src/usb/usbhw.c **** 
 167:./src/usb/usbhw.c **** 	NVIC_EnableIRQ(USB_IRQn); /* enable USB interrupt */
 168:./src/usb/usbhw.c **** 
 169:./src/usb/usbhw.c **** 	USB_Reset();
 170:./src/usb/usbhw.c **** 	USB_SetAddress(0);
 171:./src/usb/usbhw.c **** }
 172:./src/usb/usbhw.c **** 
 173:./src/usb/usbhw.c **** /*
 174:./src/usb/usbhw.c ****  *  USB Connect Function
 175:./src/usb/usbhw.c ****  *   Called by the User to Connect/Disconnect USB
 176:./src/usb/usbhw.c ****  *    Parameters:      con:   Connect/Disconnect
 177:./src/usb/usbhw.c ****  *    Return Value:    None
 178:./src/usb/usbhw.c ****  */
 179:./src/usb/usbhw.c **** 
 180:./src/usb/usbhw.c **** void USB_Connect(uint32_t con)
 181:./src/usb/usbhw.c **** {
 276              		.loc 1 181 0
 277              		.cfi_startproc
 278              		@ args = 0, pretend = 0, frame = 0
 279              		@ frame_needed = 0, uses_anonymous_args = 0
 280              		@ link register save eliminated.
 281              	.LVL17:
 282 0000 10B4     		push	{r4}
 283              		.cfi_def_cfa_offset 4
 284              		.cfi_offset 4, -4
 285              	.LBB62:
 286              	.LBB63:
  97:./src/usb/usbhw.c **** 	LPC_USB->USBDevIntClr = CCEMTY_INT;
 287              		.loc 1 97 0
 288 0002 104B     		ldr	r3, .L42
  98:./src/usb/usbhw.c **** 	LPC_USB->USBCmdCode = cmd;
 289              		.loc 1 98 0
 290 0004 104C     		ldr	r4, .L42+4
 291              	.LBE63:
 292              	.LBE62:
 182:./src/usb/usbhw.c **** 	WrCmdDat(CMD_SET_DEV_STAT, DAT_WR_BYTE(con ? DEV_CON : 0));
 293              		.loc 1 182 0
 294 0006 114A     		ldr	r2, .L42+8
 295              	.LBB67:
 296              	.LBB64:
  97:./src/usb/usbhw.c **** 	LPC_USB->USBDevIntClr = CCEMTY_INT;
 297              		.loc 1 97 0
 298 0008 1021     		movs	r1, #16
 299              	.LBE64:
 300              	.LBE67:
 301              		.loc 1 182 0
 302 000a 0028     		cmp	r0, #0
 303              	.LBB68:
 304              	.LBB65:
  97:./src/usb/usbhw.c **** 	LPC_USB->USBDevIntClr = CCEMTY_INT;
 305              		.loc 1 97 0
 306 000c C3F80812 		str	r1, [r3, #520]
 307              	.LBE65:
 308              	.LBE68:
 309              		.loc 1 182 0
 310 0010 0CBF     		ite	eq
 311 0012 4FF48070 		moveq	r0, #256
 312 0016 1046     		movne	r0, r2
 313              	.LVL18:
 314              	.LBB69:
 315              	.LBB66:
  99:./src/usb/usbhw.c **** 	while ((LPC_USB->USBDevIntSt & CCEMTY_INT) == 0)
 316              		.loc 1 99 0
 317 0018 1946     		mov	r1, r3
  98:./src/usb/usbhw.c **** 	LPC_USB->USBCmdCode = cmd;
 318              		.loc 1 98 0
 319 001a C3F81042 		str	r4, [r3, #528]
 320              	.L38:
  99:./src/usb/usbhw.c **** 	while ((LPC_USB->USBDevIntSt & CCEMTY_INT) == 0)
 321              		.loc 1 99 0
 322 001e D1F80032 		ldr	r3, [r1, #512]
 323 0022 084A     		ldr	r2, .L42
 324 0024 DC06     		lsls	r4, r3, #27
 325 0026 FAD5     		bpl	.L38
 101:./src/usb/usbhw.c **** 	LPC_USB->USBDevIntClr = CCEMTY_INT;
 326              		.loc 1 101 0
 327 0028 1023     		movs	r3, #16
 328 002a C2F80832 		str	r3, [r2, #520]
 103:./src/usb/usbhw.c **** 	while ((LPC_USB->USBDevIntSt & CCEMTY_INT) == 0)
 329              		.loc 1 103 0
 330 002e 1146     		mov	r1, r2
 102:./src/usb/usbhw.c **** 	LPC_USB->USBCmdCode = val;
 331              		.loc 1 102 0
 332 0030 C2F81002 		str	r0, [r2, #528]
 333              	.L40:
 103:./src/usb/usbhw.c **** 	while ((LPC_USB->USBDevIntSt & CCEMTY_INT) == 0)
 334              		.loc 1 103 0
 335 0034 D1F80032 		ldr	r3, [r1, #512]
 336 0038 DB06     		lsls	r3, r3, #27
 337 003a FBD5     		bpl	.L40
 338              	.LBE66:
 339              	.LBE69:
 183:./src/usb/usbhw.c **** }
 340              		.loc 1 183 0
 341 003c 5DF8044B 		ldr	r4, [sp], #4
 342 0040 7047     		bx	lr
 343              	.L43:
 344 0042 00BF     		.align	2
 345              	.L42:
 346 0044 00C00050 		.word	1342226432
 347 0048 0005FE00 		.word	16647424
 348 004c 00010100 		.word	65792
 349              		.cfi_endproc
 350              	.LFE61:
 352              		.section	.text.USB_Reset,"ax",%progbits
 353              		.align	2
 354              		.global	USB_Reset
 355              		.thumb
 356              		.thumb_func
 358              	USB_Reset:
 359              	.LFB62:
 184:./src/usb/usbhw.c **** 
 185:./src/usb/usbhw.c **** /*
 186:./src/usb/usbhw.c ****  *  USB Reset Function
 187:./src/usb/usbhw.c ****  *   Called automatically on USB Reset
 188:./src/usb/usbhw.c ****  *    Return Value:    None
 189:./src/usb/usbhw.c ****  */
 190:./src/usb/usbhw.c **** 
 191:./src/usb/usbhw.c **** void USB_Reset(void)
 192:./src/usb/usbhw.c **** {
 360              		.loc 1 192 0
 361              		.cfi_startproc
 362              		@ args = 0, pretend = 0, frame = 0
 363              		@ frame_needed = 0, uses_anonymous_args = 0
 364              		@ link register save eliminated.
 193:./src/usb/usbhw.c **** #if USB_DMA
 194:./src/usb/usbhw.c **** 	uint32_t n;
 195:./src/usb/usbhw.c **** #endif
 196:./src/usb/usbhw.c **** 
 197:./src/usb/usbhw.c **** 	LPC_USB->USBEpInd = 0;
 365              		.loc 1 197 0
 366 0000 0E4B     		ldr	r3, .L47
 367 0002 0021     		movs	r1, #0
 198:./src/usb/usbhw.c **** 	LPC_USB->USBMaxPSize = USB_MAX_PACKET0;
 368              		.loc 1 198 0
 369 0004 0822     		movs	r2, #8
 199:./src/usb/usbhw.c **** 	LPC_USB->USBEpInd = 1;
 370              		.loc 1 199 0
 371 0006 0120     		movs	r0, #1
 197:./src/usb/usbhw.c **** 	LPC_USB->USBEpInd = 0;
 372              		.loc 1 197 0
 373 0008 C3F84812 		str	r1, [r3, #584]
 198:./src/usb/usbhw.c **** 	LPC_USB->USBMaxPSize = USB_MAX_PACKET0;
 374              		.loc 1 198 0
 375 000c C3F84C22 		str	r2, [r3, #588]
 200:./src/usb/usbhw.c **** 	LPC_USB->USBMaxPSize = USB_MAX_PACKET0;
 201:./src/usb/usbhw.c **** 	while ((LPC_USB->USBDevIntSt & EP_RLZED_INT) == 0)
 376              		.loc 1 201 0
 377 0010 1946     		mov	r1, r3
 199:./src/usb/usbhw.c **** 	LPC_USB->USBEpInd = 1;
 378              		.loc 1 199 0
 379 0012 C3F84802 		str	r0, [r3, #584]
 200:./src/usb/usbhw.c **** 	LPC_USB->USBMaxPSize = USB_MAX_PACKET0;
 380              		.loc 1 200 0
 381 0016 C3F84C22 		str	r2, [r3, #588]
 382              	.L46:
 383              		.loc 1 201 0 discriminator 1
 384 001a D1F80032 		ldr	r3, [r1, #512]
 385 001e 074A     		ldr	r2, .L47
 386 0020 DB05     		lsls	r3, r3, #23
 387 0022 FAD5     		bpl	.L46
 202:./src/usb/usbhw.c **** 		;
 203:./src/usb/usbhw.c **** 
 204:./src/usb/usbhw.c **** 	LPC_USB->USBEpIntClr = 0xFFFFFFFF;
 388              		.loc 1 204 0
 389 0024 4FF0FF33 		mov	r3, #-1
 205:./src/usb/usbhw.c **** 	LPC_USB->USBEpIntEn = 0xFFFFFFFF ^ USB_DMA_EP;
 206:./src/usb/usbhw.c **** 	LPC_USB->USBDevIntClr = 0xFFFFFFFF;
 207:./src/usb/usbhw.c **** 	LPC_USB->USBDevIntEn = DEV_STAT_INT | EP_SLOW_INT
 390              		.loc 1 207 0
 391 0028 0C21     		movs	r1, #12
 204:./src/usb/usbhw.c **** 	LPC_USB->USBEpIntClr = 0xFFFFFFFF;
 392              		.loc 1 204 0
 393 002a C2F83832 		str	r3, [r2, #568]
 205:./src/usb/usbhw.c **** 	LPC_USB->USBEpIntEn = 0xFFFFFFFF ^ USB_DMA_EP;
 394              		.loc 1 205 0
 395 002e C2F83432 		str	r3, [r2, #564]
 206:./src/usb/usbhw.c **** 	LPC_USB->USBDevIntClr = 0xFFFFFFFF;
 396              		.loc 1 206 0
 397 0032 C2F80832 		str	r3, [r2, #520]
 398              		.loc 1 207 0
 399 0036 C2F80412 		str	r1, [r2, #516]
 400 003a 7047     		bx	lr
 401              	.L48:
 402              		.align	2
 403              	.L47:
 404 003c 00C00050 		.word	1342226432
 405              		.cfi_endproc
 406              	.LFE62:
 408              		.section	.text.USB_Suspend,"ax",%progbits
 409              		.align	2
 410              		.global	USB_Suspend
 411              		.thumb
 412              		.thumb_func
 414              	USB_Suspend:
 415              	.LFB63:
 208:./src/usb/usbhw.c **** 			| (USB_SOF_EVENT ? FRAME_INT : 0) | (USB_ERROR_EVENT ? ERR_INT : 0);
 209:./src/usb/usbhw.c **** 
 210:./src/usb/usbhw.c **** #if USB_DMA
 211:./src/usb/usbhw.c **** 	LPC_USB->USBUDCAH = USB_RAM_ADR;
 212:./src/usb/usbhw.c **** 	LPC_USB->USBDMARClr = 0xFFFFFFFF;
 213:./src/usb/usbhw.c **** 	LPC_USB->USBEpDMADis = 0xFFFFFFFF;
 214:./src/usb/usbhw.c **** 	LPC_USB->USBEpDMAEn = USB_DMA_EP;
 215:./src/usb/usbhw.c **** 	LPC_USB->USBEoTIntClr = 0xFFFFFFFF;
 216:./src/usb/usbhw.c **** 	LPC_USB->USBNDDRIntClr = 0xFFFFFFFF;
 217:./src/usb/usbhw.c **** 	LPC_USB->USBSysErrIntClr = 0xFFFFFFFF;
 218:./src/usb/usbhw.c **** 	LPC_USB->USBDMAIntEn = 0x00000007;
 219:./src/usb/usbhw.c **** 	DDMemMap[0] = 0x00000000;
 220:./src/usb/usbhw.c **** 	DDMemMap[1] = 0x00000000;
 221:./src/usb/usbhw.c **** 	for (n = 0; n < USB_EP_NUM; n++)
 222:./src/usb/usbhw.c **** 	{
 223:./src/usb/usbhw.c **** 		udca[n] = 0;
 224:./src/usb/usbhw.c **** 		UDCA[n] = 0;
 225:./src/usb/usbhw.c **** 	}
 226:./src/usb/usbhw.c **** #endif
 227:./src/usb/usbhw.c **** }
 228:./src/usb/usbhw.c **** 
 229:./src/usb/usbhw.c **** /*
 230:./src/usb/usbhw.c ****  *  USB Suspend Function
 231:./src/usb/usbhw.c ****  *   Called automatically on USB Suspend
 232:./src/usb/usbhw.c ****  *    Return Value:    None
 233:./src/usb/usbhw.c ****  */
 234:./src/usb/usbhw.c **** 
 235:./src/usb/usbhw.c **** void USB_Suspend(void)
 236:./src/usb/usbhw.c **** {
 416              		.loc 1 236 0
 417              		.cfi_startproc
 418              		@ args = 0, pretend = 0, frame = 0
 419              		@ frame_needed = 0, uses_anonymous_args = 0
 420              		@ link register save eliminated.
 421 0000 7047     		bx	lr
 422              		.cfi_endproc
 423              	.LFE63:
 425 0002 00BF     		.section	.text.USB_Resume,"ax",%progbits
 426              		.align	2
 427              		.global	USB_Resume
 428              		.thumb
 429              		.thumb_func
 431              	USB_Resume:
 432              	.LFB64:
 237:./src/usb/usbhw.c **** 	/* Performed by Hardware */
 238:./src/usb/usbhw.c **** }
 239:./src/usb/usbhw.c **** 
 240:./src/usb/usbhw.c **** /*
 241:./src/usb/usbhw.c ****  *  USB Resume Function
 242:./src/usb/usbhw.c ****  *   Called automatically on USB Resume
 243:./src/usb/usbhw.c ****  *    Return Value:    None
 244:./src/usb/usbhw.c ****  */
 245:./src/usb/usbhw.c **** 
 246:./src/usb/usbhw.c **** void USB_Resume(void)
 247:./src/usb/usbhw.c **** {
 433              		.loc 1 247 0
 434              		.cfi_startproc
 435              		@ args = 0, pretend = 0, frame = 0
 436              		@ frame_needed = 0, uses_anonymous_args = 0
 437              		@ link register save eliminated.
 438 0000 7047     		bx	lr
 439              		.cfi_endproc
 440              	.LFE64:
 442 0002 00BF     		.section	.text.USB_WakeUp,"ax",%progbits
 443              		.align	2
 444              		.global	USB_WakeUp
 445              		.thumb
 446              		.thumb_func
 448              	USB_WakeUp:
 449              	.LFB65:
 248:./src/usb/usbhw.c **** 	/* Performed by Hardware */
 249:./src/usb/usbhw.c **** }
 250:./src/usb/usbhw.c **** 
 251:./src/usb/usbhw.c **** /*
 252:./src/usb/usbhw.c ****  *  USB Remote Wakeup Function
 253:./src/usb/usbhw.c ****  *   Called automatically on USB Remote Wakeup
 254:./src/usb/usbhw.c ****  *    Return Value:    None
 255:./src/usb/usbhw.c ****  */
 256:./src/usb/usbhw.c **** 
 257:./src/usb/usbhw.c **** void USB_WakeUp(void)
 258:./src/usb/usbhw.c **** {
 450              		.loc 1 258 0
 451              		.cfi_startproc
 452              		@ args = 0, pretend = 0, frame = 0
 453              		@ frame_needed = 0, uses_anonymous_args = 0
 454              		@ link register save eliminated.
 259:./src/usb/usbhw.c **** 
 260:./src/usb/usbhw.c **** 	if (USB_DeviceStatus & USB_GETSTATUS_REMOTE_WAKEUP)
 455              		.loc 1 260 0
 456 0000 0E4B     		ldr	r3, .L57
 457 0002 1B88     		ldrh	r3, [r3]
 458 0004 9B07     		lsls	r3, r3, #30
 459 0006 17D5     		bpl	.L51
 460              	.LVL19:
 461              	.LBB70:
 462              	.LBB71:
  97:./src/usb/usbhw.c **** 	LPC_USB->USBDevIntClr = CCEMTY_INT;
 463              		.loc 1 97 0
 464 0008 0D4B     		ldr	r3, .L57+4
  98:./src/usb/usbhw.c **** 	LPC_USB->USBCmdCode = cmd;
 465              		.loc 1 98 0
 466 000a 0E4A     		ldr	r2, .L57+8
  97:./src/usb/usbhw.c **** 	LPC_USB->USBDevIntClr = CCEMTY_INT;
 467              		.loc 1 97 0
 468 000c 1021     		movs	r1, #16
 469 000e C3F80812 		str	r1, [r3, #520]
  99:./src/usb/usbhw.c **** 	while ((LPC_USB->USBDevIntSt & CCEMTY_INT) == 0)
 470              		.loc 1 99 0
 471 0012 1946     		mov	r1, r3
  98:./src/usb/usbhw.c **** 	LPC_USB->USBCmdCode = cmd;
 472              		.loc 1 98 0
 473 0014 C3F81022 		str	r2, [r3, #528]
 474              	.L54:
  99:./src/usb/usbhw.c **** 	while ((LPC_USB->USBDevIntSt & CCEMTY_INT) == 0)
 475              		.loc 1 99 0
 476 0018 D1F80032 		ldr	r3, [r1, #512]
 477 001c 084A     		ldr	r2, .L57+4
 478 001e D806     		lsls	r0, r3, #27
 479 0020 FAD5     		bpl	.L54
 102:./src/usb/usbhw.c **** 	LPC_USB->USBCmdCode = val;
 480              		.loc 1 102 0
 481 0022 094B     		ldr	r3, .L57+12
 101:./src/usb/usbhw.c **** 	LPC_USB->USBDevIntClr = CCEMTY_INT;
 482              		.loc 1 101 0
 483 0024 1021     		movs	r1, #16
 484 0026 C2F80812 		str	r1, [r2, #520]
 103:./src/usb/usbhw.c **** 	while ((LPC_USB->USBDevIntSt & CCEMTY_INT) == 0)
 485              		.loc 1 103 0
 486 002a 1146     		mov	r1, r2
 102:./src/usb/usbhw.c **** 	LPC_USB->USBCmdCode = val;
 487              		.loc 1 102 0
 488 002c C2F81032 		str	r3, [r2, #528]
 489              	.L56:
 103:./src/usb/usbhw.c **** 	while ((LPC_USB->USBDevIntSt & CCEMTY_INT) == 0)
 490              		.loc 1 103 0
 491 0030 D1F80032 		ldr	r3, [r1, #512]
 492 0034 DB06     		lsls	r3, r3, #27
 493 0036 FBD5     		bpl	.L56
 494              	.LVL20:
 495              	.L51:
 496 0038 7047     		bx	lr
 497              	.L58:
 498 003a 00BF     		.align	2
 499              	.L57:
 500 003c 00000000 		.word	USB_DeviceStatus
 501 0040 00C00050 		.word	1342226432
 502 0044 0005FE00 		.word	16647424
 503 0048 00010100 		.word	65792
 504              	.LBE71:
 505              	.LBE70:
 506              		.cfi_endproc
 507              	.LFE65:
 509              		.section	.text.USB_WakeUpCfg,"ax",%progbits
 510              		.align	2
 511              		.global	USB_WakeUpCfg
 512              		.thumb
 513              		.thumb_func
 515              	USB_WakeUpCfg:
 516              	.LFB66:
 261:./src/usb/usbhw.c **** 	{
 262:./src/usb/usbhw.c **** 		WrCmdDat(CMD_SET_DEV_STAT, DAT_WR_BYTE(DEV_CON));
 263:./src/usb/usbhw.c **** 	}
 264:./src/usb/usbhw.c **** }
 265:./src/usb/usbhw.c **** 
 266:./src/usb/usbhw.c **** /*
 267:./src/usb/usbhw.c ****  *  USB Remote Wakeup Configuration Function
 268:./src/usb/usbhw.c ****  *    Parameters:      cfg:   Enable/Disable
 269:./src/usb/usbhw.c ****  *    Return Value:    None
 270:./src/usb/usbhw.c ****  */
 271:./src/usb/usbhw.c **** 
 272:./src/usb/usbhw.c **** void USB_WakeUpCfg(uint32_t cfg)
 273:./src/usb/usbhw.c **** {
 517              		.loc 1 273 0
 518              		.cfi_startproc
 519              		@ args = 0, pretend = 0, frame = 0
 520              		@ frame_needed = 0, uses_anonymous_args = 0
 521              		@ link register save eliminated.
 522              	.LVL21:
 523 0000 7047     		bx	lr
 524              		.cfi_endproc
 525              	.LFE66:
 527 0002 00BF     		.section	.text.USB_SetAddress,"ax",%progbits
 528              		.align	2
 529              		.global	USB_SetAddress
 530              		.thumb
 531              		.thumb_func
 533              	USB_SetAddress:
 534              	.LFB67:
 274:./src/usb/usbhw.c **** 	/* Not needed */
 275:./src/usb/usbhw.c **** }
 276:./src/usb/usbhw.c **** 
 277:./src/usb/usbhw.c **** /*
 278:./src/usb/usbhw.c ****  *  USB Set Address Function
 279:./src/usb/usbhw.c ****  *    Parameters:      adr:   USB Address
 280:./src/usb/usbhw.c ****  *    Return Value:    None
 281:./src/usb/usbhw.c ****  */
 282:./src/usb/usbhw.c **** 
 283:./src/usb/usbhw.c **** void USB_SetAddress(uint32_t adr)
 284:./src/usb/usbhw.c **** {
 535              		.loc 1 284 0
 536              		.cfi_startproc
 537              		@ args = 0, pretend = 0, frame = 0
 538              		@ frame_needed = 0, uses_anonymous_args = 0
 539              		@ link register save eliminated.
 540              	.LVL22:
 541              	.LBB72:
 542              	.LBB73:
  97:./src/usb/usbhw.c **** 	LPC_USB->USBDevIntClr = CCEMTY_INT;
 543              		.loc 1 97 0
 544 0000 194B     		ldr	r3, .L69
 545              	.LBE73:
 546              	.LBE72:
 285:./src/usb/usbhw.c **** 	WrCmdDat(CMD_SET_ADDR, DAT_WR_BYTE(DEV_EN | adr)); /* Don't wait for next */
 547              		.loc 1 285 0
 548 0002 0004     		lsls	r0, r0, #16
 549              	.LVL23:
 550              	.LBB77:
 551              	.LBB74:
  98:./src/usb/usbhw.c **** 	LPC_USB->USBCmdCode = cmd;
 552              		.loc 1 98 0
 553 0004 194A     		ldr	r2, .L69+4
  97:./src/usb/usbhw.c **** 	LPC_USB->USBDevIntClr = CCEMTY_INT;
 554              		.loc 1 97 0
 555 0006 1021     		movs	r1, #16
 556              	.LBE74:
 557              	.LBE77:
 558              		.loc 1 285 0
 559 0008 40F40000 		orr	r0, r0, #8388608
 560              	.LBB78:
 561              	.LBB75:
  97:./src/usb/usbhw.c **** 	LPC_USB->USBDevIntClr = CCEMTY_INT;
 562              		.loc 1 97 0
 563 000c C3F80812 		str	r1, [r3, #520]
 564              	.LBE75:
 565              	.LBE78:
 566              		.loc 1 285 0
 567 0010 40F48070 		orr	r0, r0, #256
 568              	.LVL24:
 569              	.LBB79:
 570              	.LBB76:
  99:./src/usb/usbhw.c **** 	while ((LPC_USB->USBDevIntSt & CCEMTY_INT) == 0)
 571              		.loc 1 99 0
 572 0014 1946     		mov	r1, r3
  98:./src/usb/usbhw.c **** 	LPC_USB->USBCmdCode = cmd;
 573              		.loc 1 98 0
 574 0016 C3F81022 		str	r2, [r3, #528]
 575              	.L62:
  99:./src/usb/usbhw.c **** 	while ((LPC_USB->USBDevIntSt & CCEMTY_INT) == 0)
 576              		.loc 1 99 0
 577 001a D1F80032 		ldr	r3, [r1, #512]
 578 001e 124A     		ldr	r2, .L69
 579 0020 DB06     		lsls	r3, r3, #27
 580 0022 FAD5     		bpl	.L62
 101:./src/usb/usbhw.c **** 	LPC_USB->USBDevIntClr = CCEMTY_INT;
 581              		.loc 1 101 0
 582 0024 1023     		movs	r3, #16
 583 0026 C2F80832 		str	r3, [r2, #520]
 103:./src/usb/usbhw.c **** 	while ((LPC_USB->USBDevIntSt & CCEMTY_INT) == 0)
 584              		.loc 1 103 0
 585 002a 1146     		mov	r1, r2
 102:./src/usb/usbhw.c **** 	LPC_USB->USBCmdCode = val;
 586              		.loc 1 102 0
 587 002c C2F81002 		str	r0, [r2, #528]
 588              	.L64:
 103:./src/usb/usbhw.c **** 	while ((LPC_USB->USBDevIntSt & CCEMTY_INT) == 0)
 589              		.loc 1 103 0
 590 0030 D1F80032 		ldr	r3, [r1, #512]
 591 0034 0C4A     		ldr	r2, .L69
 592 0036 DB06     		lsls	r3, r3, #27
 593 0038 FAD5     		bpl	.L64
 594              	.LVL25:
 595              	.LBE76:
 596              	.LBE79:
 597              	.LBB80:
 598              	.LBB81:
  98:./src/usb/usbhw.c **** 	LPC_USB->USBCmdCode = cmd;
 599              		.loc 1 98 0
 600 003a 0C4B     		ldr	r3, .L69+4
  97:./src/usb/usbhw.c **** 	LPC_USB->USBDevIntClr = CCEMTY_INT;
 601              		.loc 1 97 0
 602 003c 1021     		movs	r1, #16
 603 003e C2F80812 		str	r1, [r2, #520]
  99:./src/usb/usbhw.c **** 	while ((LPC_USB->USBDevIntSt & CCEMTY_INT) == 0)
 604              		.loc 1 99 0
 605 0042 1146     		mov	r1, r2
  98:./src/usb/usbhw.c **** 	LPC_USB->USBCmdCode = cmd;
 606              		.loc 1 98 0
 607 0044 C2F81032 		str	r3, [r2, #528]
 608              	.L66:
  99:./src/usb/usbhw.c **** 	while ((LPC_USB->USBDevIntSt & CCEMTY_INT) == 0)
 609              		.loc 1 99 0
 610 0048 D1F80032 		ldr	r3, [r1, #512]
 611 004c 064A     		ldr	r2, .L69
 612 004e DB06     		lsls	r3, r3, #27
 613 0050 FAD5     		bpl	.L66
 101:./src/usb/usbhw.c **** 	LPC_USB->USBDevIntClr = CCEMTY_INT;
 614              		.loc 1 101 0
 615 0052 1023     		movs	r3, #16
 616 0054 C2F80832 		str	r3, [r2, #520]
 103:./src/usb/usbhw.c **** 	while ((LPC_USB->USBDevIntSt & CCEMTY_INT) == 0)
 617              		.loc 1 103 0
 618 0058 1146     		mov	r1, r2
 102:./src/usb/usbhw.c **** 	LPC_USB->USBCmdCode = val;
 619              		.loc 1 102 0
 620 005a C2F81002 		str	r0, [r2, #528]
 621              	.L68:
 103:./src/usb/usbhw.c **** 	while ((LPC_USB->USBDevIntSt & CCEMTY_INT) == 0)
 622              		.loc 1 103 0
 623 005e D1F80032 		ldr	r3, [r1, #512]
 624 0062 DB06     		lsls	r3, r3, #27
 625 0064 FBD5     		bpl	.L68
 626              	.LBE81:
 627              	.LBE80:
 286:./src/usb/usbhw.c **** 	WrCmdDat(CMD_SET_ADDR, DAT_WR_BYTE(DEV_EN | adr)); /*  Setup Status Phase */
 287:./src/usb/usbhw.c **** }
 628              		.loc 1 287 0
 629 0066 7047     		bx	lr
 630              	.L70:
 631              		.align	2
 632              	.L69:
 633 0068 00C00050 		.word	1342226432
 634 006c 0005D000 		.word	13632768
 635              		.cfi_endproc
 636              	.LFE67:
 638              		.section	.text.USB_Init,"ax",%progbits
 639              		.align	2
 640              		.global	USB_Init
 641              		.thumb
 642              		.thumb_func
 644              	USB_Init:
 645              	.LFB60:
 150:./src/usb/usbhw.c **** {
 646              		.loc 1 150 0
 647              		.cfi_startproc
 648              		@ args = 0, pretend = 0, frame = 0
 649              		@ frame_needed = 0, uses_anonymous_args = 0
 650              		@ link register save eliminated.
 152:./src/usb/usbhw.c **** 	LPC_PINCON->PINSEL1 &= ~((3 << 26) | (3 << 28)); /* P0.29 D+, P0.30 D- */
 651              		.loc 1 152 0
 652 0000 2A4B     		ldr	r3, .L76
 150:./src/usb/usbhw.c **** {
 653              		.loc 1 150 0
 654 0002 30B4     		push	{r4, r5}
 655              		.cfi_def_cfa_offset 8
 656              		.cfi_offset 4, -8
 657              		.cfi_offset 5, -4
 152:./src/usb/usbhw.c **** 	LPC_PINCON->PINSEL1 &= ~((3 << 26) | (3 << 28)); /* P0.29 D+, P0.30 D- */
 658              		.loc 1 152 0
 659 0004 5A68     		ldr	r2, [r3, #4]
 161:./src/usb/usbhw.c **** 	LPC_SC->PCONP |= (1UL << 31); /* USB PCLK -> enable USB Per.       */
 660              		.loc 1 161 0
 661 0006 2A4C     		ldr	r4, .L76+4
 152:./src/usb/usbhw.c **** 	LPC_PINCON->PINSEL1 &= ~((3 << 26) | (3 << 28)); /* P0.29 D+, P0.30 D- */
 662              		.loc 1 152 0
 663 0008 22F07052 		bic	r2, r2, #1006632960
 664 000c 5A60     		str	r2, [r3, #4]
 153:./src/usb/usbhw.c **** 	LPC_PINCON->PINSEL1 |= ((1 << 26) | (1 << 28)); /* PINSEL1 26.27, 28.29  = 01 */
 665              		.loc 1 153 0
 666 000e 5A68     		ldr	r2, [r3, #4]
 163:./src/usb/usbhw.c **** 	LPC_USB->USBClkCtrl = 0x12; /* / 1A / Dev, PortSel, AHB clock enable */
 667              		.loc 1 163 0
 668 0010 2848     		ldr	r0, .L76+8
 153:./src/usb/usbhw.c **** 	LPC_PINCON->PINSEL1 |= ((1 << 26) | (1 << 28)); /* PINSEL1 26.27, 28.29  = 01 */
 669              		.loc 1 153 0
 670 0012 42F0A052 		orr	r2, r2, #335544320
 671 0016 5A60     		str	r2, [r3, #4]
 155:./src/usb/usbhw.c **** 	LPC_PINCON->PINSEL3 &= ~((3 << 4) | (3 << 28)); /* P1.18 GoodLink, P1.30 VBUS */
 672              		.loc 1 155 0
 673 0018 DA68     		ldr	r2, [r3, #12]
 163:./src/usb/usbhw.c **** 	LPC_USB->USBClkCtrl = 0x12; /* / 1A / Dev, PortSel, AHB clock enable */
 674              		.loc 1 163 0
 675 001a 1225     		movs	r5, #18
 155:./src/usb/usbhw.c **** 	LPC_PINCON->PINSEL3 &= ~((3 << 4) | (3 << 28)); /* P1.18 GoodLink, P1.30 VBUS */
 676              		.loc 1 155 0
 677 001c 22F04052 		bic	r2, r2, #805306368
 678 0020 22F03002 		bic	r2, r2, #48
 679 0024 DA60     		str	r2, [r3, #12]
 156:./src/usb/usbhw.c **** 	LPC_PINCON->PINSEL3 |= ((1 << 4) | (2 << 28)); /* PINSEL3 4.5 = 01, 28.29 = 10 */
 680              		.loc 1 156 0
 681 0026 DA68     		ldr	r2, [r3, #12]
 164:./src/usb/usbhw.c **** 	while ((LPC_USB->USBClkSt & 0x12) != 0x12)
 682              		.loc 1 164 0
 683 0028 0146     		mov	r1, r0
 156:./src/usb/usbhw.c **** 	LPC_PINCON->PINSEL3 |= ((1 << 4) | (2 << 28)); /* PINSEL3 4.5 = 01, 28.29 = 10 */
 684              		.loc 1 156 0
 685 002a 42F00052 		orr	r2, r2, #536870912
 686 002e 42F01002 		orr	r2, r2, #16
 687 0032 DA60     		str	r2, [r3, #12]
 158:./src/usb/usbhw.c **** 	LPC_PINCON->PINSEL4 &= ~((3 << 18) ); /* P2.9 SoftConnect */
 688              		.loc 1 158 0
 689 0034 1A69     		ldr	r2, [r3, #16]
 690 0036 22F44022 		bic	r2, r2, #786432
 691 003a 1A61     		str	r2, [r3, #16]
 159:./src/usb/usbhw.c **** 	LPC_PINCON->PINSEL4 |= ((1 << 18) ); /* PINSEL4 18.19 = 01 */
 692              		.loc 1 159 0
 693 003c 1A69     		ldr	r2, [r3, #16]
 694 003e 42F48022 		orr	r2, r2, #262144
 695 0042 1A61     		str	r2, [r3, #16]
 161:./src/usb/usbhw.c **** 	LPC_SC->PCONP |= (1UL << 31); /* USB PCLK -> enable USB Per.       */
 696              		.loc 1 161 0
 697 0044 D4F8C430 		ldr	r3, [r4, #196]
 698 0048 43F00043 		orr	r3, r3, #-2147483648
 699 004c C4F8C430 		str	r3, [r4, #196]
 163:./src/usb/usbhw.c **** 	LPC_USB->USBClkCtrl = 0x12; /* / 1A / Dev, PortSel, AHB clock enable */
 700              		.loc 1 163 0
 701 0050 C0F8F45F 		str	r5, [r0, #4084]
 702              	.L73:
 164:./src/usb/usbhw.c **** 	while ((LPC_USB->USBClkSt & 0x12) != 0x12)
 703              		.loc 1 164 0 discriminator 1
 704 0054 D1F8F83F 		ldr	r3, [r1, #4088]
 705 0058 164A     		ldr	r2, .L76+8
 706 005a 03F01203 		and	r3, r3, #18
 707 005e 122B     		cmp	r3, #18
 708 0060 F8D1     		bne	.L73
 709              	.LVL26:
 710              	.LBB82:
 711              	.LBB83:
 712              		.file 2 "./Core/core_cm3.h"
   1:./Core/core_cm3.h **** /**************************************************************************//**
   2:./Core/core_cm3.h ****  * @file     core_cm3.h
   3:./Core/core_cm3.h ****  * @brief    CMSIS Cortex-M3 Core Peripheral Access Layer Header File
   4:./Core/core_cm3.h ****  * @version  V2.01
   5:./Core/core_cm3.h ****  * @date     06. December 2010
   6:./Core/core_cm3.h ****  *
   7:./Core/core_cm3.h ****  * @note
   8:./Core/core_cm3.h ****  * Copyright (C) 2009-2010 ARM Limited. All rights reserved.
   9:./Core/core_cm3.h ****  *
  10:./Core/core_cm3.h ****  * @par
  11:./Core/core_cm3.h ****  * ARM Limited (ARM) is supplying this software for use with Cortex-M
  12:./Core/core_cm3.h ****  * processor based microcontrollers.  This file can be freely distributed
  13:./Core/core_cm3.h ****  * within development tools that are supporting such ARM based processors.
  14:./Core/core_cm3.h ****  *
  15:./Core/core_cm3.h ****  * @par
  16:./Core/core_cm3.h ****  * THIS SOFTWARE IS PROVIDED "AS IS".  NO WARRANTIES, WHETHER EXPRESS, IMPLIED
  17:./Core/core_cm3.h ****  * OR STATUTORY, INCLUDING, BUT NOT LIMITED TO, IMPLIED WARRANTIES OF
  18:./Core/core_cm3.h ****  * MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE APPLY TO THIS SOFTWARE.
  19:./Core/core_cm3.h ****  * ARM SHALL NOT, IN ANY CIRCUMSTANCES, BE LIABLE FOR SPECIAL, INCIDENTAL, OR
  20:./Core/core_cm3.h ****  * CONSEQUENTIAL DAMAGES, FOR ANY REASON WHATSOEVER.
  21:./Core/core_cm3.h ****  *
  22:./Core/core_cm3.h ****  ******************************************************************************/
  23:./Core/core_cm3.h **** #if defined ( __ICCARM__ )
  24:./Core/core_cm3.h ****  #pragma system_include  /* treat file as system include file for MISRA check */
  25:./Core/core_cm3.h **** #endif
  26:./Core/core_cm3.h **** 
  27:./Core/core_cm3.h **** #ifdef __cplusplus
  28:./Core/core_cm3.h ****  extern "C" {
  29:./Core/core_cm3.h **** #endif
  30:./Core/core_cm3.h **** 
  31:./Core/core_cm3.h **** #ifndef __CORE_CM3_H_GENERIC
  32:./Core/core_cm3.h **** #define __CORE_CM3_H_GENERIC
  33:./Core/core_cm3.h **** 
  34:./Core/core_cm3.h **** /** @addtogroup CMSIS_core_LintCinfiguration CMSIS Core Lint Configuration
  35:./Core/core_cm3.h ****   List of Lint messages which will be suppressed and not shown:
  36:./Core/core_cm3.h ****     - not yet checked
  37:./Core/core_cm3.h ****   .
  38:./Core/core_cm3.h ****   Note:  To re-enable a Message, insert a space before 'lint' *
  39:./Core/core_cm3.h **** 
  40:./Core/core_cm3.h ****  */
  41:./Core/core_cm3.h **** 
  42:./Core/core_cm3.h **** 
  43:./Core/core_cm3.h **** /*******************************************************************************
  44:./Core/core_cm3.h ****  *                 CMSIS definitions
  45:./Core/core_cm3.h ****  ******************************************************************************/
  46:./Core/core_cm3.h **** /** @addtogroup CMSIS_core_definitions CMSIS Core Definitions
  47:./Core/core_cm3.h ****   This file defines all structures and symbols for CMSIS core:
  48:./Core/core_cm3.h ****    - CMSIS version number
  49:./Core/core_cm3.h ****    - Cortex-M core
  50:./Core/core_cm3.h ****    - Cortex-M core Revision Number
  51:./Core/core_cm3.h ****   @{
  52:./Core/core_cm3.h ****  */
  53:./Core/core_cm3.h **** 
  54:./Core/core_cm3.h **** /*  CMSIS CM3 definitions */
  55:./Core/core_cm3.h **** #define __CM3_CMSIS_VERSION_MAIN  (0x02)                                                       /*!<
  56:./Core/core_cm3.h **** #define __CM3_CMSIS_VERSION_SUB   (0x00)                                                       /*!<
  57:./Core/core_cm3.h **** #define __CM3_CMSIS_VERSION       ((__CM3_CMSIS_VERSION_MAIN << 16) | __CM3_CMSIS_VERSION_SUB) /*!<
  58:./Core/core_cm3.h **** 
  59:./Core/core_cm3.h **** #define __CORTEX_M                (0x03)                                                       /*!<
  60:./Core/core_cm3.h **** 
  61:./Core/core_cm3.h **** 
  62:./Core/core_cm3.h **** #if defined ( __CC_ARM   )
  63:./Core/core_cm3.h ****   #define __ASM            __asm                                      /*!< asm keyword for ARM Comp
  64:./Core/core_cm3.h ****   #define __INLINE         __inline                                   /*!< inline keyword for ARM C
  65:./Core/core_cm3.h **** 
  66:./Core/core_cm3.h **** #elif defined ( __ICCARM__ )
  67:./Core/core_cm3.h ****   #define __ASM           __asm                                       /*!< asm keyword for IAR Comp
  68:./Core/core_cm3.h ****   #define __INLINE        inline                                      /*!< inline keyword for IAR C
  69:./Core/core_cm3.h **** 
  70:./Core/core_cm3.h **** #elif defined   (  __GNUC__  )
  71:./Core/core_cm3.h ****   #define __ASM            __asm                                      /*!< asm keyword for GNU Comp
  72:./Core/core_cm3.h ****   #define __INLINE         inline                                     /*!< inline keyword for GNU C
  73:./Core/core_cm3.h **** 
  74:./Core/core_cm3.h **** #elif defined   (  __TASKING__  )
  75:./Core/core_cm3.h ****   #define __ASM            __asm                                      /*!< asm keyword for TASKING 
  76:./Core/core_cm3.h ****   #define __INLINE         inline                                     /*!< inline keyword for TASKI
  77:./Core/core_cm3.h **** 
  78:./Core/core_cm3.h **** #endif
  79:./Core/core_cm3.h **** 
  80:./Core/core_cm3.h **** #include <stdint.h>                      /*!< standard types definitions                      */
  81:./Core/core_cm3.h **** #include "core_cmInstr.h"                /*!< Core Instruction Access                         */
  82:./Core/core_cm3.h **** #include "core_cmFunc.h"                 /*!< Core Function Access                            */
  83:./Core/core_cm3.h **** 
  84:./Core/core_cm3.h **** #endif /* __CORE_CM3_H_GENERIC */
  85:./Core/core_cm3.h **** 
  86:./Core/core_cm3.h **** 
  87:./Core/core_cm3.h **** #ifndef __CMSIS_GENERIC
  88:./Core/core_cm3.h **** 
  89:./Core/core_cm3.h **** #ifndef __CORE_CM3_H_DEPENDANT
  90:./Core/core_cm3.h **** #define __CORE_CM3_H_DEPENDANT
  91:./Core/core_cm3.h **** 
  92:./Core/core_cm3.h **** /* IO definitions (access restrictions to peripheral registers) */
  93:./Core/core_cm3.h **** #ifdef __cplusplus
  94:./Core/core_cm3.h ****   #define     __I     volatile           /*!< defines 'read only' permissions                 */
  95:./Core/core_cm3.h **** #else
  96:./Core/core_cm3.h ****   #define     __I     volatile const     /*!< defines 'read only' permissions                 */
  97:./Core/core_cm3.h **** #endif
  98:./Core/core_cm3.h **** #define     __O     volatile             /*!< defines 'write only' permissions                */
  99:./Core/core_cm3.h **** #define     __IO    volatile             /*!< defines 'read / write' permissions              */
 100:./Core/core_cm3.h **** 
 101:./Core/core_cm3.h **** /*@} end of group CMSIS_core_definitions */
 102:./Core/core_cm3.h **** 
 103:./Core/core_cm3.h **** 
 104:./Core/core_cm3.h **** 
 105:./Core/core_cm3.h **** /*******************************************************************************
 106:./Core/core_cm3.h ****  *                 Register Abstraction
 107:./Core/core_cm3.h ****  ******************************************************************************/
 108:./Core/core_cm3.h **** /** @addtogroup CMSIS_core_register CMSIS Core Register
 109:./Core/core_cm3.h ****   Core Register contain:
 110:./Core/core_cm3.h ****   - Core Register
 111:./Core/core_cm3.h ****   - Core NVIC Register
 112:./Core/core_cm3.h ****   - Core SCB Register
 113:./Core/core_cm3.h ****   - Core SysTick Register
 114:./Core/core_cm3.h ****   - Core Debug Register
 115:./Core/core_cm3.h ****   - Core MPU Register
 116:./Core/core_cm3.h **** */
 117:./Core/core_cm3.h **** 
 118:./Core/core_cm3.h **** /** \ingroup  CMSIS_core_register
 119:./Core/core_cm3.h ****     \defgroup CMSIS_CORE CMSIS Core
 120:./Core/core_cm3.h ****   Type definitions for the Cortex-M Core Registers
 121:./Core/core_cm3.h ****   @{
 122:./Core/core_cm3.h ****  */
 123:./Core/core_cm3.h **** 
 124:./Core/core_cm3.h **** /** \brief  Union type to access the Application Program Status Register (APSR).
 125:./Core/core_cm3.h ****  */
 126:./Core/core_cm3.h **** typedef union
 127:./Core/core_cm3.h **** {
 128:./Core/core_cm3.h ****   struct
 129:./Core/core_cm3.h ****   {
 130:./Core/core_cm3.h **** #if (__CORTEX_M != 0x04)
 131:./Core/core_cm3.h ****     uint32_t _reserved0:27;              /*!< bit:  0..26  Reserved                           */
 132:./Core/core_cm3.h **** #else
 133:./Core/core_cm3.h ****     uint32_t _reserved0:16;              /*!< bit:  0..15  Reserved                           */
 134:./Core/core_cm3.h ****     uint32_t GE:4;                       /*!< bit: 16..19  Greater than or Equal flags        */
 135:./Core/core_cm3.h ****     uint32_t _reserved1:7;               /*!< bit: 20..26  Reserved                           */
 136:./Core/core_cm3.h **** #endif
 137:./Core/core_cm3.h ****     uint32_t Q:1;                        /*!< bit:     27  Saturation condition flag          */
 138:./Core/core_cm3.h ****     uint32_t V:1;                        /*!< bit:     28  Overflow condition code flag       */
 139:./Core/core_cm3.h ****     uint32_t C:1;                        /*!< bit:     29  Carry condition code flag          */
 140:./Core/core_cm3.h ****     uint32_t Z:1;                        /*!< bit:     30  Zero condition code flag           */
 141:./Core/core_cm3.h ****     uint32_t N:1;                        /*!< bit:     31  Negative condition code flag       */
 142:./Core/core_cm3.h ****   } b;                                   /*!< Structure used for bit  access                  */
 143:./Core/core_cm3.h ****   uint32_t w;                            /*!< Type      used for word access                  */
 144:./Core/core_cm3.h **** } APSR_Type;
 145:./Core/core_cm3.h **** 
 146:./Core/core_cm3.h **** 
 147:./Core/core_cm3.h **** /** \brief  Union type to access the Interrupt Program Status Register (IPSR).
 148:./Core/core_cm3.h ****  */
 149:./Core/core_cm3.h **** typedef union
 150:./Core/core_cm3.h **** {
 151:./Core/core_cm3.h ****   struct
 152:./Core/core_cm3.h ****   {
 153:./Core/core_cm3.h ****     uint32_t ISR:9;                      /*!< bit:  0.. 8  Exception number                   */
 154:./Core/core_cm3.h ****     uint32_t _reserved0:23;              /*!< bit:  9..31  Reserved                           */
 155:./Core/core_cm3.h ****   } b;                                   /*!< Structure used for bit  access                  */
 156:./Core/core_cm3.h ****   uint32_t w;                            /*!< Type      used for word access                  */
 157:./Core/core_cm3.h **** } IPSR_Type;
 158:./Core/core_cm3.h **** 
 159:./Core/core_cm3.h **** 
 160:./Core/core_cm3.h **** /** \brief  Union type to access the Special-Purpose Program Status Registers (xPSR).
 161:./Core/core_cm3.h ****  */
 162:./Core/core_cm3.h **** typedef union
 163:./Core/core_cm3.h **** {
 164:./Core/core_cm3.h ****   struct
 165:./Core/core_cm3.h ****   {
 166:./Core/core_cm3.h ****     uint32_t ISR:9;                      /*!< bit:  0.. 8  Exception number                   */
 167:./Core/core_cm3.h **** #if (__CORTEX_M != 0x04)
 168:./Core/core_cm3.h ****     uint32_t _reserved0:15;              /*!< bit:  9..23  Reserved                           */
 169:./Core/core_cm3.h **** #else
 170:./Core/core_cm3.h ****     uint32_t _reserved0:7;               /*!< bit:  9..15  Reserved                           */
 171:./Core/core_cm3.h ****     uint32_t GE:4;                       /*!< bit: 16..19  Greater than or Equal flags        */
 172:./Core/core_cm3.h ****     uint32_t _reserved1:4;               /*!< bit: 20..23  Reserved                           */
 173:./Core/core_cm3.h **** #endif
 174:./Core/core_cm3.h ****     uint32_t T:1;                        /*!< bit:     24  Thumb bit        (read 0)          */
 175:./Core/core_cm3.h ****     uint32_t IT:2;                       /*!< bit: 25..26  saved IT state   (read 0)          */
 176:./Core/core_cm3.h ****     uint32_t Q:1;                        /*!< bit:     27  Saturation condition flag          */
 177:./Core/core_cm3.h ****     uint32_t V:1;                        /*!< bit:     28  Overflow condition code flag       */
 178:./Core/core_cm3.h ****     uint32_t C:1;                        /*!< bit:     29  Carry condition code flag          */
 179:./Core/core_cm3.h ****     uint32_t Z:1;                        /*!< bit:     30  Zero condition code flag           */
 180:./Core/core_cm3.h ****     uint32_t N:1;                        /*!< bit:     31  Negative condition code flag       */
 181:./Core/core_cm3.h ****   } b;                                   /*!< Structure used for bit  access                  */
 182:./Core/core_cm3.h ****   uint32_t w;                            /*!< Type      used for word access                  */
 183:./Core/core_cm3.h **** } xPSR_Type;
 184:./Core/core_cm3.h **** 
 185:./Core/core_cm3.h **** 
 186:./Core/core_cm3.h **** /** \brief  Union type to access the Control Registers (CONTROL).
 187:./Core/core_cm3.h ****  */
 188:./Core/core_cm3.h **** typedef union
 189:./Core/core_cm3.h **** {
 190:./Core/core_cm3.h ****   struct
 191:./Core/core_cm3.h ****   {
 192:./Core/core_cm3.h ****     uint32_t nPRIV:1;                    /*!< bit:      0  Execution privilege in Thread mode */
 193:./Core/core_cm3.h ****     uint32_t SPSEL:1;                    /*!< bit:      1  Stack to be used                   */
 194:./Core/core_cm3.h ****     uint32_t FPCA:1;                     /*!< bit:      2  FP extension active flag           */
 195:./Core/core_cm3.h ****     uint32_t _reserved0:29;              /*!< bit:  3..31  Reserved                           */
 196:./Core/core_cm3.h ****   } b;                                   /*!< Structure used for bit  access                  */
 197:./Core/core_cm3.h ****   uint32_t w;                            /*!< Type      used for word access                  */
 198:./Core/core_cm3.h **** } CONTROL_Type;
 199:./Core/core_cm3.h **** 
 200:./Core/core_cm3.h **** /*@} end of group CMSIS_CORE */
 201:./Core/core_cm3.h **** 
 202:./Core/core_cm3.h **** 
 203:./Core/core_cm3.h **** /** \ingroup  CMSIS_core_register
 204:./Core/core_cm3.h ****     \defgroup CMSIS_NVIC CMSIS NVIC
 205:./Core/core_cm3.h ****   Type definitions for the Cortex-M NVIC Registers
 206:./Core/core_cm3.h ****   @{
 207:./Core/core_cm3.h ****  */
 208:./Core/core_cm3.h **** 
 209:./Core/core_cm3.h **** /** \brief  Structure type to access the Nested Vectored Interrupt Controller (NVIC).
 210:./Core/core_cm3.h ****  */
 211:./Core/core_cm3.h **** typedef struct
 212:./Core/core_cm3.h **** {
 213:./Core/core_cm3.h ****   __IO uint32_t ISER[8];                 /*!< Offset: 0x000 (R/W)  Interrupt Set Enable Register   
 214:./Core/core_cm3.h ****        uint32_t RESERVED0[24];
 215:./Core/core_cm3.h ****   __IO uint32_t ICER[8];                 /*!< Offset: 0x080 (R/W)  Interrupt Clear Enable Register 
 216:./Core/core_cm3.h ****        uint32_t RSERVED1[24];
 217:./Core/core_cm3.h ****   __IO uint32_t ISPR[8];                 /*!< Offset: 0x100 (R/W)  Interrupt Set Pending Register  
 218:./Core/core_cm3.h ****        uint32_t RESERVED2[24];
 219:./Core/core_cm3.h ****   __IO uint32_t ICPR[8];                 /*!< Offset: 0x180 (R/W)  Interrupt Clear Pending Register
 220:./Core/core_cm3.h ****        uint32_t RESERVED3[24];
 221:./Core/core_cm3.h ****   __IO uint32_t IABR[8];                 /*!< Offset: 0x200 (R/W)  Interrupt Active bit Register   
 222:./Core/core_cm3.h ****        uint32_t RESERVED4[56];
 223:./Core/core_cm3.h ****   __IO uint8_t  IP[240];                 /*!< Offset: 0x300 (R/W)  Interrupt Priority Register (8Bi
 224:./Core/core_cm3.h ****        uint32_t RESERVED5[644];
 225:./Core/core_cm3.h ****   __O  uint32_t STIR;                    /*!< Offset: 0xE00 ( /W)  Software Trigger Interrupt Regis
 226:./Core/core_cm3.h **** }  NVIC_Type;
 227:./Core/core_cm3.h **** 
 228:./Core/core_cm3.h **** /*@} end of group CMSIS_NVIC */
 229:./Core/core_cm3.h **** 
 230:./Core/core_cm3.h **** 
 231:./Core/core_cm3.h **** /** \ingroup  CMSIS_core_register
 232:./Core/core_cm3.h ****     \defgroup CMSIS_SCB CMSIS SCB
 233:./Core/core_cm3.h ****   Type definitions for the Cortex-M System Control Block Registers
 234:./Core/core_cm3.h ****   @{
 235:./Core/core_cm3.h ****  */
 236:./Core/core_cm3.h **** 
 237:./Core/core_cm3.h **** /** \brief  Structure type to access the System Control Block (SCB).
 238:./Core/core_cm3.h ****  */
 239:./Core/core_cm3.h **** typedef struct
 240:./Core/core_cm3.h **** {
 241:./Core/core_cm3.h ****   __I  uint32_t CPUID;                   /*!< Offset: 0x000 (R/ )  CPU ID Base Register            
 242:./Core/core_cm3.h ****   __IO uint32_t ICSR;                    /*!< Offset: 0x004 (R/W)  Interrupt Control State Register
 243:./Core/core_cm3.h ****   __IO uint32_t VTOR;                    /*!< Offset: 0x008 (R/W)  Vector Table Offset Register    
 244:./Core/core_cm3.h ****   __IO uint32_t AIRCR;                   /*!< Offset: 0x00C (R/W)  Application Interrupt / Reset Co
 245:./Core/core_cm3.h ****   __IO uint32_t SCR;                     /*!< Offset: 0x010 (R/W)  System Control Register         
 246:./Core/core_cm3.h ****   __IO uint32_t CCR;                     /*!< Offset: 0x014 (R/W)  Configuration Control Register  
 247:./Core/core_cm3.h ****   __IO uint8_t  SHP[12];                 /*!< Offset: 0x018 (R/W)  System Handlers Priority Registe
 248:./Core/core_cm3.h ****   __IO uint32_t SHCSR;                   /*!< Offset: 0x024 (R/W)  System Handler Control and State
 249:./Core/core_cm3.h ****   __IO uint32_t CFSR;                    /*!< Offset: 0x028 (R/W)  Configurable Fault Status Regist
 250:./Core/core_cm3.h ****   __IO uint32_t HFSR;                    /*!< Offset: 0x02C (R/W)  Hard Fault Status Register      
 251:./Core/core_cm3.h ****   __IO uint32_t DFSR;                    /*!< Offset: 0x030 (R/W)  Debug Fault Status Register     
 252:./Core/core_cm3.h ****   __IO uint32_t MMFAR;                   /*!< Offset: 0x034 (R/W)  Mem Manage Address Register     
 253:./Core/core_cm3.h ****   __IO uint32_t BFAR;                    /*!< Offset: 0x038 (R/W)  Bus Fault Address Register      
 254:./Core/core_cm3.h ****   __IO uint32_t AFSR;                    /*!< Offset: 0x03C (R/W)  Auxiliary Fault Status Register 
 255:./Core/core_cm3.h ****   __I  uint32_t PFR[2];                  /*!< Offset: 0x040 (R/ )  Processor Feature Register      
 256:./Core/core_cm3.h ****   __I  uint32_t DFR;                     /*!< Offset: 0x048 (R/ )  Debug Feature Register          
 257:./Core/core_cm3.h ****   __I  uint32_t ADR;                     /*!< Offset: 0x04C (R/ )  Auxiliary Feature Register      
 258:./Core/core_cm3.h ****   __I  uint32_t MMFR[4];                 /*!< Offset: 0x050 (R/ )  Memory Model Feature Register   
 259:./Core/core_cm3.h ****   __I  uint32_t ISAR[5];                 /*!< Offset: 0x060 (R/ )  ISA Feature Register            
 260:./Core/core_cm3.h **** } SCB_Type;
 261:./Core/core_cm3.h **** 
 262:./Core/core_cm3.h **** /* SCB CPUID Register Definitions */
 263:./Core/core_cm3.h **** #define SCB_CPUID_IMPLEMENTER_Pos          24                                             /*!< SCB 
 264:./Core/core_cm3.h **** #define SCB_CPUID_IMPLEMENTER_Msk          (0xFFUL << SCB_CPUID_IMPLEMENTER_Pos)          /*!< SCB 
 265:./Core/core_cm3.h **** 
 266:./Core/core_cm3.h **** #define SCB_CPUID_VARIANT_Pos              20                                             /*!< SCB 
 267:./Core/core_cm3.h **** #define SCB_CPUID_VARIANT_Msk              (0xFUL << SCB_CPUID_VARIANT_Pos)               /*!< SCB 
 268:./Core/core_cm3.h **** 
 269:./Core/core_cm3.h **** #define SCB_CPUID_PARTNO_Pos                4                                             /*!< SCB 
 270:./Core/core_cm3.h **** #define SCB_CPUID_PARTNO_Msk               (0xFFFUL << SCB_CPUID_PARTNO_Pos)              /*!< SCB 
 271:./Core/core_cm3.h **** 
 272:./Core/core_cm3.h **** #define SCB_CPUID_REVISION_Pos              0                                             /*!< SCB 
 273:./Core/core_cm3.h **** #define SCB_CPUID_REVISION_Msk             (0xFUL << SCB_CPUID_REVISION_Pos)              /*!< SCB 
 274:./Core/core_cm3.h **** 
 275:./Core/core_cm3.h **** /* SCB Interrupt Control State Register Definitions */
 276:./Core/core_cm3.h **** #define SCB_ICSR_NMIPENDSET_Pos            31                                             /*!< SCB 
 277:./Core/core_cm3.h **** #define SCB_ICSR_NMIPENDSET_Msk            (1UL << SCB_ICSR_NMIPENDSET_Pos)               /*!< SCB 
 278:./Core/core_cm3.h **** 
 279:./Core/core_cm3.h **** #define SCB_ICSR_PENDSVSET_Pos             28                                             /*!< SCB 
 280:./Core/core_cm3.h **** #define SCB_ICSR_PENDSVSET_Msk             (1UL << SCB_ICSR_PENDSVSET_Pos)                /*!< SCB 
 281:./Core/core_cm3.h **** 
 282:./Core/core_cm3.h **** #define SCB_ICSR_PENDSVCLR_Pos             27                                             /*!< SCB 
 283:./Core/core_cm3.h **** #define SCB_ICSR_PENDSVCLR_Msk             (1UL << SCB_ICSR_PENDSVCLR_Pos)                /*!< SCB 
 284:./Core/core_cm3.h **** 
 285:./Core/core_cm3.h **** #define SCB_ICSR_PENDSTSET_Pos             26                                             /*!< SCB 
 286:./Core/core_cm3.h **** #define SCB_ICSR_PENDSTSET_Msk             (1UL << SCB_ICSR_PENDSTSET_Pos)                /*!< SCB 
 287:./Core/core_cm3.h **** 
 288:./Core/core_cm3.h **** #define SCB_ICSR_PENDSTCLR_Pos             25                                             /*!< SCB 
 289:./Core/core_cm3.h **** #define SCB_ICSR_PENDSTCLR_Msk             (1UL << SCB_ICSR_PENDSTCLR_Pos)                /*!< SCB 
 290:./Core/core_cm3.h **** 
 291:./Core/core_cm3.h **** #define SCB_ICSR_ISRPREEMPT_Pos            23                                             /*!< SCB 
 292:./Core/core_cm3.h **** #define SCB_ICSR_ISRPREEMPT_Msk            (1UL << SCB_ICSR_ISRPREEMPT_Pos)               /*!< SCB 
 293:./Core/core_cm3.h **** 
 294:./Core/core_cm3.h **** #define SCB_ICSR_ISRPENDING_Pos            22                                             /*!< SCB 
 295:./Core/core_cm3.h **** #define SCB_ICSR_ISRPENDING_Msk            (1UL << SCB_ICSR_ISRPENDING_Pos)               /*!< SCB 
 296:./Core/core_cm3.h **** 
 297:./Core/core_cm3.h **** #define SCB_ICSR_VECTPENDING_Pos           12                                             /*!< SCB 
 298:./Core/core_cm3.h **** #define SCB_ICSR_VECTPENDING_Msk           (0x1FFUL << SCB_ICSR_VECTPENDING_Pos)          /*!< SCB 
 299:./Core/core_cm3.h **** 
 300:./Core/core_cm3.h **** #define SCB_ICSR_RETTOBASE_Pos             11                                             /*!< SCB 
 301:./Core/core_cm3.h **** #define SCB_ICSR_RETTOBASE_Msk             (1UL << SCB_ICSR_RETTOBASE_Pos)                /*!< SCB 
 302:./Core/core_cm3.h **** 
 303:./Core/core_cm3.h **** #define SCB_ICSR_VECTACTIVE_Pos             0                                             /*!< SCB 
 304:./Core/core_cm3.h **** #define SCB_ICSR_VECTACTIVE_Msk            (0x1FFUL << SCB_ICSR_VECTACTIVE_Pos)           /*!< SCB 
 305:./Core/core_cm3.h **** 
 306:./Core/core_cm3.h **** /* SCB Interrupt Control State Register Definitions */
 307:./Core/core_cm3.h **** #define SCB_VTOR_TBLBASE_Pos               29                                             /*!< SCB 
 308:./Core/core_cm3.h **** #define SCB_VTOR_TBLBASE_Msk               (1UL << SCB_VTOR_TBLBASE_Pos)                  /*!< SCB 
 309:./Core/core_cm3.h **** 
 310:./Core/core_cm3.h **** #define SCB_VTOR_TBLOFF_Pos                 7                                             /*!< SCB 
 311:./Core/core_cm3.h **** #define SCB_VTOR_TBLOFF_Msk                (0x3FFFFFUL << SCB_VTOR_TBLOFF_Pos)            /*!< SCB 
 312:./Core/core_cm3.h **** 
 313:./Core/core_cm3.h **** /* SCB Application Interrupt and Reset Control Register Definitions */
 314:./Core/core_cm3.h **** #define SCB_AIRCR_VECTKEY_Pos              16                                             /*!< SCB 
 315:./Core/core_cm3.h **** #define SCB_AIRCR_VECTKEY_Msk              (0xFFFFUL << SCB_AIRCR_VECTKEY_Pos)            /*!< SCB 
 316:./Core/core_cm3.h **** 
 317:./Core/core_cm3.h **** #define SCB_AIRCR_VECTKEYSTAT_Pos          16                                             /*!< SCB 
 318:./Core/core_cm3.h **** #define SCB_AIRCR_VECTKEYSTAT_Msk          (0xFFFFUL << SCB_AIRCR_VECTKEYSTAT_Pos)        /*!< SCB 
 319:./Core/core_cm3.h **** 
 320:./Core/core_cm3.h **** #define SCB_AIRCR_ENDIANESS_Pos            15                                             /*!< SCB 
 321:./Core/core_cm3.h **** #define SCB_AIRCR_ENDIANESS_Msk            (1UL << SCB_AIRCR_ENDIANESS_Pos)               /*!< SCB 
 322:./Core/core_cm3.h **** 
 323:./Core/core_cm3.h **** #define SCB_AIRCR_PRIGROUP_Pos              8                                             /*!< SCB 
 324:./Core/core_cm3.h **** #define SCB_AIRCR_PRIGROUP_Msk             (7UL << SCB_AIRCR_PRIGROUP_Pos)                /*!< SCB 
 325:./Core/core_cm3.h **** 
 326:./Core/core_cm3.h **** #define SCB_AIRCR_SYSRESETREQ_Pos           2                                             /*!< SCB 
 327:./Core/core_cm3.h **** #define SCB_AIRCR_SYSRESETREQ_Msk          (1UL << SCB_AIRCR_SYSRESETREQ_Pos)             /*!< SCB 
 328:./Core/core_cm3.h **** 
 329:./Core/core_cm3.h **** #define SCB_AIRCR_VECTCLRACTIVE_Pos         1                                             /*!< SCB 
 330:./Core/core_cm3.h **** #define SCB_AIRCR_VECTCLRACTIVE_Msk        (1UL << SCB_AIRCR_VECTCLRACTIVE_Pos)           /*!< SCB 
 331:./Core/core_cm3.h **** 
 332:./Core/core_cm3.h **** #define SCB_AIRCR_VECTRESET_Pos             0                                             /*!< SCB 
 333:./Core/core_cm3.h **** #define SCB_AIRCR_VECTRESET_Msk            (1UL << SCB_AIRCR_VECTRESET_Pos)               /*!< SCB 
 334:./Core/core_cm3.h **** 
 335:./Core/core_cm3.h **** /* SCB System Control Register Definitions */
 336:./Core/core_cm3.h **** #define SCB_SCR_SEVONPEND_Pos               4                                             /*!< SCB 
 337:./Core/core_cm3.h **** #define SCB_SCR_SEVONPEND_Msk              (1UL << SCB_SCR_SEVONPEND_Pos)                 /*!< SCB 
 338:./Core/core_cm3.h **** 
 339:./Core/core_cm3.h **** #define SCB_SCR_SLEEPDEEP_Pos               2                                             /*!< SCB 
 340:./Core/core_cm3.h **** #define SCB_SCR_SLEEPDEEP_Msk              (1UL << SCB_SCR_SLEEPDEEP_Pos)                 /*!< SCB 
 341:./Core/core_cm3.h **** 
 342:./Core/core_cm3.h **** #define SCB_SCR_SLEEPONEXIT_Pos             1                                             /*!< SCB 
 343:./Core/core_cm3.h **** #define SCB_SCR_SLEEPONEXIT_Msk            (1UL << SCB_SCR_SLEEPONEXIT_Pos)               /*!< SCB 
 344:./Core/core_cm3.h **** 
 345:./Core/core_cm3.h **** /* SCB Configuration Control Register Definitions */
 346:./Core/core_cm3.h **** #define SCB_CCR_STKALIGN_Pos                9                                             /*!< SCB 
 347:./Core/core_cm3.h **** #define SCB_CCR_STKALIGN_Msk               (1UL << SCB_CCR_STKALIGN_Pos)                  /*!< SCB 
 348:./Core/core_cm3.h **** 
 349:./Core/core_cm3.h **** #define SCB_CCR_BFHFNMIGN_Pos               8                                             /*!< SCB 
 350:./Core/core_cm3.h **** #define SCB_CCR_BFHFNMIGN_Msk              (1UL << SCB_CCR_BFHFNMIGN_Pos)                 /*!< SCB 
 351:./Core/core_cm3.h **** 
 352:./Core/core_cm3.h **** #define SCB_CCR_DIV_0_TRP_Pos               4                                             /*!< SCB 
 353:./Core/core_cm3.h **** #define SCB_CCR_DIV_0_TRP_Msk              (1UL << SCB_CCR_DIV_0_TRP_Pos)                 /*!< SCB 
 354:./Core/core_cm3.h **** 
 355:./Core/core_cm3.h **** #define SCB_CCR_UNALIGN_TRP_Pos             3                                             /*!< SCB 
 356:./Core/core_cm3.h **** #define SCB_CCR_UNALIGN_TRP_Msk            (1UL << SCB_CCR_UNALIGN_TRP_Pos)               /*!< SCB 
 357:./Core/core_cm3.h **** 
 358:./Core/core_cm3.h **** #define SCB_CCR_USERSETMPEND_Pos            1                                             /*!< SCB 
 359:./Core/core_cm3.h **** #define SCB_CCR_USERSETMPEND_Msk           (1UL << SCB_CCR_USERSETMPEND_Pos)              /*!< SCB 
 360:./Core/core_cm3.h **** 
 361:./Core/core_cm3.h **** #define SCB_CCR_NONBASETHRDENA_Pos          0                                             /*!< SCB 
 362:./Core/core_cm3.h **** #define SCB_CCR_NONBASETHRDENA_Msk         (1UL << SCB_CCR_NONBASETHRDENA_Pos)            /*!< SCB 
 363:./Core/core_cm3.h **** 
 364:./Core/core_cm3.h **** /* SCB System Handler Control and State Register Definitions */
 365:./Core/core_cm3.h **** #define SCB_SHCSR_USGFAULTENA_Pos          18                                             /*!< SCB 
 366:./Core/core_cm3.h **** #define SCB_SHCSR_USGFAULTENA_Msk          (1UL << SCB_SHCSR_USGFAULTENA_Pos)             /*!< SCB 
 367:./Core/core_cm3.h **** 
 368:./Core/core_cm3.h **** #define SCB_SHCSR_BUSFAULTENA_Pos          17                                             /*!< SCB 
 369:./Core/core_cm3.h **** #define SCB_SHCSR_BUSFAULTENA_Msk          (1UL << SCB_SHCSR_BUSFAULTENA_Pos)             /*!< SCB 
 370:./Core/core_cm3.h **** 
 371:./Core/core_cm3.h **** #define SCB_SHCSR_MEMFAULTENA_Pos          16                                             /*!< SCB 
 372:./Core/core_cm3.h **** #define SCB_SHCSR_MEMFAULTENA_Msk          (1UL << SCB_SHCSR_MEMFAULTENA_Pos)             /*!< SCB 
 373:./Core/core_cm3.h **** 
 374:./Core/core_cm3.h **** #define SCB_SHCSR_SVCALLPENDED_Pos         15                                             /*!< SCB 
 375:./Core/core_cm3.h **** #define SCB_SHCSR_SVCALLPENDED_Msk         (1UL << SCB_SHCSR_SVCALLPENDED_Pos)            /*!< SCB 
 376:./Core/core_cm3.h **** 
 377:./Core/core_cm3.h **** #define SCB_SHCSR_BUSFAULTPENDED_Pos       14                                             /*!< SCB 
 378:./Core/core_cm3.h **** #define SCB_SHCSR_BUSFAULTPENDED_Msk       (1UL << SCB_SHCSR_BUSFAULTPENDED_Pos)          /*!< SCB 
 379:./Core/core_cm3.h **** 
 380:./Core/core_cm3.h **** #define SCB_SHCSR_MEMFAULTPENDED_Pos       13                                             /*!< SCB 
 381:./Core/core_cm3.h **** #define SCB_SHCSR_MEMFAULTPENDED_Msk       (1UL << SCB_SHCSR_MEMFAULTPENDED_Pos)          /*!< SCB 
 382:./Core/core_cm3.h **** 
 383:./Core/core_cm3.h **** #define SCB_SHCSR_USGFAULTPENDED_Pos       12                                             /*!< SCB 
 384:./Core/core_cm3.h **** #define SCB_SHCSR_USGFAULTPENDED_Msk       (1UL << SCB_SHCSR_USGFAULTPENDED_Pos)          /*!< SCB 
 385:./Core/core_cm3.h **** 
 386:./Core/core_cm3.h **** #define SCB_SHCSR_SYSTICKACT_Pos           11                                             /*!< SCB 
 387:./Core/core_cm3.h **** #define SCB_SHCSR_SYSTICKACT_Msk           (1UL << SCB_SHCSR_SYSTICKACT_Pos)              /*!< SCB 
 388:./Core/core_cm3.h **** 
 389:./Core/core_cm3.h **** #define SCB_SHCSR_PENDSVACT_Pos            10                                             /*!< SCB 
 390:./Core/core_cm3.h **** #define SCB_SHCSR_PENDSVACT_Msk            (1UL << SCB_SHCSR_PENDSVACT_Pos)               /*!< SCB 
 391:./Core/core_cm3.h **** 
 392:./Core/core_cm3.h **** #define SCB_SHCSR_MONITORACT_Pos            8                                             /*!< SCB 
 393:./Core/core_cm3.h **** #define SCB_SHCSR_MONITORACT_Msk           (1UL << SCB_SHCSR_MONITORACT_Pos)              /*!< SCB 
 394:./Core/core_cm3.h **** 
 395:./Core/core_cm3.h **** #define SCB_SHCSR_SVCALLACT_Pos             7                                             /*!< SCB 
 396:./Core/core_cm3.h **** #define SCB_SHCSR_SVCALLACT_Msk            (1UL << SCB_SHCSR_SVCALLACT_Pos)               /*!< SCB 
 397:./Core/core_cm3.h **** 
 398:./Core/core_cm3.h **** #define SCB_SHCSR_USGFAULTACT_Pos           3                                             /*!< SCB 
 399:./Core/core_cm3.h **** #define SCB_SHCSR_USGFAULTACT_Msk          (1UL << SCB_SHCSR_USGFAULTACT_Pos)             /*!< SCB 
 400:./Core/core_cm3.h **** 
 401:./Core/core_cm3.h **** #define SCB_SHCSR_BUSFAULTACT_Pos           1                                             /*!< SCB 
 402:./Core/core_cm3.h **** #define SCB_SHCSR_BUSFAULTACT_Msk          (1UL << SCB_SHCSR_BUSFAULTACT_Pos)             /*!< SCB 
 403:./Core/core_cm3.h **** 
 404:./Core/core_cm3.h **** #define SCB_SHCSR_MEMFAULTACT_Pos           0                                             /*!< SCB 
 405:./Core/core_cm3.h **** #define SCB_SHCSR_MEMFAULTACT_Msk          (1UL << SCB_SHCSR_MEMFAULTACT_Pos)             /*!< SCB 
 406:./Core/core_cm3.h **** 
 407:./Core/core_cm3.h **** /* SCB Configurable Fault Status Registers Definitions */
 408:./Core/core_cm3.h **** #define SCB_CFSR_USGFAULTSR_Pos            16                                             /*!< SCB 
 409:./Core/core_cm3.h **** #define SCB_CFSR_USGFAULTSR_Msk            (0xFFFFUL << SCB_CFSR_USGFAULTSR_Pos)          /*!< SCB 
 410:./Core/core_cm3.h **** 
 411:./Core/core_cm3.h **** #define SCB_CFSR_BUSFAULTSR_Pos             8                                             /*!< SCB 
 412:./Core/core_cm3.h **** #define SCB_CFSR_BUSFAULTSR_Msk            (0xFFUL << SCB_CFSR_BUSFAULTSR_Pos)            /*!< SCB 
 413:./Core/core_cm3.h **** 
 414:./Core/core_cm3.h **** #define SCB_CFSR_MEMFAULTSR_Pos             0                                             /*!< SCB 
 415:./Core/core_cm3.h **** #define SCB_CFSR_MEMFAULTSR_Msk            (0xFFUL << SCB_CFSR_MEMFAULTSR_Pos)            /*!< SCB 
 416:./Core/core_cm3.h **** 
 417:./Core/core_cm3.h **** /* SCB Hard Fault Status Registers Definitions */
 418:./Core/core_cm3.h **** #define SCB_HFSR_DEBUGEVT_Pos              31                                             /*!< SCB 
 419:./Core/core_cm3.h **** #define SCB_HFSR_DEBUGEVT_Msk              (1UL << SCB_HFSR_DEBUGEVT_Pos)                 /*!< SCB 
 420:./Core/core_cm3.h **** 
 421:./Core/core_cm3.h **** #define SCB_HFSR_FORCED_Pos                30                                             /*!< SCB 
 422:./Core/core_cm3.h **** #define SCB_HFSR_FORCED_Msk                (1UL << SCB_HFSR_FORCED_Pos)                   /*!< SCB 
 423:./Core/core_cm3.h **** 
 424:./Core/core_cm3.h **** #define SCB_HFSR_VECTTBL_Pos                1                                             /*!< SCB 
 425:./Core/core_cm3.h **** #define SCB_HFSR_VECTTBL_Msk               (1UL << SCB_HFSR_VECTTBL_Pos)                  /*!< SCB 
 426:./Core/core_cm3.h **** 
 427:./Core/core_cm3.h **** /* SCB Debug Fault Status Register Definitions */
 428:./Core/core_cm3.h **** #define SCB_DFSR_EXTERNAL_Pos               4                                             /*!< SCB 
 429:./Core/core_cm3.h **** #define SCB_DFSR_EXTERNAL_Msk              (1UL << SCB_DFSR_EXTERNAL_Pos)                 /*!< SCB 
 430:./Core/core_cm3.h **** 
 431:./Core/core_cm3.h **** #define SCB_DFSR_VCATCH_Pos                 3                                             /*!< SCB 
 432:./Core/core_cm3.h **** #define SCB_DFSR_VCATCH_Msk                (1UL << SCB_DFSR_VCATCH_Pos)                   /*!< SCB 
 433:./Core/core_cm3.h **** 
 434:./Core/core_cm3.h **** #define SCB_DFSR_DWTTRAP_Pos                2                                             /*!< SCB 
 435:./Core/core_cm3.h **** #define SCB_DFSR_DWTTRAP_Msk               (1UL << SCB_DFSR_DWTTRAP_Pos)                  /*!< SCB 
 436:./Core/core_cm3.h **** 
 437:./Core/core_cm3.h **** #define SCB_DFSR_BKPT_Pos                   1                                             /*!< SCB 
 438:./Core/core_cm3.h **** #define SCB_DFSR_BKPT_Msk                  (1UL << SCB_DFSR_BKPT_Pos)                     /*!< SCB 
 439:./Core/core_cm3.h **** 
 440:./Core/core_cm3.h **** #define SCB_DFSR_HALTED_Pos                 0                                             /*!< SCB 
 441:./Core/core_cm3.h **** #define SCB_DFSR_HALTED_Msk                (1UL << SCB_DFSR_HALTED_Pos)                   /*!< SCB 
 442:./Core/core_cm3.h **** 
 443:./Core/core_cm3.h **** /*@} end of group CMSIS_SCB */
 444:./Core/core_cm3.h **** 
 445:./Core/core_cm3.h **** 
 446:./Core/core_cm3.h **** /** \ingroup  CMSIS_core_register
 447:./Core/core_cm3.h ****     \defgroup CMSIS_SysTick CMSIS SysTick
 448:./Core/core_cm3.h ****   Type definitions for the Cortex-M System Timer Registers
 449:./Core/core_cm3.h ****   @{
 450:./Core/core_cm3.h ****  */
 451:./Core/core_cm3.h **** 
 452:./Core/core_cm3.h **** /** \brief  Structure type to access the System Timer (SysTick).
 453:./Core/core_cm3.h ****  */
 454:./Core/core_cm3.h **** typedef struct
 455:./Core/core_cm3.h **** {
 456:./Core/core_cm3.h ****   __IO uint32_t CTRL;                    /*!< Offset: 0x000 (R/W)  SysTick Control and Status Regis
 457:./Core/core_cm3.h ****   __IO uint32_t LOAD;                    /*!< Offset: 0x004 (R/W)  SysTick Reload Value Register   
 458:./Core/core_cm3.h ****   __IO uint32_t VAL;                     /*!< Offset: 0x008 (R/W)  SysTick Current Value Register  
 459:./Core/core_cm3.h ****   __I  uint32_t CALIB;                   /*!< Offset: 0x00C (R/ )  SysTick Calibration Register    
 460:./Core/core_cm3.h **** } SysTick_Type;
 461:./Core/core_cm3.h **** 
 462:./Core/core_cm3.h **** /* SysTick Control / Status Register Definitions */
 463:./Core/core_cm3.h **** #define SysTick_CTRL_COUNTFLAG_Pos         16                                             /*!< SysT
 464:./Core/core_cm3.h **** #define SysTick_CTRL_COUNTFLAG_Msk         (1UL << SysTick_CTRL_COUNTFLAG_Pos)            /*!< SysT
 465:./Core/core_cm3.h **** 
 466:./Core/core_cm3.h **** #define SysTick_CTRL_CLKSOURCE_Pos          2                                             /*!< SysT
 467:./Core/core_cm3.h **** #define SysTick_CTRL_CLKSOURCE_Msk         (1UL << SysTick_CTRL_CLKSOURCE_Pos)            /*!< SysT
 468:./Core/core_cm3.h **** 
 469:./Core/core_cm3.h **** #define SysTick_CTRL_TICKINT_Pos            1                                             /*!< SysT
 470:./Core/core_cm3.h **** #define SysTick_CTRL_TICKINT_Msk           (1UL << SysTick_CTRL_TICKINT_Pos)              /*!< SysT
 471:./Core/core_cm3.h **** 
 472:./Core/core_cm3.h **** #define SysTick_CTRL_ENABLE_Pos             0                                             /*!< SysT
 473:./Core/core_cm3.h **** #define SysTick_CTRL_ENABLE_Msk            (1UL << SysTick_CTRL_ENABLE_Pos)               /*!< SysT
 474:./Core/core_cm3.h **** 
 475:./Core/core_cm3.h **** /* SysTick Reload Register Definitions */
 476:./Core/core_cm3.h **** #define SysTick_LOAD_RELOAD_Pos             0                                             /*!< SysT
 477:./Core/core_cm3.h **** #define SysTick_LOAD_RELOAD_Msk            (0xFFFFFFUL << SysTick_LOAD_RELOAD_Pos)        /*!< SysT
 478:./Core/core_cm3.h **** 
 479:./Core/core_cm3.h **** /* SysTick Current Register Definitions */
 480:./Core/core_cm3.h **** #define SysTick_VAL_CURRENT_Pos             0                                             /*!< SysT
 481:./Core/core_cm3.h **** #define SysTick_VAL_CURRENT_Msk            (0xFFFFFFUL << SysTick_VAL_CURRENT_Pos)        /*!< SysT
 482:./Core/core_cm3.h **** 
 483:./Core/core_cm3.h **** /* SysTick Calibration Register Definitions */
 484:./Core/core_cm3.h **** #define SysTick_CALIB_NOREF_Pos            31                                             /*!< SysT
 485:./Core/core_cm3.h **** #define SysTick_CALIB_NOREF_Msk            (1UL << SysTick_CALIB_NOREF_Pos)               /*!< SysT
 486:./Core/core_cm3.h **** 
 487:./Core/core_cm3.h **** #define SysTick_CALIB_SKEW_Pos             30                                             /*!< SysT
 488:./Core/core_cm3.h **** #define SysTick_CALIB_SKEW_Msk             (1UL << SysTick_CALIB_SKEW_Pos)                /*!< SysT
 489:./Core/core_cm3.h **** 
 490:./Core/core_cm3.h **** #define SysTick_CALIB_TENMS_Pos             0                                             /*!< SysT
 491:./Core/core_cm3.h **** #define SysTick_CALIB_TENMS_Msk            (0xFFFFFFUL << SysTick_VAL_CURRENT_Pos)        /*!< SysT
 492:./Core/core_cm3.h **** 
 493:./Core/core_cm3.h **** /*@} end of group CMSIS_SysTick */
 494:./Core/core_cm3.h **** 
 495:./Core/core_cm3.h **** 
 496:./Core/core_cm3.h **** /** \ingroup  CMSIS_core_register
 497:./Core/core_cm3.h ****     \defgroup CMSIS_ITM CMSIS ITM
 498:./Core/core_cm3.h ****   Type definitions for the Cortex-M Instrumentation Trace Macrocell (ITM)
 499:./Core/core_cm3.h ****   @{
 500:./Core/core_cm3.h ****  */
 501:./Core/core_cm3.h **** 
 502:./Core/core_cm3.h **** /** \brief  Structure type to access the Instrumentation Trace Macrocell Register (ITM).
 503:./Core/core_cm3.h ****  */
 504:./Core/core_cm3.h **** typedef struct
 505:./Core/core_cm3.h **** {
 506:./Core/core_cm3.h ****   __O  union
 507:./Core/core_cm3.h ****   {
 508:./Core/core_cm3.h ****     __O  uint8_t    u8;                  /*!< Offset: 0x000 ( /W)  ITM Stimulus Port 8-bit         
 509:./Core/core_cm3.h ****     __O  uint16_t   u16;                 /*!< Offset: 0x000 ( /W)  ITM Stimulus Port 16-bit        
 510:./Core/core_cm3.h ****     __O  uint32_t   u32;                 /*!< Offset: 0x000 ( /W)  ITM Stimulus Port 32-bit        
 511:./Core/core_cm3.h ****   }  PORT [32];                          /*!< Offset: 0x000 ( /W)  ITM Stimulus Port Registers     
 512:./Core/core_cm3.h ****        uint32_t RESERVED0[864];
 513:./Core/core_cm3.h ****   __IO uint32_t TER;                     /*!< Offset:       (R/W)  ITM Trace Enable Register       
 514:./Core/core_cm3.h ****        uint32_t RESERVED1[15];
 515:./Core/core_cm3.h ****   __IO uint32_t TPR;                     /*!< Offset:       (R/W)  ITM Trace Privilege Register    
 516:./Core/core_cm3.h ****        uint32_t RESERVED2[15];
 517:./Core/core_cm3.h ****   __IO uint32_t TCR;                     /*!< Offset:       (R/W)  ITM Trace Control Register      
 518:./Core/core_cm3.h ****        uint32_t RESERVED3[29];
 519:./Core/core_cm3.h ****   __IO uint32_t IWR;                     /*!< Offset:       (R/W)  ITM Integration Write Register  
 520:./Core/core_cm3.h ****   __IO uint32_t IRR;                     /*!< Offset:       (R/W)  ITM Integration Read Register   
 521:./Core/core_cm3.h ****   __IO uint32_t IMCR;                    /*!< Offset:       (R/W)  ITM Integration Mode Control Reg
 522:./Core/core_cm3.h ****        uint32_t RESERVED4[43];
 523:./Core/core_cm3.h ****   __IO uint32_t LAR;                     /*!< Offset:       (R/W)  ITM Lock Access Register        
 524:./Core/core_cm3.h ****   __IO uint32_t LSR;                     /*!< Offset:       (R/W)  ITM Lock Status Register        
 525:./Core/core_cm3.h ****        uint32_t RESERVED5[6];
 526:./Core/core_cm3.h ****   __I  uint32_t PID4;                    /*!< Offset:       (R/ )  ITM Peripheral Identification Re
 527:./Core/core_cm3.h ****   __I  uint32_t PID5;                    /*!< Offset:       (R/ )  ITM Peripheral Identification Re
 528:./Core/core_cm3.h ****   __I  uint32_t PID6;                    /*!< Offset:       (R/ )  ITM Peripheral Identification Re
 529:./Core/core_cm3.h ****   __I  uint32_t PID7;                    /*!< Offset:       (R/ )  ITM Peripheral Identification Re
 530:./Core/core_cm3.h ****   __I  uint32_t PID0;                    /*!< Offset:       (R/ )  ITM Peripheral Identification Re
 531:./Core/core_cm3.h ****   __I  uint32_t PID1;                    /*!< Offset:       (R/ )  ITM Peripheral Identification Re
 532:./Core/core_cm3.h ****   __I  uint32_t PID2;                    /*!< Offset:       (R/ )  ITM Peripheral Identification Re
 533:./Core/core_cm3.h ****   __I  uint32_t PID3;                    /*!< Offset:       (R/ )  ITM Peripheral Identification Re
 534:./Core/core_cm3.h ****   __I  uint32_t CID0;                    /*!< Offset:       (R/ )  ITM Component  Identification Re
 535:./Core/core_cm3.h ****   __I  uint32_t CID1;                    /*!< Offset:       (R/ )  ITM Component  Identification Re
 536:./Core/core_cm3.h ****   __I  uint32_t CID2;                    /*!< Offset:       (R/ )  ITM Component  Identification Re
 537:./Core/core_cm3.h ****   __I  uint32_t CID3;                    /*!< Offset:       (R/ )  ITM Component  Identification Re
 538:./Core/core_cm3.h **** } ITM_Type;
 539:./Core/core_cm3.h **** 
 540:./Core/core_cm3.h **** /* ITM Trace Privilege Register Definitions */
 541:./Core/core_cm3.h **** #define ITM_TPR_PRIVMASK_Pos                0                                             /*!< ITM 
 542:./Core/core_cm3.h **** #define ITM_TPR_PRIVMASK_Msk               (0xFUL << ITM_TPR_PRIVMASK_Pos)                /*!< ITM 
 543:./Core/core_cm3.h **** 
 544:./Core/core_cm3.h **** /* ITM Trace Control Register Definitions */
 545:./Core/core_cm3.h **** #define ITM_TCR_BUSY_Pos                   23                                             /*!< ITM 
 546:./Core/core_cm3.h **** #define ITM_TCR_BUSY_Msk                   (1UL << ITM_TCR_BUSY_Pos)                      /*!< ITM 
 547:./Core/core_cm3.h **** 
 548:./Core/core_cm3.h **** #define ITM_TCR_ATBID_Pos                  16                                             /*!< ITM 
 549:./Core/core_cm3.h **** #define ITM_TCR_ATBID_Msk                  (0x7FUL << ITM_TCR_ATBID_Pos)                  /*!< ITM 
 550:./Core/core_cm3.h **** 
 551:./Core/core_cm3.h **** #define ITM_TCR_TSPrescale_Pos              8                                             /*!< ITM 
 552:./Core/core_cm3.h **** #define ITM_TCR_TSPrescale_Msk             (3UL << ITM_TCR_TSPrescale_Pos)                /*!< ITM 
 553:./Core/core_cm3.h **** 
 554:./Core/core_cm3.h **** #define ITM_TCR_SWOENA_Pos                  4                                             /*!< ITM 
 555:./Core/core_cm3.h **** #define ITM_TCR_SWOENA_Msk                 (1UL << ITM_TCR_SWOENA_Pos)                    /*!< ITM 
 556:./Core/core_cm3.h **** 
 557:./Core/core_cm3.h **** #define ITM_TCR_DWTENA_Pos                  3                                             /*!< ITM 
 558:./Core/core_cm3.h **** #define ITM_TCR_DWTENA_Msk                 (1UL << ITM_TCR_DWTENA_Pos)                    /*!< ITM 
 559:./Core/core_cm3.h **** 
 560:./Core/core_cm3.h **** #define ITM_TCR_SYNCENA_Pos                 2                                             /*!< ITM 
 561:./Core/core_cm3.h **** #define ITM_TCR_SYNCENA_Msk                (1UL << ITM_TCR_SYNCENA_Pos)                   /*!< ITM 
 562:./Core/core_cm3.h **** 
 563:./Core/core_cm3.h **** #define ITM_TCR_TSENA_Pos                   1                                             /*!< ITM 
 564:./Core/core_cm3.h **** #define ITM_TCR_TSENA_Msk                  (1UL << ITM_TCR_TSENA_Pos)                     /*!< ITM 
 565:./Core/core_cm3.h **** 
 566:./Core/core_cm3.h **** #define ITM_TCR_ITMENA_Pos                  0                                             /*!< ITM 
 567:./Core/core_cm3.h **** #define ITM_TCR_ITMENA_Msk                 (1UL << ITM_TCR_ITMENA_Pos)                    /*!< ITM 
 568:./Core/core_cm3.h **** 
 569:./Core/core_cm3.h **** /* ITM Integration Write Register Definitions */
 570:./Core/core_cm3.h **** #define ITM_IWR_ATVALIDM_Pos                0                                             /*!< ITM 
 571:./Core/core_cm3.h **** #define ITM_IWR_ATVALIDM_Msk               (1UL << ITM_IWR_ATVALIDM_Pos)                  /*!< ITM 
 572:./Core/core_cm3.h **** 
 573:./Core/core_cm3.h **** /* ITM Integration Read Register Definitions */
 574:./Core/core_cm3.h **** #define ITM_IRR_ATREADYM_Pos                0                                             /*!< ITM 
 575:./Core/core_cm3.h **** #define ITM_IRR_ATREADYM_Msk               (1UL << ITM_IRR_ATREADYM_Pos)                  /*!< ITM 
 576:./Core/core_cm3.h **** 
 577:./Core/core_cm3.h **** /* ITM Integration Mode Control Register Definitions */
 578:./Core/core_cm3.h **** #define ITM_IMCR_INTEGRATION_Pos            0                                             /*!< ITM 
 579:./Core/core_cm3.h **** #define ITM_IMCR_INTEGRATION_Msk           (1UL << ITM_IMCR_INTEGRATION_Pos)              /*!< ITM 
 580:./Core/core_cm3.h **** 
 581:./Core/core_cm3.h **** /* ITM Lock Status Register Definitions */
 582:./Core/core_cm3.h **** #define ITM_LSR_ByteAcc_Pos                 2                                             /*!< ITM 
 583:./Core/core_cm3.h **** #define ITM_LSR_ByteAcc_Msk                (1UL << ITM_LSR_ByteAcc_Pos)                   /*!< ITM 
 584:./Core/core_cm3.h **** 
 585:./Core/core_cm3.h **** #define ITM_LSR_Access_Pos                  1                                             /*!< ITM 
 586:./Core/core_cm3.h **** #define ITM_LSR_Access_Msk                 (1UL << ITM_LSR_Access_Pos)                    /*!< ITM 
 587:./Core/core_cm3.h **** 
 588:./Core/core_cm3.h **** #define ITM_LSR_Present_Pos                 0                                             /*!< ITM 
 589:./Core/core_cm3.h **** #define ITM_LSR_Present_Msk                (1UL << ITM_LSR_Present_Pos)                   /*!< ITM 
 590:./Core/core_cm3.h **** 
 591:./Core/core_cm3.h **** /*@}*/ /* end of group CMSIS_ITM */
 592:./Core/core_cm3.h **** 
 593:./Core/core_cm3.h **** 
 594:./Core/core_cm3.h **** /** \ingroup  CMSIS_core_register
 595:./Core/core_cm3.h ****     \defgroup CMSIS_InterruptType CMSIS Interrupt Type
 596:./Core/core_cm3.h ****   Type definitions for the Cortex-M Interrupt Type Register
 597:./Core/core_cm3.h ****   @{
 598:./Core/core_cm3.h ****  */
 599:./Core/core_cm3.h **** 
 600:./Core/core_cm3.h **** /** \brief  Structure type to access the Interrupt Type Register.
 601:./Core/core_cm3.h ****  */
 602:./Core/core_cm3.h **** typedef struct
 603:./Core/core_cm3.h **** {
 604:./Core/core_cm3.h ****        uint32_t RESERVED0;
 605:./Core/core_cm3.h ****   __I  uint32_t ICTR;                    /*!< Offset: 0x004 (R/ )  Interrupt Control Type Register 
 606:./Core/core_cm3.h **** #if ((defined __CM3_REV) && (__CM3_REV >= 0x200))
 607:./Core/core_cm3.h ****   __IO uint32_t ACTLR;                   /*!< Offset: 0x008 (R/W)  Auxiliary Control Register      
 608:./Core/core_cm3.h **** #else
 609:./Core/core_cm3.h ****        uint32_t RESERVED1;
 610:./Core/core_cm3.h **** #endif
 611:./Core/core_cm3.h **** } InterruptType_Type;
 612:./Core/core_cm3.h **** 
 613:./Core/core_cm3.h **** /* Interrupt Controller Type Register Definitions */
 614:./Core/core_cm3.h **** #define IntType_ICTR_INTLINESNUM_Pos  0                                                   /*!< Inte
 615:./Core/core_cm3.h **** #define IntType_ICTR_INTLINESNUM_Msk (0x1FUL << IntType_ICTR_INTLINESNUM_Pos)             /*!< Inte
 616:./Core/core_cm3.h **** 
 617:./Core/core_cm3.h **** /* Auxiliary Control Register Definitions */
 618:./Core/core_cm3.h **** #define IntType_ACTLR_DISFOLD_Pos     2                                                   /*!< Inte
 619:./Core/core_cm3.h **** #define IntType_ACTLR_DISFOLD_Msk    (1UL << IntType_ACTLR_DISFOLD_Pos)                   /*!< Inte
 620:./Core/core_cm3.h **** 
 621:./Core/core_cm3.h **** #define IntType_ACTLR_DISDEFWBUF_Pos  1                                                   /*!< Inte
 622:./Core/core_cm3.h **** #define IntType_ACTLR_DISDEFWBUF_Msk (1UL << IntType_ACTLR_DISDEFWBUF_Pos)                /*!< Inte
 623:./Core/core_cm3.h **** 
 624:./Core/core_cm3.h **** #define IntType_ACTLR_DISMCYCINT_Pos  0                                                   /*!< Inte
 625:./Core/core_cm3.h **** #define IntType_ACTLR_DISMCYCINT_Msk (1UL << IntType_ACTLR_DISMCYCINT_Pos)                /*!< Inte
 626:./Core/core_cm3.h **** 
 627:./Core/core_cm3.h **** /*@}*/ /* end of group CMSIS_InterruptType */
 628:./Core/core_cm3.h **** 
 629:./Core/core_cm3.h **** 
 630:./Core/core_cm3.h **** #if (__MPU_PRESENT == 1)
 631:./Core/core_cm3.h **** /** \ingroup  CMSIS_core_register
 632:./Core/core_cm3.h ****     \defgroup CMSIS_MPU CMSIS MPU
 633:./Core/core_cm3.h ****   Type definitions for the Cortex-M Memory Protection Unit (MPU)
 634:./Core/core_cm3.h ****   @{
 635:./Core/core_cm3.h ****  */
 636:./Core/core_cm3.h **** 
 637:./Core/core_cm3.h **** /** \brief  Structure type to access the Memory Protection Unit (MPU).
 638:./Core/core_cm3.h ****  */
 639:./Core/core_cm3.h **** typedef struct
 640:./Core/core_cm3.h **** {
 641:./Core/core_cm3.h ****   __I  uint32_t TYPE;                    /*!< Offset: 0x000 (R/ )  MPU Type Register               
 642:./Core/core_cm3.h ****   __IO uint32_t CTRL;                    /*!< Offset: 0x004 (R/W)  MPU Control Register            
 643:./Core/core_cm3.h ****   __IO uint32_t RNR;                     /*!< Offset: 0x008 (R/W)  MPU Region RNRber Register      
 644:./Core/core_cm3.h ****   __IO uint32_t RBAR;                    /*!< Offset: 0x00C (R/W)  MPU Region Base Address Register
 645:./Core/core_cm3.h ****   __IO uint32_t RASR;                    /*!< Offset: 0x010 (R/W)  MPU Region Attribute and Size Re
 646:./Core/core_cm3.h ****   __IO uint32_t RBAR_A1;                 /*!< Offset: 0x014 (R/W)  MPU Alias 1 Region Base Address 
 647:./Core/core_cm3.h ****   __IO uint32_t RASR_A1;                 /*!< Offset: 0x018 (R/W)  MPU Alias 1 Region Attribute and
 648:./Core/core_cm3.h ****   __IO uint32_t RBAR_A2;                 /*!< Offset: 0x01C (R/W)  MPU Alias 2 Region Base Address 
 649:./Core/core_cm3.h ****   __IO uint32_t RASR_A2;                 /*!< Offset: 0x020 (R/W)  MPU Alias 2 Region Attribute and
 650:./Core/core_cm3.h ****   __IO uint32_t RBAR_A3;                 /*!< Offset: 0x024 (R/W)  MPU Alias 3 Region Base Address 
 651:./Core/core_cm3.h ****   __IO uint32_t RASR_A3;                 /*!< Offset: 0x028 (R/W)  MPU Alias 3 Region Attribute and
 652:./Core/core_cm3.h **** } MPU_Type;
 653:./Core/core_cm3.h **** 
 654:./Core/core_cm3.h **** /* MPU Type Register */
 655:./Core/core_cm3.h **** #define MPU_TYPE_IREGION_Pos               16                                             /*!< MPU 
 656:./Core/core_cm3.h **** #define MPU_TYPE_IREGION_Msk               (0xFFUL << MPU_TYPE_IREGION_Pos)               /*!< MPU 
 657:./Core/core_cm3.h **** 
 658:./Core/core_cm3.h **** #define MPU_TYPE_DREGION_Pos                8                                             /*!< MPU 
 659:./Core/core_cm3.h **** #define MPU_TYPE_DREGION_Msk               (0xFFUL << MPU_TYPE_DREGION_Pos)               /*!< MPU 
 660:./Core/core_cm3.h **** 
 661:./Core/core_cm3.h **** #define MPU_TYPE_SEPARATE_Pos               0                                             /*!< MPU 
 662:./Core/core_cm3.h **** #define MPU_TYPE_SEPARATE_Msk              (1UL << MPU_TYPE_SEPARATE_Pos)                 /*!< MPU 
 663:./Core/core_cm3.h **** 
 664:./Core/core_cm3.h **** /* MPU Control Register */
 665:./Core/core_cm3.h **** #define MPU_CTRL_PRIVDEFENA_Pos             2                                             /*!< MPU 
 666:./Core/core_cm3.h **** #define MPU_CTRL_PRIVDEFENA_Msk            (1UL << MPU_CTRL_PRIVDEFENA_Pos)               /*!< MPU 
 667:./Core/core_cm3.h **** 
 668:./Core/core_cm3.h **** #define MPU_CTRL_HFNMIENA_Pos               1                                             /*!< MPU 
 669:./Core/core_cm3.h **** #define MPU_CTRL_HFNMIENA_Msk              (1UL << MPU_CTRL_HFNMIENA_Pos)                 /*!< MPU 
 670:./Core/core_cm3.h **** 
 671:./Core/core_cm3.h **** #define MPU_CTRL_ENABLE_Pos                 0                                             /*!< MPU 
 672:./Core/core_cm3.h **** #define MPU_CTRL_ENABLE_Msk                (1UL << MPU_CTRL_ENABLE_Pos)                   /*!< MPU 
 673:./Core/core_cm3.h **** 
 674:./Core/core_cm3.h **** /* MPU Region Number Register */
 675:./Core/core_cm3.h **** #define MPU_RNR_REGION_Pos                  0                                             /*!< MPU 
 676:./Core/core_cm3.h **** #define MPU_RNR_REGION_Msk                 (0xFFUL << MPU_RNR_REGION_Pos)                 /*!< MPU 
 677:./Core/core_cm3.h **** 
 678:./Core/core_cm3.h **** /* MPU Region Base Address Register */
 679:./Core/core_cm3.h **** #define MPU_RBAR_ADDR_Pos                   5                                             /*!< MPU 
 680:./Core/core_cm3.h **** #define MPU_RBAR_ADDR_Msk                  (0x7FFFFFFUL << MPU_RBAR_ADDR_Pos)             /*!< MPU 
 681:./Core/core_cm3.h **** 
 682:./Core/core_cm3.h **** #define MPU_RBAR_VALID_Pos                  4                                             /*!< MPU 
 683:./Core/core_cm3.h **** #define MPU_RBAR_VALID_Msk                 (1UL << MPU_RBAR_VALID_Pos)                    /*!< MPU 
 684:./Core/core_cm3.h **** 
 685:./Core/core_cm3.h **** #define MPU_RBAR_REGION_Pos                 0                                             /*!< MPU 
 686:./Core/core_cm3.h **** #define MPU_RBAR_REGION_Msk                (0xFUL << MPU_RBAR_REGION_Pos)                 /*!< MPU 
 687:./Core/core_cm3.h **** 
 688:./Core/core_cm3.h **** /* MPU Region Attribute and Size Register */
 689:./Core/core_cm3.h **** #define MPU_RASR_XN_Pos                    28                                             /*!< MPU 
 690:./Core/core_cm3.h **** #define MPU_RASR_XN_Msk                    (1UL << MPU_RASR_XN_Pos)                       /*!< MPU 
 691:./Core/core_cm3.h **** 
 692:./Core/core_cm3.h **** #define MPU_RASR_AP_Pos                    24                                             /*!< MPU 
 693:./Core/core_cm3.h **** #define MPU_RASR_AP_Msk                    (7UL << MPU_RASR_AP_Pos)                       /*!< MPU 
 694:./Core/core_cm3.h **** 
 695:./Core/core_cm3.h **** #define MPU_RASR_TEX_Pos                   19                                             /*!< MPU 
 696:./Core/core_cm3.h **** #define MPU_RASR_TEX_Msk                   (7UL << MPU_RASR_TEX_Pos)                      /*!< MPU 
 697:./Core/core_cm3.h **** 
 698:./Core/core_cm3.h **** #define MPU_RASR_S_Pos                     18                                             /*!< MPU 
 699:./Core/core_cm3.h **** #define MPU_RASR_S_Msk                     (1UL << MPU_RASR_S_Pos)                        /*!< MPU 
 700:./Core/core_cm3.h **** 
 701:./Core/core_cm3.h **** #define MPU_RASR_C_Pos                     17                                             /*!< MPU 
 702:./Core/core_cm3.h **** #define MPU_RASR_C_Msk                     (1UL << MPU_RASR_C_Pos)                        /*!< MPU 
 703:./Core/core_cm3.h **** 
 704:./Core/core_cm3.h **** #define MPU_RASR_B_Pos                     16                                             /*!< MPU 
 705:./Core/core_cm3.h **** #define MPU_RASR_B_Msk                     (1UL << MPU_RASR_B_Pos)                        /*!< MPU 
 706:./Core/core_cm3.h **** 
 707:./Core/core_cm3.h **** #define MPU_RASR_SRD_Pos                    8                                             /*!< MPU 
 708:./Core/core_cm3.h **** #define MPU_RASR_SRD_Msk                   (0xFFUL << MPU_RASR_SRD_Pos)                   /*!< MPU 
 709:./Core/core_cm3.h **** 
 710:./Core/core_cm3.h **** #define MPU_RASR_SIZE_Pos                   1                                             /*!< MPU 
 711:./Core/core_cm3.h **** #define MPU_RASR_SIZE_Msk                  (0x1FUL << MPU_RASR_SIZE_Pos)                  /*!< MPU 
 712:./Core/core_cm3.h **** 
 713:./Core/core_cm3.h **** #define MPU_RASR_ENA_Pos                     0                                            /*!< MPU 
 714:./Core/core_cm3.h **** #define MPU_RASR_ENA_Msk                    (0x1UL << MPU_RASR_ENA_Pos)                   /*!< MPU 
 715:./Core/core_cm3.h **** 
 716:./Core/core_cm3.h **** /*@} end of group CMSIS_MPU */
 717:./Core/core_cm3.h **** #endif
 718:./Core/core_cm3.h **** 
 719:./Core/core_cm3.h **** 
 720:./Core/core_cm3.h **** /** \ingroup  CMSIS_core_register
 721:./Core/core_cm3.h ****     \defgroup CMSIS_CoreDebug CMSIS Core Debug
 722:./Core/core_cm3.h ****   Type definitions for the Cortex-M Core Debug Registers
 723:./Core/core_cm3.h ****   @{
 724:./Core/core_cm3.h ****  */
 725:./Core/core_cm3.h **** 
 726:./Core/core_cm3.h **** /** \brief  Structure type to access the Core Debug Register (CoreDebug).
 727:./Core/core_cm3.h ****  */
 728:./Core/core_cm3.h **** typedef struct
 729:./Core/core_cm3.h **** {
 730:./Core/core_cm3.h ****   __IO uint32_t DHCSR;                   /*!< Offset: 0x000 (R/W)  Debug Halting Control and Status
 731:./Core/core_cm3.h ****   __O  uint32_t DCRSR;                   /*!< Offset: 0x004 ( /W)  Debug Core Register Selector Reg
 732:./Core/core_cm3.h ****   __IO uint32_t DCRDR;                   /*!< Offset: 0x008 (R/W)  Debug Core Register Data Registe
 733:./Core/core_cm3.h ****   __IO uint32_t DEMCR;                   /*!< Offset: 0x00C (R/W)  Debug Exception and Monitor Cont
 734:./Core/core_cm3.h **** } CoreDebug_Type;
 735:./Core/core_cm3.h **** 
 736:./Core/core_cm3.h **** /* Debug Halting Control and Status Register */
 737:./Core/core_cm3.h **** #define CoreDebug_DHCSR_DBGKEY_Pos         16                                             /*!< Core
 738:./Core/core_cm3.h **** #define CoreDebug_DHCSR_DBGKEY_Msk         (0xFFFFUL << CoreDebug_DHCSR_DBGKEY_Pos)       /*!< Core
 739:./Core/core_cm3.h **** 
 740:./Core/core_cm3.h **** #define CoreDebug_DHCSR_S_RESET_ST_Pos     25                                             /*!< Core
 741:./Core/core_cm3.h **** #define CoreDebug_DHCSR_S_RESET_ST_Msk     (1UL << CoreDebug_DHCSR_S_RESET_ST_Pos)        /*!< Core
 742:./Core/core_cm3.h **** 
 743:./Core/core_cm3.h **** #define CoreDebug_DHCSR_S_RETIRE_ST_Pos    24                                             /*!< Core
 744:./Core/core_cm3.h **** #define CoreDebug_DHCSR_S_RETIRE_ST_Msk    (1UL << CoreDebug_DHCSR_S_RETIRE_ST_Pos)       /*!< Core
 745:./Core/core_cm3.h **** 
 746:./Core/core_cm3.h **** #define CoreDebug_DHCSR_S_LOCKUP_Pos       19                                             /*!< Core
 747:./Core/core_cm3.h **** #define CoreDebug_DHCSR_S_LOCKUP_Msk       (1UL << CoreDebug_DHCSR_S_LOCKUP_Pos)          /*!< Core
 748:./Core/core_cm3.h **** 
 749:./Core/core_cm3.h **** #define CoreDebug_DHCSR_S_SLEEP_Pos        18                                             /*!< Core
 750:./Core/core_cm3.h **** #define CoreDebug_DHCSR_S_SLEEP_Msk        (1UL << CoreDebug_DHCSR_S_SLEEP_Pos)           /*!< Core
 751:./Core/core_cm3.h **** 
 752:./Core/core_cm3.h **** #define CoreDebug_DHCSR_S_HALT_Pos         17                                             /*!< Core
 753:./Core/core_cm3.h **** #define CoreDebug_DHCSR_S_HALT_Msk         (1UL << CoreDebug_DHCSR_S_HALT_Pos)            /*!< Core
 754:./Core/core_cm3.h **** 
 755:./Core/core_cm3.h **** #define CoreDebug_DHCSR_S_REGRDY_Pos       16                                             /*!< Core
 756:./Core/core_cm3.h **** #define CoreDebug_DHCSR_S_REGRDY_Msk       (1UL << CoreDebug_DHCSR_S_REGRDY_Pos)          /*!< Core
 757:./Core/core_cm3.h **** 
 758:./Core/core_cm3.h **** #define CoreDebug_DHCSR_C_SNAPSTALL_Pos     5                                             /*!< Core
 759:./Core/core_cm3.h **** #define CoreDebug_DHCSR_C_SNAPSTALL_Msk    (1UL << CoreDebug_DHCSR_C_SNAPSTALL_Pos)       /*!< Core
 760:./Core/core_cm3.h **** 
 761:./Core/core_cm3.h **** #define CoreDebug_DHCSR_C_MASKINTS_Pos      3                                             /*!< Core
 762:./Core/core_cm3.h **** #define CoreDebug_DHCSR_C_MASKINTS_Msk     (1UL << CoreDebug_DHCSR_C_MASKINTS_Pos)        /*!< Core
 763:./Core/core_cm3.h **** 
 764:./Core/core_cm3.h **** #define CoreDebug_DHCSR_C_STEP_Pos          2                                             /*!< Core
 765:./Core/core_cm3.h **** #define CoreDebug_DHCSR_C_STEP_Msk         (1UL << CoreDebug_DHCSR_C_STEP_Pos)            /*!< Core
 766:./Core/core_cm3.h **** 
 767:./Core/core_cm3.h **** #define CoreDebug_DHCSR_C_HALT_Pos          1                                             /*!< Core
 768:./Core/core_cm3.h **** #define CoreDebug_DHCSR_C_HALT_Msk         (1UL << CoreDebug_DHCSR_C_HALT_Pos)            /*!< Core
 769:./Core/core_cm3.h **** 
 770:./Core/core_cm3.h **** #define CoreDebug_DHCSR_C_DEBUGEN_Pos       0                                             /*!< Core
 771:./Core/core_cm3.h **** #define CoreDebug_DHCSR_C_DEBUGEN_Msk      (1UL << CoreDebug_DHCSR_C_DEBUGEN_Pos)         /*!< Core
 772:./Core/core_cm3.h **** 
 773:./Core/core_cm3.h **** /* Debug Core Register Selector Register */
 774:./Core/core_cm3.h **** #define CoreDebug_DCRSR_REGWnR_Pos         16                                             /*!< Core
 775:./Core/core_cm3.h **** #define CoreDebug_DCRSR_REGWnR_Msk         (1UL << CoreDebug_DCRSR_REGWnR_Pos)            /*!< Core
 776:./Core/core_cm3.h **** 
 777:./Core/core_cm3.h **** #define CoreDebug_DCRSR_REGSEL_Pos          0                                             /*!< Core
 778:./Core/core_cm3.h **** #define CoreDebug_DCRSR_REGSEL_Msk         (0x1FUL << CoreDebug_DCRSR_REGSEL_Pos)         /*!< Core
 779:./Core/core_cm3.h **** 
 780:./Core/core_cm3.h **** /* Debug Exception and Monitor Control Register */
 781:./Core/core_cm3.h **** #define CoreDebug_DEMCR_TRCENA_Pos         24                                             /*!< Core
 782:./Core/core_cm3.h **** #define CoreDebug_DEMCR_TRCENA_Msk         (1UL << CoreDebug_DEMCR_TRCENA_Pos)            /*!< Core
 783:./Core/core_cm3.h **** 
 784:./Core/core_cm3.h **** #define CoreDebug_DEMCR_MON_REQ_Pos        19                                             /*!< Core
 785:./Core/core_cm3.h **** #define CoreDebug_DEMCR_MON_REQ_Msk        (1UL << CoreDebug_DEMCR_MON_REQ_Pos)           /*!< Core
 786:./Core/core_cm3.h **** 
 787:./Core/core_cm3.h **** #define CoreDebug_DEMCR_MON_STEP_Pos       18                                             /*!< Core
 788:./Core/core_cm3.h **** #define CoreDebug_DEMCR_MON_STEP_Msk       (1UL << CoreDebug_DEMCR_MON_STEP_Pos)          /*!< Core
 789:./Core/core_cm3.h **** 
 790:./Core/core_cm3.h **** #define CoreDebug_DEMCR_MON_PEND_Pos       17                                             /*!< Core
 791:./Core/core_cm3.h **** #define CoreDebug_DEMCR_MON_PEND_Msk       (1UL << CoreDebug_DEMCR_MON_PEND_Pos)          /*!< Core
 792:./Core/core_cm3.h **** 
 793:./Core/core_cm3.h **** #define CoreDebug_DEMCR_MON_EN_Pos         16                                             /*!< Core
 794:./Core/core_cm3.h **** #define CoreDebug_DEMCR_MON_EN_Msk         (1UL << CoreDebug_DEMCR_MON_EN_Pos)            /*!< Core
 795:./Core/core_cm3.h **** 
 796:./Core/core_cm3.h **** #define CoreDebug_DEMCR_VC_HARDERR_Pos     10                                             /*!< Core
 797:./Core/core_cm3.h **** #define CoreDebug_DEMCR_VC_HARDERR_Msk     (1UL << CoreDebug_DEMCR_VC_HARDERR_Pos)        /*!< Core
 798:./Core/core_cm3.h **** 
 799:./Core/core_cm3.h **** #define CoreDebug_DEMCR_VC_INTERR_Pos       9                                             /*!< Core
 800:./Core/core_cm3.h **** #define CoreDebug_DEMCR_VC_INTERR_Msk      (1UL << CoreDebug_DEMCR_VC_INTERR_Pos)         /*!< Core
 801:./Core/core_cm3.h **** 
 802:./Core/core_cm3.h **** #define CoreDebug_DEMCR_VC_BUSERR_Pos       8                                             /*!< Core
 803:./Core/core_cm3.h **** #define CoreDebug_DEMCR_VC_BUSERR_Msk      (1UL << CoreDebug_DEMCR_VC_BUSERR_Pos)         /*!< Core
 804:./Core/core_cm3.h **** 
 805:./Core/core_cm3.h **** #define CoreDebug_DEMCR_VC_STATERR_Pos      7                                             /*!< Core
 806:./Core/core_cm3.h **** #define CoreDebug_DEMCR_VC_STATERR_Msk     (1UL << CoreDebug_DEMCR_VC_STATERR_Pos)        /*!< Core
 807:./Core/core_cm3.h **** 
 808:./Core/core_cm3.h **** #define CoreDebug_DEMCR_VC_CHKERR_Pos       6                                             /*!< Core
 809:./Core/core_cm3.h **** #define CoreDebug_DEMCR_VC_CHKERR_Msk      (1UL << CoreDebug_DEMCR_VC_CHKERR_Pos)         /*!< Core
 810:./Core/core_cm3.h **** 
 811:./Core/core_cm3.h **** #define CoreDebug_DEMCR_VC_NOCPERR_Pos      5                                             /*!< Core
 812:./Core/core_cm3.h **** #define CoreDebug_DEMCR_VC_NOCPERR_Msk     (1UL << CoreDebug_DEMCR_VC_NOCPERR_Pos)        /*!< Core
 813:./Core/core_cm3.h **** 
 814:./Core/core_cm3.h **** #define CoreDebug_DEMCR_VC_MMERR_Pos        4                                             /*!< Core
 815:./Core/core_cm3.h **** #define CoreDebug_DEMCR_VC_MMERR_Msk       (1UL << CoreDebug_DEMCR_VC_MMERR_Pos)          /*!< Core
 816:./Core/core_cm3.h **** 
 817:./Core/core_cm3.h **** #define CoreDebug_DEMCR_VC_CORERESET_Pos    0                                             /*!< Core
 818:./Core/core_cm3.h **** #define CoreDebug_DEMCR_VC_CORERESET_Msk   (1UL << CoreDebug_DEMCR_VC_CORERESET_Pos)      /*!< Core
 819:./Core/core_cm3.h **** 
 820:./Core/core_cm3.h **** /*@} end of group CMSIS_CoreDebug */
 821:./Core/core_cm3.h **** 
 822:./Core/core_cm3.h **** 
 823:./Core/core_cm3.h **** /** \ingroup  CMSIS_core_register
 824:./Core/core_cm3.h ****   @{
 825:./Core/core_cm3.h ****  */
 826:./Core/core_cm3.h **** 
 827:./Core/core_cm3.h **** /* Memory mapping of Cortex-M3 Hardware */
 828:./Core/core_cm3.h **** #define SCS_BASE            (0xE000E000UL)                            /*!< System Control Space Bas
 829:./Core/core_cm3.h **** #define ITM_BASE            (0xE0000000UL)                            /*!< ITM Base Address        
 830:./Core/core_cm3.h **** #define CoreDebug_BASE      (0xE000EDF0UL)                            /*!< Core Debug Base Address 
 831:./Core/core_cm3.h **** #define SysTick_BASE        (SCS_BASE +  0x0010UL)                    /*!< SysTick Base Address    
 832:./Core/core_cm3.h **** #define NVIC_BASE           (SCS_BASE +  0x0100UL)                    /*!< NVIC Base Address       
 833:./Core/core_cm3.h **** #define SCB_BASE            (SCS_BASE +  0x0D00UL)                    /*!< System Control Block Bas
 834:./Core/core_cm3.h **** 
 835:./Core/core_cm3.h **** #define InterruptType       ((InterruptType_Type *) SCS_BASE)         /*!< Interrupt Type Register 
 836:./Core/core_cm3.h **** #define SCB                 ((SCB_Type *)           SCB_BASE)         /*!< SCB configuration struct
 837:./Core/core_cm3.h **** #define SysTick             ((SysTick_Type *)       SysTick_BASE)     /*!< SysTick configuration st
 838:./Core/core_cm3.h **** #define NVIC                ((NVIC_Type *)          NVIC_BASE)        /*!< NVIC configuration struc
 839:./Core/core_cm3.h **** #define ITM                 ((ITM_Type *)           ITM_BASE)         /*!< ITM configuration struct
 840:./Core/core_cm3.h **** #define CoreDebug           ((CoreDebug_Type *)     CoreDebug_BASE)   /*!< Core Debug configuration
 841:./Core/core_cm3.h **** 
 842:./Core/core_cm3.h **** #if (__MPU_PRESENT == 1)
 843:./Core/core_cm3.h ****   #define MPU_BASE          (SCS_BASE +  0x0D90UL)                    /*!< Memory Protection Unit  
 844:./Core/core_cm3.h ****   #define MPU               ((MPU_Type*)            MPU_BASE)         /*!< Memory Protection Unit  
 845:./Core/core_cm3.h **** #endif
 846:./Core/core_cm3.h **** 
 847:./Core/core_cm3.h **** /*@} */
 848:./Core/core_cm3.h **** 
 849:./Core/core_cm3.h **** 
 850:./Core/core_cm3.h **** 
 851:./Core/core_cm3.h **** /*******************************************************************************
 852:./Core/core_cm3.h ****  *                Hardware Abstraction Layer
 853:./Core/core_cm3.h ****  ******************************************************************************/
 854:./Core/core_cm3.h **** /** \addtogroup CMSIS_Core_FunctionInterface CMSIS Core Function Interface
 855:./Core/core_cm3.h ****   Core Function Interface contains:
 856:./Core/core_cm3.h ****   - Core NVIC Functions
 857:./Core/core_cm3.h ****   - Core SysTick Functions
 858:./Core/core_cm3.h ****   - Core Debug Functions
 859:./Core/core_cm3.h ****   - Core Register Access Functions
 860:./Core/core_cm3.h **** */
 861:./Core/core_cm3.h **** 
 862:./Core/core_cm3.h **** 
 863:./Core/core_cm3.h **** 
 864:./Core/core_cm3.h **** /* ##########################   NVIC functions  #################################### */
 865:./Core/core_cm3.h **** /** \ingroup  CMSIS_Core_FunctionInterface
 866:./Core/core_cm3.h ****     \defgroup CMSIS_Core_NVICFunctions CMSIS Core NVIC Functions
 867:./Core/core_cm3.h ****   @{
 868:./Core/core_cm3.h ****  */
 869:./Core/core_cm3.h **** /** @addtogroup CMSIS_Core_NVICFunctions
 870:./Core/core_cm3.h ****  * @{
 871:./Core/core_cm3.h ****  */
 872:./Core/core_cm3.h **** /** \brief  Set Priority Grouping
 873:./Core/core_cm3.h **** 
 874:./Core/core_cm3.h ****   This function sets the priority grouping field using the required unlock sequence.
 875:./Core/core_cm3.h ****   The parameter PriorityGroup is assigned to the field SCB->AIRCR [10:8] PRIGROUP field.
 876:./Core/core_cm3.h ****   Only values from 0..7 are used.
 877:./Core/core_cm3.h ****   In case of a conflict between priority grouping and available
 878:./Core/core_cm3.h ****   priority bits (__NVIC_PRIO_BITS) the smallest possible priority group is set.
 879:./Core/core_cm3.h **** 
 880:./Core/core_cm3.h ****     \param [in]      PriorityGroup  Priority grouping field
 881:./Core/core_cm3.h ****  */
 882:./Core/core_cm3.h **** static __INLINE void NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
 883:./Core/core_cm3.h **** {
 884:./Core/core_cm3.h ****   uint32_t reg_value;
 885:./Core/core_cm3.h ****   uint32_t PriorityGroupTmp = (PriorityGroup & 0x07);                         /* only values 0..7 a
 886:./Core/core_cm3.h **** 
 887:./Core/core_cm3.h ****   reg_value  =  SCB->AIRCR;                                                   /* read old register 
 888:./Core/core_cm3.h ****   reg_value &= ~(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk);             /* clear bits to chan
 889:./Core/core_cm3.h ****   reg_value  =  (reg_value                       |
 890:./Core/core_cm3.h ****                 (0x5FA << SCB_AIRCR_VECTKEY_Pos) |
 891:./Core/core_cm3.h ****                 (PriorityGroupTmp << 8));                                     /* Insert write key a
 892:./Core/core_cm3.h ****   SCB->AIRCR =  reg_value;
 893:./Core/core_cm3.h **** }
 894:./Core/core_cm3.h **** 
 895:./Core/core_cm3.h **** 
 896:./Core/core_cm3.h **** /** \brief  Get Priority Grouping
 897:./Core/core_cm3.h **** 
 898:./Core/core_cm3.h ****   This function gets the priority grouping from NVIC Interrupt Controller.
 899:./Core/core_cm3.h ****   Priority grouping is SCB->AIRCR [10:8] PRIGROUP field.
 900:./Core/core_cm3.h **** 
 901:./Core/core_cm3.h ****     \return                Priority grouping field
 902:./Core/core_cm3.h ****  */
 903:./Core/core_cm3.h **** static __INLINE uint32_t NVIC_GetPriorityGrouping(void)
 904:./Core/core_cm3.h **** {
 905:./Core/core_cm3.h ****   return ((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos);   /* read priority grou
 906:./Core/core_cm3.h **** }
 907:./Core/core_cm3.h **** 
 908:./Core/core_cm3.h **** 
 909:./Core/core_cm3.h **** /** \brief  Enable External Interrupt
 910:./Core/core_cm3.h **** 
 911:./Core/core_cm3.h ****     This function enables a device specific interupt in the NVIC interrupt controller.
 912:./Core/core_cm3.h ****     The interrupt number cannot be a negative value.
 913:./Core/core_cm3.h **** 
 914:./Core/core_cm3.h ****     \param [in]      IRQn  Number of the external interrupt to enable
 915:./Core/core_cm3.h ****  */
 916:./Core/core_cm3.h **** static __INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
 917:./Core/core_cm3.h **** {
 918:./Core/core_cm3.h ****   NVIC->ISER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* enable interrupt */
 713              		.loc 2 918 0
 714 0062 1549     		ldr	r1, .L76+12
 715              	.LBE83:
 716              	.LBE82:
 717              	.LBB86:
 718              	.LBB87:
 198:./src/usb/usbhw.c **** 	LPC_USB->USBMaxPSize = USB_MAX_PACKET0;
 719              		.loc 1 198 0
 720 0064 0823     		movs	r3, #8
 721              	.LBE87:
 722              	.LBE86:
 723              	.LBB92:
 724              	.LBB84:
 725              		.loc 2 918 0
 726 0066 4FF08075 		mov	r5, #16777216
 727              	.LBE84:
 728              	.LBE92:
 729              	.LBB93:
 730              	.LBB88:
 197:./src/usb/usbhw.c **** 	LPC_USB->USBEpInd = 0;
 731              		.loc 1 197 0
 732 006a 0024     		movs	r4, #0
 199:./src/usb/usbhw.c **** 	LPC_USB->USBEpInd = 1;
 733              		.loc 1 199 0
 734 006c 0120     		movs	r0, #1
 735              	.LBE88:
 736              	.LBE93:
 737              	.LBB94:
 738              	.LBB85:
 739              		.loc 2 918 0
 740 006e 0D60     		str	r5, [r1]
 741              	.LBE85:
 742              	.LBE94:
 743              	.LBB95:
 744              	.LBB89:
 197:./src/usb/usbhw.c **** 	LPC_USB->USBEpInd = 0;
 745              		.loc 1 197 0
 746 0070 C2F84842 		str	r4, [r2, #584]
 201:./src/usb/usbhw.c **** 	while ((LPC_USB->USBDevIntSt & EP_RLZED_INT) == 0)
 747              		.loc 1 201 0
 748 0074 1146     		mov	r1, r2
 198:./src/usb/usbhw.c **** 	LPC_USB->USBMaxPSize = USB_MAX_PACKET0;
 749              		.loc 1 198 0
 750 0076 C2F84C32 		str	r3, [r2, #588]
 199:./src/usb/usbhw.c **** 	LPC_USB->USBEpInd = 1;
 751              		.loc 1 199 0
 752 007a C2F84802 		str	r0, [r2, #584]
 200:./src/usb/usbhw.c **** 	LPC_USB->USBMaxPSize = USB_MAX_PACKET0;
 753              		.loc 1 200 0
 754 007e C2F84C32 		str	r3, [r2, #588]
 755              	.L75:
 201:./src/usb/usbhw.c **** 	while ((LPC_USB->USBDevIntSt & EP_RLZED_INT) == 0)
 756              		.loc 1 201 0
 757 0082 D1F80032 		ldr	r3, [r1, #512]
 758 0086 0B4A     		ldr	r2, .L76+8
 759 0088 DB05     		lsls	r3, r3, #23
 760 008a FAD5     		bpl	.L75
 204:./src/usb/usbhw.c **** 	LPC_USB->USBEpIntClr = 0xFFFFFFFF;
 761              		.loc 1 204 0
 762 008c 4FF0FF33 		mov	r3, #-1
 207:./src/usb/usbhw.c **** 	LPC_USB->USBDevIntEn = DEV_STAT_INT | EP_SLOW_INT
 763              		.loc 1 207 0
 764 0090 0C21     		movs	r1, #12
 204:./src/usb/usbhw.c **** 	LPC_USB->USBEpIntClr = 0xFFFFFFFF;
 765              		.loc 1 204 0
 766 0092 C2F83832 		str	r3, [r2, #568]
 767              	.LBE89:
 768              	.LBE95:
 170:./src/usb/usbhw.c **** 	USB_SetAddress(0);
 769              		.loc 1 170 0
 770 0096 0020     		movs	r0, #0
 771              	.LBB96:
 772              	.LBB90:
 205:./src/usb/usbhw.c **** 	LPC_USB->USBEpIntEn = 0xFFFFFFFF ^ USB_DMA_EP;
 773              		.loc 1 205 0
 774 0098 C2F83432 		str	r3, [r2, #564]
 775              	.LBE90:
 776              	.LBE96:
 171:./src/usb/usbhw.c **** }
 777              		.loc 1 171 0
 778 009c 30BC     		pop	{r4, r5}
 779              	.LBB97:
 780              	.LBB91:
 206:./src/usb/usbhw.c **** 	LPC_USB->USBDevIntClr = 0xFFFFFFFF;
 781              		.loc 1 206 0
 782 009e C2F80832 		str	r3, [r2, #520]
 207:./src/usb/usbhw.c **** 	LPC_USB->USBDevIntEn = DEV_STAT_INT | EP_SLOW_INT
 783              		.loc 1 207 0
 784 00a2 C2F80412 		str	r1, [r2, #516]
 785              	.LBE91:
 786              	.LBE97:
 170:./src/usb/usbhw.c **** 	USB_SetAddress(0);
 787              		.loc 1 170 0
 788 00a6 FFF7FEBF 		b	USB_SetAddress
 789              	.LVL27:
 790              	.L77:
 791 00aa 00BF     		.align	2
 792              	.L76:
 793 00ac 00C00240 		.word	1073922048
 794 00b0 00C00F40 		.word	1074774016
 795 00b4 00C00050 		.word	1342226432
 796 00b8 00E100E0 		.word	-536813312
 797              		.cfi_endproc
 798              	.LFE60:
 800              		.section	.text.USB_Configure,"ax",%progbits
 801              		.align	2
 802              		.global	USB_Configure
 803              		.thumb
 804              		.thumb_func
 806              	USB_Configure:
 807              	.LFB68:
 288:./src/usb/usbhw.c **** 
 289:./src/usb/usbhw.c **** /*
 290:./src/usb/usbhw.c ****  *  USB Configure Function
 291:./src/usb/usbhw.c ****  *    Parameters:      cfg:   Configure/Deconfigure
 292:./src/usb/usbhw.c ****  *    Return Value:    None
 293:./src/usb/usbhw.c ****  */
 294:./src/usb/usbhw.c **** 
 295:./src/usb/usbhw.c **** void USB_Configure(uint32_t cfg)
 296:./src/usb/usbhw.c **** {
 808              		.loc 1 296 0
 809              		.cfi_startproc
 810              		@ args = 0, pretend = 0, frame = 0
 811              		@ frame_needed = 0, uses_anonymous_args = 0
 812              		@ link register save eliminated.
 813              	.LVL28:
 814 0000 10B4     		push	{r4}
 815              		.cfi_def_cfa_offset 4
 816              		.cfi_offset 4, -4
 817              	.LBB98:
 818              	.LBB99:
  97:./src/usb/usbhw.c **** 	LPC_USB->USBDevIntClr = CCEMTY_INT;
 819              		.loc 1 97 0
 820 0002 164B     		ldr	r3, .L87
  98:./src/usb/usbhw.c **** 	LPC_USB->USBCmdCode = cmd;
 821              		.loc 1 98 0
 822 0004 164C     		ldr	r4, .L87+4
 823              	.LBE99:
 824              	.LBE98:
 297:./src/usb/usbhw.c **** 
 298:./src/usb/usbhw.c **** 	WrCmdDat(CMD_CFG_DEV, DAT_WR_BYTE(cfg ? CONF_DVICE : 0));
 825              		.loc 1 298 0
 826 0006 174A     		ldr	r2, .L87+8
 827              	.LBB103:
 828              	.LBB100:
  97:./src/usb/usbhw.c **** 	LPC_USB->USBDevIntClr = CCEMTY_INT;
 829              		.loc 1 97 0
 830 0008 1021     		movs	r1, #16
 831              	.LBE100:
 832              	.LBE103:
 833              		.loc 1 298 0
 834 000a 0028     		cmp	r0, #0
 835              	.LBB104:
 836              	.LBB101:
  97:./src/usb/usbhw.c **** 	LPC_USB->USBDevIntClr = CCEMTY_INT;
 837              		.loc 1 97 0
 838 000c C3F80812 		str	r1, [r3, #520]
 839              	.LBE101:
 840              	.LBE104:
 841              		.loc 1 298 0
 842 0010 0CBF     		ite	eq
 843 0012 4FF48070 		moveq	r0, #256
 844 0016 1046     		movne	r0, r2
 845              	.LVL29:
 846              	.LBB105:
 847              	.LBB102:
  99:./src/usb/usbhw.c **** 	while ((LPC_USB->USBDevIntSt & CCEMTY_INT) == 0)
 848              		.loc 1 99 0
 849 0018 1946     		mov	r1, r3
  98:./src/usb/usbhw.c **** 	LPC_USB->USBCmdCode = cmd;
 850              		.loc 1 98 0
 851 001a C3F81042 		str	r4, [r3, #528]
 852              	.L81:
  99:./src/usb/usbhw.c **** 	while ((LPC_USB->USBDevIntSt & CCEMTY_INT) == 0)
 853              		.loc 1 99 0
 854 001e D1F80032 		ldr	r3, [r1, #512]
 855 0022 0E4A     		ldr	r2, .L87
 856 0024 DC06     		lsls	r4, r3, #27
 857 0026 FAD5     		bpl	.L81
 101:./src/usb/usbhw.c **** 	LPC_USB->USBDevIntClr = CCEMTY_INT;
 858              		.loc 1 101 0
 859 0028 1023     		movs	r3, #16
 860 002a C2F80832 		str	r3, [r2, #520]
 103:./src/usb/usbhw.c **** 	while ((LPC_USB->USBDevIntSt & CCEMTY_INT) == 0)
 861              		.loc 1 103 0
 862 002e 1146     		mov	r1, r2
 102:./src/usb/usbhw.c **** 	LPC_USB->USBCmdCode = val;
 863              		.loc 1 102 0
 864 0030 C2F81002 		str	r0, [r2, #528]
 865              	.LVL30:
 866              	.L83:
 103:./src/usb/usbhw.c **** 	while ((LPC_USB->USBDevIntSt & CCEMTY_INT) == 0)
 867              		.loc 1 103 0
 868 0034 D1F80032 		ldr	r3, [r1, #512]
 869 0038 084A     		ldr	r2, .L87
 870 003a D806     		lsls	r0, r3, #27
 871 003c FAD5     		bpl	.L83
 872              	.LBE102:
 873              	.LBE105:
 299:./src/usb/usbhw.c **** 
 300:./src/usb/usbhw.c **** 	LPC_USB->USBReEp = 0x00000003;
 874              		.loc 1 300 0 discriminator 3
 875 003e 0323     		movs	r3, #3
 876 0040 C2F84432 		str	r3, [r2, #580]
 877              	.LVL31:
 878              	.L85:
 301:./src/usb/usbhw.c **** 	while ((LPC_USB->USBDevIntSt & EP_RLZED_INT) == 0)
 879              		.loc 1 301 0 discriminator 1
 880 0044 D2F80032 		ldr	r3, [r2, #512]
 881 0048 0449     		ldr	r1, .L87
 882 004a DB05     		lsls	r3, r3, #23
 883 004c FAD5     		bpl	.L85
 302:./src/usb/usbhw.c **** 		;
 303:./src/usb/usbhw.c **** 	LPC_USB->USBDevIntClr = EP_RLZED_INT;
 884              		.loc 1 303 0
 885 004e 4FF48073 		mov	r3, #256
 886 0052 C1F80832 		str	r3, [r1, #520]
 304:./src/usb/usbhw.c **** }
 887              		.loc 1 304 0
 888 0056 5DF8044B 		ldr	r4, [sp], #4
 889 005a 7047     		bx	lr
 890              	.L88:
 891              		.align	2
 892              	.L87:
 893 005c 00C00050 		.word	1342226432
 894 0060 0005D800 		.word	14157056
 895 0064 00010100 		.word	65792
 896              		.cfi_endproc
 897              	.LFE68:
 899              		.section	.text.USB_ConfigEP,"ax",%progbits
 900              		.align	2
 901              		.global	USB_ConfigEP
 902              		.thumb
 903              		.thumb_func
 905              	USB_ConfigEP:
 906              	.LFB69:
 305:./src/usb/usbhw.c **** 
 306:./src/usb/usbhw.c **** /*
 307:./src/usb/usbhw.c ****  *  Configure USB Endpoint according to Descriptor
 308:./src/usb/usbhw.c ****  *    Parameters:      pEPD:  Pointer to Endpoint Descriptor
 309:./src/usb/usbhw.c ****  *    Return Value:    None
 310:./src/usb/usbhw.c ****  */
 311:./src/usb/usbhw.c **** 
 312:./src/usb/usbhw.c **** void USB_ConfigEP(USB_ENDPOINT_DESCRIPTOR *pEPD)
 313:./src/usb/usbhw.c **** {
 907              		.loc 1 313 0
 908              		.cfi_startproc
 909              		@ args = 0, pretend = 0, frame = 0
 910              		@ frame_needed = 0, uses_anonymous_args = 0
 911              		@ link register save eliminated.
 912              	.LVL32:
 314:./src/usb/usbhw.c **** 	uint32_t num;
 315:./src/usb/usbhw.c **** 
 316:./src/usb/usbhw.c **** 	num = EPAdr(pEPD->bEndpointAddress);
 913              		.loc 1 316 0
 914 0000 8378     		ldrb	r3, [r0, #2]	@ zero_extendqisi2
 915              	.LVL33:
 313:./src/usb/usbhw.c **** {
 916              		.loc 1 313 0
 917 0002 30B4     		push	{r4, r5}
 918              		.cfi_def_cfa_offset 8
 919              		.cfi_offset 4, -8
 920              		.cfi_offset 5, -4
 921              	.LBB106:
 922              	.LBB107:
  64:./src/usb/usbhw.c **** 	val = (EPNum & 0x0F) << 1;
 923              		.loc 1 64 0
 924 0004 03F00F02 		and	r2, r3, #15
 925 0008 5200     		lsls	r2, r2, #1
 926              	.LVL34:
  65:./src/usb/usbhw.c **** 	if (EPNum & 0x80)
 927              		.loc 1 65 0
 928 000a 1906     		lsls	r1, r3, #24
  67:./src/usb/usbhw.c **** 		val += 1;
 929              		.loc 1 67 0
 930 000c 48BF     		it	mi
 931 000e 0132     		addmi	r2, r2, #1
 932              	.LVL35:
 933              	.LBE107:
 934              	.LBE106:
 317:./src/usb/usbhw.c **** 	LPC_USB->USBReEp |= (1 << num);
 935              		.loc 1 317 0
 936 0010 0124     		movs	r4, #1
 937 0012 9440     		lsls	r4, r4, r2
 938 0014 0B4B     		ldr	r3, .L96
 939              	.LVL36:
 940 0016 D3F84452 		ldr	r5, [r3, #580]
 318:./src/usb/usbhw.c **** 	LPC_USB->USBEpInd = num;
 319:./src/usb/usbhw.c **** 	LPC_USB->USBMaxPSize = pEPD->wMaxPacketSize;
 320:./src/usb/usbhw.c **** 	while ((LPC_USB->USBDevIntSt & EP_RLZED_INT) == 0)
 941              		.loc 1 320 0
 942 001a 1946     		mov	r1, r3
 317:./src/usb/usbhw.c **** 	LPC_USB->USBReEp |= (1 << num);
 943              		.loc 1 317 0
 944 001c 2C43     		orrs	r4, r4, r5
 945 001e C3F84442 		str	r4, [r3, #580]
 946              	.LVL37:
 318:./src/usb/usbhw.c **** 	LPC_USB->USBEpInd = num;
 947              		.loc 1 318 0
 948 0022 C3F84822 		str	r2, [r3, #584]
 319:./src/usb/usbhw.c **** 	LPC_USB->USBMaxPSize = pEPD->wMaxPacketSize;
 949              		.loc 1 319 0
 950 0026 8288     		ldrh	r2, [r0, #4]	@ unaligned
 951              	.LVL38:
 952 0028 C3F84C22 		str	r2, [r3, #588]
 953              	.LVL39:
 954              	.L92:
 955              		.loc 1 320 0 discriminator 1
 956 002c D1F80032 		ldr	r3, [r1, #512]
 957 0030 044A     		ldr	r2, .L96
 958 0032 DB05     		lsls	r3, r3, #23
 959 0034 FAD5     		bpl	.L92
 321:./src/usb/usbhw.c **** 		;
 322:./src/usb/usbhw.c **** 	LPC_USB->USBDevIntClr = EP_RLZED_INT;
 960              		.loc 1 322 0
 961 0036 4FF48073 		mov	r3, #256
 962 003a C2F80832 		str	r3, [r2, #520]
 323:./src/usb/usbhw.c **** }
 963              		.loc 1 323 0
 964 003e 30BC     		pop	{r4, r5}
 965 0040 7047     		bx	lr
 966              	.L97:
 967 0042 00BF     		.align	2
 968              	.L96:
 969 0044 00C00050 		.word	1342226432
 970              		.cfi_endproc
 971              	.LFE69:
 973              		.section	.text.USB_DirCtrlEP,"ax",%progbits
 974              		.align	2
 975              		.global	USB_DirCtrlEP
 976              		.thumb
 977              		.thumb_func
 979              	USB_DirCtrlEP:
 980              	.LFB70:
 324:./src/usb/usbhw.c **** 
 325:./src/usb/usbhw.c **** /*
 326:./src/usb/usbhw.c ****  *  Set Direction for USB Control Endpoint
 327:./src/usb/usbhw.c ****  *    Parameters:      dir:   Out (dir == 0), In (dir <> 0)
 328:./src/usb/usbhw.c ****  *    Return Value:    None
 329:./src/usb/usbhw.c ****  */
 330:./src/usb/usbhw.c **** 
 331:./src/usb/usbhw.c **** void USB_DirCtrlEP(uint32_t dir)
 332:./src/usb/usbhw.c **** {
 981              		.loc 1 332 0
 982              		.cfi_startproc
 983              		@ args = 0, pretend = 0, frame = 0
 984              		@ frame_needed = 0, uses_anonymous_args = 0
 985              		@ link register save eliminated.
 986              	.LVL40:
 987 0000 7047     		bx	lr
 988              		.cfi_endproc
 989              	.LFE70:
 991 0002 00BF     		.section	.text.USB_EnableEP,"ax",%progbits
 992              		.align	2
 993              		.global	USB_EnableEP
 994              		.thumb
 995              		.thumb_func
 997              	USB_EnableEP:
 998              	.LFB71:
 333:./src/usb/usbhw.c **** 	/* Not needed */
 334:./src/usb/usbhw.c **** }
 335:./src/usb/usbhw.c **** 
 336:./src/usb/usbhw.c **** /*
 337:./src/usb/usbhw.c ****  *  Enable USB Endpoint
 338:./src/usb/usbhw.c ****  *    Parameters:      EPNum: Endpoint Number
 339:./src/usb/usbhw.c ****  *                       EPNum.0..3: Address
 340:./src/usb/usbhw.c ****  *                       EPNum.7:    Dir
 341:./src/usb/usbhw.c ****  *    Return Value:    None
 342:./src/usb/usbhw.c ****  */
 343:./src/usb/usbhw.c **** 
 344:./src/usb/usbhw.c **** void USB_EnableEP(uint32_t EPNum)
 345:./src/usb/usbhw.c **** {
 999              		.loc 1 345 0
 1000              		.cfi_startproc
 1001              		@ args = 0, pretend = 0, frame = 0
 1002              		@ frame_needed = 0, uses_anonymous_args = 0
 1003              		@ link register save eliminated.
 1004              	.LVL41:
 1005              	.LBB108:
 1006              	.LBB109:
  64:./src/usb/usbhw.c **** 	val = (EPNum & 0x0F) << 1;
 1007              		.loc 1 64 0
 1008 0000 00F00F02 		and	r2, r0, #15
 1009 0004 5200     		lsls	r2, r2, #1
 1010              	.LVL42:
  65:./src/usb/usbhw.c **** 	if (EPNum & 0x80)
 1011              		.loc 1 65 0
 1012 0006 0306     		lsls	r3, r0, #24
  67:./src/usb/usbhw.c **** 		val += 1;
 1013              		.loc 1 67 0
 1014 0008 48BF     		it	mi
 1015 000a 0132     		addmi	r2, r2, #1
 1016              	.LVL43:
 1017              	.LBE109:
 1018              	.LBE108:
 346:./src/usb/usbhw.c **** 	WrCmdDat(CMD_SET_EP_STAT(EPAdr(EPNum)), DAT_WR_BYTE(0));
 1019              		.loc 1 346 0
 1020 000c 1204     		lsls	r2, r2, #16
 1021              	.LVL44:
 1022              	.LBB110:
 1023              	.LBB111:
  97:./src/usb/usbhw.c **** 	LPC_USB->USBDevIntClr = CCEMTY_INT;
 1024              		.loc 1 97 0
 1025 000e 0E4B     		ldr	r3, .L108
 1026              	.LBE111:
 1027              	.LBE110:
 1028              		.loc 1 346 0
 1029 0010 42F48002 		orr	r2, r2, #4194304
 1030              	.LBB114:
 1031              	.LBB112:
  97:./src/usb/usbhw.c **** 	LPC_USB->USBDevIntClr = CCEMTY_INT;
 1032              		.loc 1 97 0
 1033 0014 1021     		movs	r1, #16
 1034              	.LBE112:
 1035              	.LBE114:
 1036              		.loc 1 346 0
 1037 0016 42F4A062 		orr	r2, r2, #1280
 1038              	.LVL45:
 1039              	.LBB115:
 1040              	.LBB113:
  97:./src/usb/usbhw.c **** 	LPC_USB->USBDevIntClr = CCEMTY_INT;
 1041              		.loc 1 97 0
 1042 001a C3F80812 		str	r1, [r3, #520]
  99:./src/usb/usbhw.c **** 	while ((LPC_USB->USBDevIntSt & CCEMTY_INT) == 0)
 1043              		.loc 1 99 0
 1044 001e 1946     		mov	r1, r3
  98:./src/usb/usbhw.c **** 	LPC_USB->USBCmdCode = cmd;
 1045              		.loc 1 98 0
 1046 0020 C3F81022 		str	r2, [r3, #528]
 1047              	.LVL46:
 1048              	.L102:
  99:./src/usb/usbhw.c **** 	while ((LPC_USB->USBDevIntSt & CCEMTY_INT) == 0)
 1049              		.loc 1 99 0
 1050 0024 D1F80032 		ldr	r3, [r1, #512]
 1051 0028 074A     		ldr	r2, .L108
 1052 002a D806     		lsls	r0, r3, #27
 1053 002c FAD5     		bpl	.L102
 101:./src/usb/usbhw.c **** 	LPC_USB->USBDevIntClr = CCEMTY_INT;
 1054              		.loc 1 101 0
 1055 002e 1021     		movs	r1, #16
 1056              	.LVL47:
 102:./src/usb/usbhw.c **** 	LPC_USB->USBCmdCode = val;
 1057              		.loc 1 102 0
 1058 0030 4FF48073 		mov	r3, #256
 101:./src/usb/usbhw.c **** 	LPC_USB->USBDevIntClr = CCEMTY_INT;
 1059              		.loc 1 101 0
 1060 0034 C2F80812 		str	r1, [r2, #520]
 1061              	.LVL48:
 103:./src/usb/usbhw.c **** 	while ((LPC_USB->USBDevIntSt & CCEMTY_INT) == 0)
 1062              		.loc 1 103 0
 1063 0038 1146     		mov	r1, r2
 102:./src/usb/usbhw.c **** 	LPC_USB->USBCmdCode = val;
 1064              		.loc 1 102 0
 1065 003a C2F81032 		str	r3, [r2, #528]
 1066              	.L104:
 103:./src/usb/usbhw.c **** 	while ((LPC_USB->USBDevIntSt & CCEMTY_INT) == 0)
 1067              		.loc 1 103 0
 1068 003e D1F80032 		ldr	r3, [r1, #512]
 1069 0042 DB06     		lsls	r3, r3, #27
 1070 0044 FBD5     		bpl	.L104
 1071              	.LBE113:
 1072              	.LBE115:
 347:./src/usb/usbhw.c **** }
 1073              		.loc 1 347 0
 1074 0046 7047     		bx	lr
 1075              	.L109:
 1076              		.align	2
 1077              	.L108:
 1078 0048 00C00050 		.word	1342226432
 1079              		.cfi_endproc
 1080              	.LFE71:
 1082              		.section	.text.USB_DisableEP,"ax",%progbits
 1083              		.align	2
 1084              		.global	USB_DisableEP
 1085              		.thumb
 1086              		.thumb_func
 1088              	USB_DisableEP:
 1089              	.LFB72:
 348:./src/usb/usbhw.c **** 
 349:./src/usb/usbhw.c **** /*
 350:./src/usb/usbhw.c ****  *  Disable USB Endpoint
 351:./src/usb/usbhw.c ****  *    Parameters:      EPNum: Endpoint Number
 352:./src/usb/usbhw.c ****  *                       EPNum.0..3: Address
 353:./src/usb/usbhw.c ****  *                       EPNum.7:    Dir
 354:./src/usb/usbhw.c ****  *    Return Value:    None
 355:./src/usb/usbhw.c ****  */
 356:./src/usb/usbhw.c **** 
 357:./src/usb/usbhw.c **** void USB_DisableEP(uint32_t EPNum)
 358:./src/usb/usbhw.c **** {
 1090              		.loc 1 358 0
 1091              		.cfi_startproc
 1092              		@ args = 0, pretend = 0, frame = 0
 1093              		@ frame_needed = 0, uses_anonymous_args = 0
 1094              		@ link register save eliminated.
 1095              	.LVL49:
 1096              	.LBB116:
 1097              	.LBB117:
  64:./src/usb/usbhw.c **** 	val = (EPNum & 0x0F) << 1;
 1098              		.loc 1 64 0
 1099 0000 00F00F02 		and	r2, r0, #15
 1100 0004 5200     		lsls	r2, r2, #1
 1101              	.LVL50:
  65:./src/usb/usbhw.c **** 	if (EPNum & 0x80)
 1102              		.loc 1 65 0
 1103 0006 0306     		lsls	r3, r0, #24
  67:./src/usb/usbhw.c **** 		val += 1;
 1104              		.loc 1 67 0
 1105 0008 48BF     		it	mi
 1106 000a 0132     		addmi	r2, r2, #1
 1107              	.LVL51:
 1108              	.LBE117:
 1109              	.LBE116:
 359:./src/usb/usbhw.c **** 	WrCmdDat(CMD_SET_EP_STAT(EPAdr(EPNum)), DAT_WR_BYTE(EP_STAT_DA));
 1110              		.loc 1 359 0
 1111 000c 1204     		lsls	r2, r2, #16
 1112              	.LVL52:
 1113              	.LBB118:
 1114              	.LBB119:
  97:./src/usb/usbhw.c **** 	LPC_USB->USBDevIntClr = CCEMTY_INT;
 1115              		.loc 1 97 0
 1116 000e 0E4B     		ldr	r3, .L119
 1117              	.LBE119:
 1118              	.LBE118:
 1119              		.loc 1 359 0
 1120 0010 42F48002 		orr	r2, r2, #4194304
 1121              	.LBB122:
 1122              	.LBB120:
  97:./src/usb/usbhw.c **** 	LPC_USB->USBDevIntClr = CCEMTY_INT;
 1123              		.loc 1 97 0
 1124 0014 1021     		movs	r1, #16
 1125              	.LBE120:
 1126              	.LBE122:
 1127              		.loc 1 359 0
 1128 0016 42F4A062 		orr	r2, r2, #1280
 1129              	.LVL53:
 1130              	.LBB123:
 1131              	.LBB121:
  97:./src/usb/usbhw.c **** 	LPC_USB->USBDevIntClr = CCEMTY_INT;
 1132              		.loc 1 97 0
 1133 001a C3F80812 		str	r1, [r3, #520]
  99:./src/usb/usbhw.c **** 	while ((LPC_USB->USBDevIntSt & CCEMTY_INT) == 0)
 1134              		.loc 1 99 0
 1135 001e 1946     		mov	r1, r3
  98:./src/usb/usbhw.c **** 	LPC_USB->USBCmdCode = cmd;
 1136              		.loc 1 98 0
 1137 0020 C3F81022 		str	r2, [r3, #528]
 1138              	.LVL54:
 1139              	.L113:
  99:./src/usb/usbhw.c **** 	while ((LPC_USB->USBDevIntSt & CCEMTY_INT) == 0)
 1140              		.loc 1 99 0
 1141 0024 D1F80032 		ldr	r3, [r1, #512]
 1142 0028 074A     		ldr	r2, .L119
 1143 002a D806     		lsls	r0, r3, #27
 1144 002c FAD5     		bpl	.L113
 102:./src/usb/usbhw.c **** 	LPC_USB->USBCmdCode = val;
 1145              		.loc 1 102 0
 1146 002e 074B     		ldr	r3, .L119+4
 101:./src/usb/usbhw.c **** 	LPC_USB->USBDevIntClr = CCEMTY_INT;
 1147              		.loc 1 101 0
 1148 0030 1021     		movs	r1, #16
 1149              	.LVL55:
 1150 0032 C2F80812 		str	r1, [r2, #520]
 1151              	.LVL56:
 103:./src/usb/usbhw.c **** 	while ((LPC_USB->USBDevIntSt & CCEMTY_INT) == 0)
 1152              		.loc 1 103 0
 1153 0036 1146     		mov	r1, r2
 102:./src/usb/usbhw.c **** 	LPC_USB->USBCmdCode = val;
 1154              		.loc 1 102 0
 1155 0038 C2F81032 		str	r3, [r2, #528]
 1156              	.L115:
 103:./src/usb/usbhw.c **** 	while ((LPC_USB->USBDevIntSt & CCEMTY_INT) == 0)
 1157              		.loc 1 103 0
 1158 003c D1F80032 		ldr	r3, [r1, #512]
 1159 0040 DB06     		lsls	r3, r3, #27
 1160 0042 FBD5     		bpl	.L115
 1161              	.LBE121:
 1162              	.LBE123:
 360:./src/usb/usbhw.c **** }
 1163              		.loc 1 360 0
 1164 0044 7047     		bx	lr
 1165              	.L120:
 1166 0046 00BF     		.align	2
 1167              	.L119:
 1168 0048 00C00050 		.word	1342226432
 1169 004c 00012000 		.word	2097408
 1170              		.cfi_endproc
 1171              	.LFE72:
 1173              		.section	.text.USB_ResetEP,"ax",%progbits
 1174              		.align	2
 1175              		.global	USB_ResetEP
 1176              		.thumb
 1177              		.thumb_func
 1179              	USB_ResetEP:
 1180              	.LFB73:
 361:./src/usb/usbhw.c **** 
 362:./src/usb/usbhw.c **** /*
 363:./src/usb/usbhw.c ****  *  Reset USB Endpoint
 364:./src/usb/usbhw.c ****  *    Parameters:      EPNum: Endpoint Number
 365:./src/usb/usbhw.c ****  *                       EPNum.0..3: Address
 366:./src/usb/usbhw.c ****  *                       EPNum.7:    Dir
 367:./src/usb/usbhw.c ****  *    Return Value:    None
 368:./src/usb/usbhw.c ****  */
 369:./src/usb/usbhw.c **** 
 370:./src/usb/usbhw.c **** void USB_ResetEP(uint32_t EPNum)
 371:./src/usb/usbhw.c **** {
 1181              		.loc 1 371 0
 1182              		.cfi_startproc
 1183              		@ args = 0, pretend = 0, frame = 0
 1184              		@ frame_needed = 0, uses_anonymous_args = 0
 1185              		@ link register save eliminated.
 1186              	.LVL57:
 1187              	.LBB124:
 1188              	.LBB125:
  64:./src/usb/usbhw.c **** 	val = (EPNum & 0x0F) << 1;
 1189              		.loc 1 64 0
 1190 0000 00F00F02 		and	r2, r0, #15
 1191 0004 5200     		lsls	r2, r2, #1
 1192              	.LVL58:
  65:./src/usb/usbhw.c **** 	if (EPNum & 0x80)
 1193              		.loc 1 65 0
 1194 0006 0306     		lsls	r3, r0, #24
  67:./src/usb/usbhw.c **** 		val += 1;
 1195              		.loc 1 67 0
 1196 0008 48BF     		it	mi
 1197 000a 0132     		addmi	r2, r2, #1
 1198              	.LVL59:
 1199              	.LBE125:
 1200              	.LBE124:
 372:./src/usb/usbhw.c **** 	WrCmdDat(CMD_SET_EP_STAT(EPAdr(EPNum)), DAT_WR_BYTE(0));
 1201              		.loc 1 372 0
 1202 000c 1204     		lsls	r2, r2, #16
 1203              	.LVL60:
 1204              	.LBB126:
 1205              	.LBB127:
  97:./src/usb/usbhw.c **** 	LPC_USB->USBDevIntClr = CCEMTY_INT;
 1206              		.loc 1 97 0
 1207 000e 0E4B     		ldr	r3, .L130
 1208              	.LBE127:
 1209              	.LBE126:
 1210              		.loc 1 372 0
 1211 0010 42F48002 		orr	r2, r2, #4194304
 1212              	.LBB130:
 1213              	.LBB128:
  97:./src/usb/usbhw.c **** 	LPC_USB->USBDevIntClr = CCEMTY_INT;
 1214              		.loc 1 97 0
 1215 0014 1021     		movs	r1, #16
 1216              	.LBE128:
 1217              	.LBE130:
 1218              		.loc 1 372 0
 1219 0016 42F4A062 		orr	r2, r2, #1280
 1220              	.LVL61:
 1221              	.LBB131:
 1222              	.LBB129:
  97:./src/usb/usbhw.c **** 	LPC_USB->USBDevIntClr = CCEMTY_INT;
 1223              		.loc 1 97 0
 1224 001a C3F80812 		str	r1, [r3, #520]
  99:./src/usb/usbhw.c **** 	while ((LPC_USB->USBDevIntSt & CCEMTY_INT) == 0)
 1225              		.loc 1 99 0
 1226 001e 1946     		mov	r1, r3
  98:./src/usb/usbhw.c **** 	LPC_USB->USBCmdCode = cmd;
 1227              		.loc 1 98 0
 1228 0020 C3F81022 		str	r2, [r3, #528]
 1229              	.LVL62:
 1230              	.L124:
  99:./src/usb/usbhw.c **** 	while ((LPC_USB->USBDevIntSt & CCEMTY_INT) == 0)
 1231              		.loc 1 99 0
 1232 0024 D1F80032 		ldr	r3, [r1, #512]
 1233 0028 074A     		ldr	r2, .L130
 1234 002a D806     		lsls	r0, r3, #27
 1235 002c FAD5     		bpl	.L124
 101:./src/usb/usbhw.c **** 	LPC_USB->USBDevIntClr = CCEMTY_INT;
 1236              		.loc 1 101 0
 1237 002e 1021     		movs	r1, #16
 1238              	.LVL63:
 102:./src/usb/usbhw.c **** 	LPC_USB->USBCmdCode = val;
 1239              		.loc 1 102 0
 1240 0030 4FF48073 		mov	r3, #256
 101:./src/usb/usbhw.c **** 	LPC_USB->USBDevIntClr = CCEMTY_INT;
 1241              		.loc 1 101 0
 1242 0034 C2F80812 		str	r1, [r2, #520]
 1243              	.LVL64:
 103:./src/usb/usbhw.c **** 	while ((LPC_USB->USBDevIntSt & CCEMTY_INT) == 0)
 1244              		.loc 1 103 0
 1245 0038 1146     		mov	r1, r2
 102:./src/usb/usbhw.c **** 	LPC_USB->USBCmdCode = val;
 1246              		.loc 1 102 0
 1247 003a C2F81032 		str	r3, [r2, #528]
 1248              	.L126:
 103:./src/usb/usbhw.c **** 	while ((LPC_USB->USBDevIntSt & CCEMTY_INT) == 0)
 1249              		.loc 1 103 0
 1250 003e D1F80032 		ldr	r3, [r1, #512]
 1251 0042 DB06     		lsls	r3, r3, #27
 1252 0044 FBD5     		bpl	.L126
 1253              	.LBE129:
 1254              	.LBE131:
 373:./src/usb/usbhw.c **** }
 1255              		.loc 1 373 0
 1256 0046 7047     		bx	lr
 1257              	.L131:
 1258              		.align	2
 1259              	.L130:
 1260 0048 00C00050 		.word	1342226432
 1261              		.cfi_endproc
 1262              	.LFE73:
 1264              		.section	.text.USB_SetStallEP,"ax",%progbits
 1265              		.align	2
 1266              		.global	USB_SetStallEP
 1267              		.thumb
 1268              		.thumb_func
 1270              	USB_SetStallEP:
 1271              	.LFB74:
 374:./src/usb/usbhw.c **** 
 375:./src/usb/usbhw.c **** /*
 376:./src/usb/usbhw.c ****  *  Set Stall for USB Endpoint
 377:./src/usb/usbhw.c ****  *    Parameters:      EPNum: Endpoint Number
 378:./src/usb/usbhw.c ****  *                       EPNum.0..3: Address
 379:./src/usb/usbhw.c ****  *                       EPNum.7:    Dir
 380:./src/usb/usbhw.c ****  *    Return Value:    None
 381:./src/usb/usbhw.c ****  */
 382:./src/usb/usbhw.c **** 
 383:./src/usb/usbhw.c **** void USB_SetStallEP(uint32_t EPNum)
 384:./src/usb/usbhw.c **** {
 1272              		.loc 1 384 0
 1273              		.cfi_startproc
 1274              		@ args = 0, pretend = 0, frame = 0
 1275              		@ frame_needed = 0, uses_anonymous_args = 0
 1276              		@ link register save eliminated.
 1277              	.LVL65:
 1278              	.LBB132:
 1279              	.LBB133:
  64:./src/usb/usbhw.c **** 	val = (EPNum & 0x0F) << 1;
 1280              		.loc 1 64 0
 1281 0000 00F00F02 		and	r2, r0, #15
 1282 0004 5200     		lsls	r2, r2, #1
 1283              	.LVL66:
  65:./src/usb/usbhw.c **** 	if (EPNum & 0x80)
 1284              		.loc 1 65 0
 1285 0006 0306     		lsls	r3, r0, #24
  67:./src/usb/usbhw.c **** 		val += 1;
 1286              		.loc 1 67 0
 1287 0008 48BF     		it	mi
 1288 000a 0132     		addmi	r2, r2, #1
 1289              	.LVL67:
 1290              	.LBE133:
 1291              	.LBE132:
 385:./src/usb/usbhw.c **** 	WrCmdDat(CMD_SET_EP_STAT(EPAdr(EPNum)), DAT_WR_BYTE(EP_STAT_ST));
 1292              		.loc 1 385 0
 1293 000c 1204     		lsls	r2, r2, #16
 1294              	.LVL68:
 1295              	.LBB134:
 1296              	.LBB135:
  97:./src/usb/usbhw.c **** 	LPC_USB->USBDevIntClr = CCEMTY_INT;
 1297              		.loc 1 97 0
 1298 000e 0E4B     		ldr	r3, .L141
 1299              	.LBE135:
 1300              	.LBE134:
 1301              		.loc 1 385 0
 1302 0010 42F48002 		orr	r2, r2, #4194304
 1303              	.LBB138:
 1304              	.LBB136:
  97:./src/usb/usbhw.c **** 	LPC_USB->USBDevIntClr = CCEMTY_INT;
 1305              		.loc 1 97 0
 1306 0014 1021     		movs	r1, #16
 1307              	.LBE136:
 1308              	.LBE138:
 1309              		.loc 1 385 0
 1310 0016 42F4A062 		orr	r2, r2, #1280
 1311              	.LVL69:
 1312              	.LBB139:
 1313              	.LBB137:
  97:./src/usb/usbhw.c **** 	LPC_USB->USBDevIntClr = CCEMTY_INT;
 1314              		.loc 1 97 0
 1315 001a C3F80812 		str	r1, [r3, #520]
  99:./src/usb/usbhw.c **** 	while ((LPC_USB->USBDevIntSt & CCEMTY_INT) == 0)
 1316              		.loc 1 99 0
 1317 001e 1946     		mov	r1, r3
  98:./src/usb/usbhw.c **** 	LPC_USB->USBCmdCode = cmd;
 1318              		.loc 1 98 0
 1319 0020 C3F81022 		str	r2, [r3, #528]
 1320              	.LVL70:
 1321              	.L135:
  99:./src/usb/usbhw.c **** 	while ((LPC_USB->USBDevIntSt & CCEMTY_INT) == 0)
 1322              		.loc 1 99 0
 1323 0024 D1F80032 		ldr	r3, [r1, #512]
 1324 0028 074A     		ldr	r2, .L141
 1325 002a D806     		lsls	r0, r3, #27
 1326 002c FAD5     		bpl	.L135
 102:./src/usb/usbhw.c **** 	LPC_USB->USBCmdCode = val;
 1327              		.loc 1 102 0
 1328 002e 074B     		ldr	r3, .L141+4
 101:./src/usb/usbhw.c **** 	LPC_USB->USBDevIntClr = CCEMTY_INT;
 1329              		.loc 1 101 0
 1330 0030 1021     		movs	r1, #16
 1331              	.LVL71:
 1332 0032 C2F80812 		str	r1, [r2, #520]
 1333              	.LVL72:
 103:./src/usb/usbhw.c **** 	while ((LPC_USB->USBDevIntSt & CCEMTY_INT) == 0)
 1334              		.loc 1 103 0
 1335 0036 1146     		mov	r1, r2
 102:./src/usb/usbhw.c **** 	LPC_USB->USBCmdCode = val;
 1336              		.loc 1 102 0
 1337 0038 C2F81032 		str	r3, [r2, #528]
 1338              	.L137:
 103:./src/usb/usbhw.c **** 	while ((LPC_USB->USBDevIntSt & CCEMTY_INT) == 0)
 1339              		.loc 1 103 0
 1340 003c D1F80032 		ldr	r3, [r1, #512]
 1341 0040 DB06     		lsls	r3, r3, #27
 1342 0042 FBD5     		bpl	.L137
 1343              	.LBE137:
 1344              	.LBE139:
 386:./src/usb/usbhw.c **** }
 1345              		.loc 1 386 0
 1346 0044 7047     		bx	lr
 1347              	.L142:
 1348 0046 00BF     		.align	2
 1349              	.L141:
 1350 0048 00C00050 		.word	1342226432
 1351 004c 00010100 		.word	65792
 1352              		.cfi_endproc
 1353              	.LFE74:
 1355              		.section	.text.USB_ClrStallEP,"ax",%progbits
 1356              		.align	2
 1357              		.global	USB_ClrStallEP
 1358              		.thumb
 1359              		.thumb_func
 1361              	USB_ClrStallEP:
 1362              	.LFB75:
 387:./src/usb/usbhw.c **** 
 388:./src/usb/usbhw.c **** /*
 389:./src/usb/usbhw.c ****  *  Clear Stall for USB Endpoint
 390:./src/usb/usbhw.c ****  *    Parameters:      EPNum: Endpoint Number
 391:./src/usb/usbhw.c ****  *                       EPNum.0..3: Address
 392:./src/usb/usbhw.c ****  *                       EPNum.7:    Dir
 393:./src/usb/usbhw.c ****  *    Return Value:    None
 394:./src/usb/usbhw.c ****  */
 395:./src/usb/usbhw.c **** 
 396:./src/usb/usbhw.c **** void USB_ClrStallEP(uint32_t EPNum)
 397:./src/usb/usbhw.c **** {
 1363              		.loc 1 397 0
 1364              		.cfi_startproc
 1365              		@ args = 0, pretend = 0, frame = 0
 1366              		@ frame_needed = 0, uses_anonymous_args = 0
 1367              		@ link register save eliminated.
 1368              	.LVL73:
 1369              	.LBB140:
 1370              	.LBB141:
  64:./src/usb/usbhw.c **** 	val = (EPNum & 0x0F) << 1;
 1371              		.loc 1 64 0
 1372 0000 00F00F02 		and	r2, r0, #15
 1373 0004 5200     		lsls	r2, r2, #1
 1374              	.LVL74:
  65:./src/usb/usbhw.c **** 	if (EPNum & 0x80)
 1375              		.loc 1 65 0
 1376 0006 0306     		lsls	r3, r0, #24
  67:./src/usb/usbhw.c **** 		val += 1;
 1377              		.loc 1 67 0
 1378 0008 48BF     		it	mi
 1379 000a 0132     		addmi	r2, r2, #1
 1380              	.LVL75:
 1381              	.LBE141:
 1382              	.LBE140:
 398:./src/usb/usbhw.c **** 	WrCmdDat(CMD_SET_EP_STAT(EPAdr(EPNum)), DAT_WR_BYTE(0));
 1383              		.loc 1 398 0
 1384 000c 1204     		lsls	r2, r2, #16
 1385              	.LVL76:
 1386              	.LBB142:
 1387              	.LBB143:
  97:./src/usb/usbhw.c **** 	LPC_USB->USBDevIntClr = CCEMTY_INT;
 1388              		.loc 1 97 0
 1389 000e 0E4B     		ldr	r3, .L152
 1390              	.LBE143:
 1391              	.LBE142:
 1392              		.loc 1 398 0
 1393 0010 42F48002 		orr	r2, r2, #4194304
 1394              	.LBB146:
 1395              	.LBB144:
  97:./src/usb/usbhw.c **** 	LPC_USB->USBDevIntClr = CCEMTY_INT;
 1396              		.loc 1 97 0
 1397 0014 1021     		movs	r1, #16
 1398              	.LBE144:
 1399              	.LBE146:
 1400              		.loc 1 398 0
 1401 0016 42F4A062 		orr	r2, r2, #1280
 1402              	.LVL77:
 1403              	.LBB147:
 1404              	.LBB145:
  97:./src/usb/usbhw.c **** 	LPC_USB->USBDevIntClr = CCEMTY_INT;
 1405              		.loc 1 97 0
 1406 001a C3F80812 		str	r1, [r3, #520]
  99:./src/usb/usbhw.c **** 	while ((LPC_USB->USBDevIntSt & CCEMTY_INT) == 0)
 1407              		.loc 1 99 0
 1408 001e 1946     		mov	r1, r3
  98:./src/usb/usbhw.c **** 	LPC_USB->USBCmdCode = cmd;
 1409              		.loc 1 98 0
 1410 0020 C3F81022 		str	r2, [r3, #528]
 1411              	.LVL78:
 1412              	.L146:
  99:./src/usb/usbhw.c **** 	while ((LPC_USB->USBDevIntSt & CCEMTY_INT) == 0)
 1413              		.loc 1 99 0
 1414 0024 D1F80032 		ldr	r3, [r1, #512]
 1415 0028 074A     		ldr	r2, .L152
 1416 002a D806     		lsls	r0, r3, #27
 1417 002c FAD5     		bpl	.L146
 101:./src/usb/usbhw.c **** 	LPC_USB->USBDevIntClr = CCEMTY_INT;
 1418              		.loc 1 101 0
 1419 002e 1021     		movs	r1, #16
 1420              	.LVL79:
 102:./src/usb/usbhw.c **** 	LPC_USB->USBCmdCode = val;
 1421              		.loc 1 102 0
 1422 0030 4FF48073 		mov	r3, #256
 101:./src/usb/usbhw.c **** 	LPC_USB->USBDevIntClr = CCEMTY_INT;
 1423              		.loc 1 101 0
 1424 0034 C2F80812 		str	r1, [r2, #520]
 1425              	.LVL80:
 103:./src/usb/usbhw.c **** 	while ((LPC_USB->USBDevIntSt & CCEMTY_INT) == 0)
 1426              		.loc 1 103 0
 1427 0038 1146     		mov	r1, r2
 102:./src/usb/usbhw.c **** 	LPC_USB->USBCmdCode = val;
 1428              		.loc 1 102 0
 1429 003a C2F81032 		str	r3, [r2, #528]
 1430              	.L148:
 103:./src/usb/usbhw.c **** 	while ((LPC_USB->USBDevIntSt & CCEMTY_INT) == 0)
 1431              		.loc 1 103 0
 1432 003e D1F80032 		ldr	r3, [r1, #512]
 1433 0042 DB06     		lsls	r3, r3, #27
 1434 0044 FBD5     		bpl	.L148
 1435              	.LBE145:
 1436              	.LBE147:
 399:./src/usb/usbhw.c **** }
 1437              		.loc 1 399 0
 1438 0046 7047     		bx	lr
 1439              	.L153:
 1440              		.align	2
 1441              	.L152:
 1442 0048 00C00050 		.word	1342226432
 1443              		.cfi_endproc
 1444              	.LFE75:
 1446              		.section	.text.USB_ClearEPBuf,"ax",%progbits
 1447              		.align	2
 1448              		.global	USB_ClearEPBuf
 1449              		.thumb
 1450              		.thumb_func
 1452              	USB_ClearEPBuf:
 1453              	.LFB76:
 400:./src/usb/usbhw.c **** 
 401:./src/usb/usbhw.c **** /*
 402:./src/usb/usbhw.c ****  *  Clear USB Endpoint Buffer
 403:./src/usb/usbhw.c ****  *    Parameters:      EPNum: Endpoint Number
 404:./src/usb/usbhw.c ****  *                       EPNum.0..3: Address
 405:./src/usb/usbhw.c ****  *                       EPNum.7:    Dir
 406:./src/usb/usbhw.c ****  *    Return Value:    None
 407:./src/usb/usbhw.c ****  */
 408:./src/usb/usbhw.c **** 
 409:./src/usb/usbhw.c **** void USB_ClearEPBuf(uint32_t EPNum)
 410:./src/usb/usbhw.c **** {
 1454              		.loc 1 410 0
 1455              		.cfi_startproc
 1456              		@ args = 0, pretend = 0, frame = 0
 1457              		@ frame_needed = 0, uses_anonymous_args = 0
 1458              		@ link register save eliminated.
 1459              	.LVL81:
 411:./src/usb/usbhw.c **** 	WrCmdEP(EPNum, CMD_CLR_BUF);
 1460              		.loc 1 411 0
 1461 0000 0149     		ldr	r1, .L155
 1462 0002 FFF7FEBF 		b	WrCmdEP
 1463              	.LVL82:
 1464              	.L156:
 1465 0006 00BF     		.align	2
 1466              	.L155:
 1467 0008 0005F200 		.word	15860992
 1468              		.cfi_endproc
 1469              	.LFE76:
 1471              		.section	.text.USB_ReadEP,"ax",%progbits
 1472              		.align	2
 1473              		.global	USB_ReadEP
 1474              		.thumb
 1475              		.thumb_func
 1477              	USB_ReadEP:
 1478              	.LFB77:
 412:./src/usb/usbhw.c **** }
 413:./src/usb/usbhw.c **** 
 414:./src/usb/usbhw.c **** /*
 415:./src/usb/usbhw.c ****  *  Read USB Endpoint Data
 416:./src/usb/usbhw.c ****  *    Parameters:      EPNum: Endpoint Number
 417:./src/usb/usbhw.c ****  *                       EPNum.0..3: Address
 418:./src/usb/usbhw.c ****  *                       EPNum.7:    Dir
 419:./src/usb/usbhw.c ****  *                     pData: Pointer to Data Buffer
 420:./src/usb/usbhw.c ****  *    Return Value:    Number of bytes read
 421:./src/usb/usbhw.c ****  */
 422:./src/usb/usbhw.c **** 
 423:./src/usb/usbhw.c **** uint32_t USB_ReadEP(uint32_t EPNum, uint8_t *pData)
 424:./src/usb/usbhw.c **** {
 1479              		.loc 1 424 0
 1480              		.cfi_startproc
 1481              		@ args = 0, pretend = 0, frame = 0
 1482              		@ frame_needed = 0, uses_anonymous_args = 0
 1483              	.LVL83:
 1484 0000 F8B5     		push	{r3, r4, r5, r6, r7, lr}
 1485              		.cfi_def_cfa_offset 24
 1486              		.cfi_offset 3, -24
 1487              		.cfi_offset 4, -20
 1488              		.cfi_offset 5, -16
 1489              		.cfi_offset 6, -12
 1490              		.cfi_offset 7, -8
 1491              		.cfi_offset 14, -4
 425:./src/usb/usbhw.c **** 	uint32_t cnt, n;
 426:./src/usb/usbhw.c **** 
 427:./src/usb/usbhw.c **** 	LPC_USB->USBCtrl = ((EPNum & 0x0F) << 2) | CTRL_RD_EN;
 1492              		.loc 1 427 0
 1493 0002 00F00F07 		and	r7, r0, #15
 1494 0006 BF00     		lsls	r7, r7, #2
 1495 0008 114A     		ldr	r2, .L166
 1496 000a 47F00103 		orr	r3, r7, #1
 1497 000e C2F82832 		str	r3, [r2, #552]
 1498              	.L159:
 428:./src/usb/usbhw.c **** 
 429:./src/usb/usbhw.c **** 	do
 430:./src/usb/usbhw.c **** 	{
 431:./src/usb/usbhw.c **** 		cnt = LPC_USB->USBRxPLen;
 1499              		.loc 1 431 0 discriminator 1
 1500 0012 D2F82032 		ldr	r3, [r2, #544]
 1501              	.LVL84:
 432:./src/usb/usbhw.c **** 	} while ((cnt & PKT_RDY) == 0);
 1502              		.loc 1 432 0 discriminator 1
 1503 0016 1C05     		lsls	r4, r3, #20
 1504 0018 FBD5     		bpl	.L159
 433:./src/usb/usbhw.c **** 	cnt &= PKT_LNGTH_MASK;
 1505              		.loc 1 433 0
 1506 001a C3F30906 		ubfx	r6, r3, #0, #10
 1507              	.LVL85:
 434:./src/usb/usbhw.c **** 
 435:./src/usb/usbhw.c **** 	for (n = 0; n < (cnt + 3) / 4; n++)
 1508              		.loc 1 435 0
 1509 001e F41C     		adds	r4, r6, #3
 1510 0020 A408     		lsrs	r4, r4, #2
 1511 0022 08D0     		beq	.L163
 436:./src/usb/usbhw.c **** 	{
 437:./src/usb/usbhw.c **** 		*((__packed uint32_t *) pData) = LPC_USB->USBRxData;
 1512              		.loc 1 437 0
 1513 0024 0A4D     		ldr	r5, .L166
 435:./src/usb/usbhw.c **** 	for (n = 0; n < (cnt + 3) / 4; n++)
 1514              		.loc 1 435 0
 1515 0026 0023     		movs	r3, #0
 1516              	.LVL86:
 1517              	.L164:
 1518              		.loc 1 437 0 discriminator 2
 1519 0028 D5F81822 		ldr	r2, [r5, #536]
 435:./src/usb/usbhw.c **** 	for (n = 0; n < (cnt + 3) / 4; n++)
 1520              		.loc 1 435 0 discriminator 2
 1521 002c 0133     		adds	r3, r3, #1
 1522              	.LVL87:
 1523 002e A342     		cmp	r3, r4
 1524              		.loc 1 437 0 discriminator 2
 1525 0030 41F8042B 		str	r2, [r1], #4
 1526              	.LVL88:
 435:./src/usb/usbhw.c **** 	for (n = 0; n < (cnt + 3) / 4; n++)
 1527              		.loc 1 435 0 discriminator 2
 1528 0034 F8D1     		bne	.L164
 1529              	.LVL89:
 1530              	.L163:
 438:./src/usb/usbhw.c **** 		pData += 4;
 439:./src/usb/usbhw.c **** 	}
 440:./src/usb/usbhw.c **** 	LPC_USB->USBCtrl = ((EPNum & 0x0F) << 2);
 441:./src/usb/usbhw.c **** //	LPC_USB->USBCtrl = 0;
 442:./src/usb/usbhw.c **** 
 443:./src/usb/usbhw.c **** 	if (((EP_MSK_ISO >> EPNum) & 1) == 0)
 1531              		.loc 1 443 0
 1532 0036 41F24823 		movw	r3, #4680
 1533 003a 0341     		asrs	r3, r3, r0
 440:./src/usb/usbhw.c **** 	LPC_USB->USBCtrl = ((EPNum & 0x0F) << 2);
 1534              		.loc 1 440 0
 1535 003c 044A     		ldr	r2, .L166
 1536              		.loc 1 443 0
 1537 003e DB07     		lsls	r3, r3, #31
 440:./src/usb/usbhw.c **** 	LPC_USB->USBCtrl = ((EPNum & 0x0F) << 2);
 1538              		.loc 1 440 0
 1539 0040 C2F82872 		str	r7, [r2, #552]
 1540              		.loc 1 443 0
 1541 0044 02D4     		bmi	.L162
 444:./src/usb/usbhw.c **** 	{ /* Non-Isochronous Endpoint */
 445:./src/usb/usbhw.c **** 		WrCmdEP(EPNum, CMD_CLR_BUF);
 1542              		.loc 1 445 0
 1543 0046 0349     		ldr	r1, .L166+4
 1544              	.LVL90:
 1545 0048 FFF7FEFF 		bl	WrCmdEP
 1546              	.LVL91:
 1547              	.L162:
 446:./src/usb/usbhw.c **** 	}
 447:./src/usb/usbhw.c **** 
 448:./src/usb/usbhw.c **** 	return (cnt);
 449:./src/usb/usbhw.c **** }
 1548              		.loc 1 449 0
 1549 004c 3046     		mov	r0, r6
 1550 004e F8BD     		pop	{r3, r4, r5, r6, r7, pc}
 1551              	.LVL92:
 1552              	.L167:
 1553              		.align	2
 1554              	.L166:
 1555 0050 00C00050 		.word	1342226432
 1556 0054 0005F200 		.word	15860992
 1557              		.cfi_endproc
 1558              	.LFE77:
 1560              		.section	.text.USB_WriteEP,"ax",%progbits
 1561              		.align	2
 1562              		.global	USB_WriteEP
 1563              		.thumb
 1564              		.thumb_func
 1566              	USB_WriteEP:
 1567              	.LFB78:
 450:./src/usb/usbhw.c **** 
 451:./src/usb/usbhw.c **** /*
 452:./src/usb/usbhw.c ****  *  Write USB Endpoint Data
 453:./src/usb/usbhw.c ****  *    Parameters:      EPNum: Endpoint Number
 454:./src/usb/usbhw.c ****  *                       EPNum.0..3: Address
 455:./src/usb/usbhw.c ****  *                       EPNum.7:    Dir
 456:./src/usb/usbhw.c ****  *                     pData: Pointer to Data Buffer
 457:./src/usb/usbhw.c ****  *                     cnt:   Number of bytes to write
 458:./src/usb/usbhw.c ****  *    Return Value:    Number of bytes written
 459:./src/usb/usbhw.c ****  */
 460:./src/usb/usbhw.c **** 
 461:./src/usb/usbhw.c **** uint32_t USB_WriteEP(uint32_t EPNum, uint8_t *pData, uint32_t cnt)
 462:./src/usb/usbhw.c **** {
 1568              		.loc 1 462 0
 1569              		.cfi_startproc
 1570              		@ args = 0, pretend = 0, frame = 0
 1571              		@ frame_needed = 0, uses_anonymous_args = 0
 1572              	.LVL93:
 1573 0000 F8B5     		push	{r3, r4, r5, r6, r7, lr}
 1574              		.cfi_def_cfa_offset 24
 1575              		.cfi_offset 3, -24
 1576              		.cfi_offset 4, -20
 1577              		.cfi_offset 5, -16
 1578              		.cfi_offset 6, -12
 1579              		.cfi_offset 7, -8
 1580              		.cfi_offset 14, -4
 463:./src/usb/usbhw.c **** 	uint32_t n;
 464:./src/usb/usbhw.c **** 
 465:./src/usb/usbhw.c **** 	LPC_USB->USBCtrl = ((EPNum & 0x0F) << 2) | CTRL_WR_EN;
 1581              		.loc 1 465 0
 1582 0002 00F00F03 		and	r3, r0, #15
 1583 0006 0E4E     		ldr	r6, .L174
 1584 0008 9B00     		lsls	r3, r3, #2
 466:./src/usb/usbhw.c **** 
 467:./src/usb/usbhw.c **** 	LPC_USB->USBTxPLen = cnt;
 468:./src/usb/usbhw.c **** 
 469:./src/usb/usbhw.c **** 	for (n = 0; n < (cnt + 3) / 4; n++)
 1585              		.loc 1 469 0
 1586 000a D51C     		adds	r5, r2, #3
 465:./src/usb/usbhw.c **** 	LPC_USB->USBCtrl = ((EPNum & 0x0F) << 2) | CTRL_WR_EN;
 1587              		.loc 1 465 0
 1588 000c 43F00203 		orr	r3, r3, #2
 1589              		.loc 1 469 0
 1590 0010 AD08     		lsrs	r5, r5, #2
 465:./src/usb/usbhw.c **** 	LPC_USB->USBCtrl = ((EPNum & 0x0F) << 2) | CTRL_WR_EN;
 1591              		.loc 1 465 0
 1592 0012 C6F82832 		str	r3, [r6, #552]
 462:./src/usb/usbhw.c **** {
 1593              		.loc 1 462 0
 1594 0016 1746     		mov	r7, r2
 467:./src/usb/usbhw.c **** 	LPC_USB->USBTxPLen = cnt;
 1595              		.loc 1 467 0
 1596 0018 C6F82422 		str	r2, [r6, #548]
 1597              	.LVL94:
 1598              		.loc 1 469 0
 1599 001c 07D0     		beq	.L170
 1600 001e 0023     		movs	r3, #0
 1601              	.LVL95:
 1602              	.L171:
 470:./src/usb/usbhw.c **** 	{
 471:./src/usb/usbhw.c **** 		LPC_USB->USBTxData = *((__packed uint32_t *) pData);
 1603              		.loc 1 471 0 discriminator 2
 1604 0020 51F8044B 		ldr	r4, [r1], #4
 1605              	.LVL96:
 469:./src/usb/usbhw.c **** 	for (n = 0; n < (cnt + 3) / 4; n++)
 1606              		.loc 1 469 0 discriminator 2
 1607 0024 0133     		adds	r3, r3, #1
 1608              	.LVL97:
 1609 0026 AB42     		cmp	r3, r5
 1610              		.loc 1 471 0 discriminator 2
 1611 0028 C6F81C42 		str	r4, [r6, #540]
 1612              	.LVL98:
 469:./src/usb/usbhw.c **** 	for (n = 0; n < (cnt + 3) / 4; n++)
 1613              		.loc 1 469 0 discriminator 2
 1614 002c F8D1     		bne	.L171
 1615              	.LVL99:
 1616              	.L170:
 472:./src/usb/usbhw.c **** 		pData += 4;
 473:./src/usb/usbhw.c **** 	}
 474:./src/usb/usbhw.c **** 	LPC_USB->USBCtrl = 0;
 1617              		.loc 1 474 0
 1618 002e 044B     		ldr	r3, .L174
 1619 0030 0022     		movs	r2, #0
 1620              	.LVL100:
 1621 0032 C3F82822 		str	r2, [r3, #552]
 475:./src/usb/usbhw.c **** 	WrCmdEP(EPNum, CMD_VALID_BUF);
 1622              		.loc 1 475 0
 1623 0036 0349     		ldr	r1, .L174+4
 1624              	.LVL101:
 1625 0038 FFF7FEFF 		bl	WrCmdEP
 1626              	.LVL102:
 476:./src/usb/usbhw.c **** 	return (cnt);
 477:./src/usb/usbhw.c **** }
 1627              		.loc 1 477 0
 1628 003c 3846     		mov	r0, r7
 1629 003e F8BD     		pop	{r3, r4, r5, r6, r7, pc}
 1630              	.LVL103:
 1631              	.L175:
 1632              		.align	2
 1633              	.L174:
 1634 0040 00C00050 		.word	1342226432
 1635 0044 0005FA00 		.word	16385280
 1636              		.cfi_endproc
 1637              	.LFE78:
 1639              		.section	.text.USB_GetFrame,"ax",%progbits
 1640              		.align	2
 1641              		.global	USB_GetFrame
 1642              		.thumb
 1643              		.thumb_func
 1645              	USB_GetFrame:
 1646              	.LFB79:
 478:./src/usb/usbhw.c **** 
 479:./src/usb/usbhw.c **** #if USB_DMA
 480:./src/usb/usbhw.c **** 
 481:./src/usb/usbhw.c **** /* DMA Descriptor Memory Layout */
 482:./src/usb/usbhw.c **** const uint32_t DDAdr[2] =
 483:./src/usb/usbhw.c **** {	DD_NISO_ADR, DD_ISO_ADR};
 484:./src/usb/usbhw.c **** const uint32_t DDSz [2] =
 485:./src/usb/usbhw.c **** {	16, 20};
 486:./src/usb/usbhw.c **** 
 487:./src/usb/usbhw.c **** /*
 488:./src/usb/usbhw.c ****  *  Setup USB DMA Transfer for selected Endpoint
 489:./src/usb/usbhw.c ****  *    Parameters:      EPNum: Endpoint Number
 490:./src/usb/usbhw.c ****  *                     pDD: Pointer to DMA Descriptor
 491:./src/usb/usbhw.c ****  *    Return Value:    TRUE - Success, FALSE - Error
 492:./src/usb/usbhw.c ****  */
 493:./src/usb/usbhw.c **** 
 494:./src/usb/usbhw.c **** uint32_t USB_DMA_Setup(uint32_t EPNum, USB_DMA_DESCRIPTOR *pDD)
 495:./src/usb/usbhw.c **** {
 496:./src/usb/usbhw.c **** 	uint32_t num, ptr, nxt, iso, n;
 497:./src/usb/usbhw.c **** 
 498:./src/usb/usbhw.c **** 	iso = pDD->Cfg.Type.IsoEP; /* Iso or Non-Iso Descriptor */
 499:./src/usb/usbhw.c **** 	num = EPAdr(EPNum); /* Endpoint's Physical Address */
 500:./src/usb/usbhw.c **** 
 501:./src/usb/usbhw.c **** 	ptr = 0; /* Current Descriptor */
 502:./src/usb/usbhw.c **** 	nxt = udca[num]; /* Initial Descriptor */
 503:./src/usb/usbhw.c **** 	while (nxt)
 504:./src/usb/usbhw.c **** 	{ /* Go through Descriptor List */
 505:./src/usb/usbhw.c **** 		ptr = nxt; /* Current Descriptor */
 506:./src/usb/usbhw.c **** 		if (!pDD->Cfg.Type.Link)
 507:./src/usb/usbhw.c **** 		{ /* Check for Linked Descriptors */
 508:./src/usb/usbhw.c **** 			n = (ptr - DDAdr[iso]) / DDSz[iso]; /* Descriptor Index */
 509:./src/usb/usbhw.c **** 			DDMemMap[iso] &= ~(1 << n); /* Unmark Memory Usage */
 510:./src/usb/usbhw.c **** 		}
 511:./src/usb/usbhw.c **** 		nxt = *((uint32_t *)ptr); /* Next Descriptor */
 512:./src/usb/usbhw.c **** 	}
 513:./src/usb/usbhw.c **** 
 514:./src/usb/usbhw.c **** 	for (n = 0; n < 32; n++)
 515:./src/usb/usbhw.c **** 	{ /* Search for available Memory */
 516:./src/usb/usbhw.c **** 		if ((DDMemMap[iso] & (1 << n)) == 0)
 517:./src/usb/usbhw.c **** 		{
 518:./src/usb/usbhw.c **** 			break; /* Memory found */
 519:./src/usb/usbhw.c **** 		}
 520:./src/usb/usbhw.c **** 	}
 521:./src/usb/usbhw.c **** 	if (n == 32) return (FALSE); /* Memory not available */
 522:./src/usb/usbhw.c **** 
 523:./src/usb/usbhw.c **** 	DDMemMap[iso] |= 1 << n; /* Mark Memory Usage */
 524:./src/usb/usbhw.c **** 	nxt = DDAdr[iso] + n * DDSz[iso]; /* Next Descriptor */
 525:./src/usb/usbhw.c **** 
 526:./src/usb/usbhw.c **** 	if (ptr && pDD->Cfg.Type.Link)
 527:./src/usb/usbhw.c **** 	{
 528:./src/usb/usbhw.c **** 		*((uint32_t *)(ptr + 0)) = nxt; /* Link in new Descriptor */
 529:./src/usb/usbhw.c **** 		*((uint32_t *)(ptr + 4)) |= 0x00000004; /* Next DD is Valid */
 530:./src/usb/usbhw.c **** 	}
 531:./src/usb/usbhw.c **** 	else
 532:./src/usb/usbhw.c **** 	{
 533:./src/usb/usbhw.c **** 		udca[num] = nxt; /* Save new Descriptor */
 534:./src/usb/usbhw.c **** 		UDCA[num] = nxt; /* Update UDCA in USB */
 535:./src/usb/usbhw.c **** 	}
 536:./src/usb/usbhw.c **** 
 537:./src/usb/usbhw.c **** 	/* Fill in DMA Descriptor */
 538:./src/usb/usbhw.c **** 	*(((uint32_t *)nxt)++) = 0; /* Next DD Pointer */
 539:./src/usb/usbhw.c **** 	*(((uint32_t *)nxt)++) = pDD->Cfg.Type.ATLE |
 540:./src/usb/usbhw.c **** 	(pDD->Cfg.Type.IsoEP << 4) |
 541:./src/usb/usbhw.c **** 	(pDD->MaxSize << 5) |
 542:./src/usb/usbhw.c **** 	(pDD->BufLen << 16);
 543:./src/usb/usbhw.c **** 	*(((uint32_t *)nxt)++) = pDD->BufAdr;
 544:./src/usb/usbhw.c **** 	*(((uint32_t *)nxt)++) = pDD->Cfg.Type.LenPos << 8;
 545:./src/usb/usbhw.c **** 	if (iso)
 546:./src/usb/usbhw.c **** 	{
 547:./src/usb/usbhw.c **** 		*((uint32_t *)nxt) = pDD->InfoAdr;
 548:./src/usb/usbhw.c **** 	}
 549:./src/usb/usbhw.c **** 
 550:./src/usb/usbhw.c **** 	return (TRUE); /* Success */
 551:./src/usb/usbhw.c **** }
 552:./src/usb/usbhw.c **** 
 553:./src/usb/usbhw.c **** /*
 554:./src/usb/usbhw.c ****  *  Enable USB DMA Endpoint
 555:./src/usb/usbhw.c ****  *    Parameters:      EPNum: Endpoint Number
 556:./src/usb/usbhw.c ****  *                       EPNum.0..3: Address
 557:./src/usb/usbhw.c ****  *                       EPNum.7:    Dir
 558:./src/usb/usbhw.c ****  *    Return Value:    None
 559:./src/usb/usbhw.c ****  */
 560:./src/usb/usbhw.c **** 
 561:./src/usb/usbhw.c **** void USB_DMA_Enable (uint32_t EPNum)
 562:./src/usb/usbhw.c **** {
 563:./src/usb/usbhw.c **** 	LPC_USB->USBEpDMAEn = 1 << EPAdr(EPNum);
 564:./src/usb/usbhw.c **** }
 565:./src/usb/usbhw.c **** 
 566:./src/usb/usbhw.c **** /*
 567:./src/usb/usbhw.c ****  *  Disable USB DMA Endpoint
 568:./src/usb/usbhw.c ****  *    Parameters:      EPNum: Endpoint Number
 569:./src/usb/usbhw.c ****  *                       EPNum.0..3: Address
 570:./src/usb/usbhw.c ****  *                       EPNum.7:    Dir
 571:./src/usb/usbhw.c ****  *    Return Value:    None
 572:./src/usb/usbhw.c ****  */
 573:./src/usb/usbhw.c **** 
 574:./src/usb/usbhw.c **** void USB_DMA_Disable (uint32_t EPNum)
 575:./src/usb/usbhw.c **** {
 576:./src/usb/usbhw.c **** 	LPC_USB->USBEpDMADis = 1 << EPAdr(EPNum);
 577:./src/usb/usbhw.c **** }
 578:./src/usb/usbhw.c **** 
 579:./src/usb/usbhw.c **** /*
 580:./src/usb/usbhw.c ****  *  Get USB DMA Endpoint Status
 581:./src/usb/usbhw.c ****  *    Parameters:      EPNum: Endpoint Number
 582:./src/usb/usbhw.c ****  *                       EPNum.0..3: Address
 583:./src/usb/usbhw.c ****  *                       EPNum.7:    Dir
 584:./src/usb/usbhw.c ****  *    Return Value:    DMA Status
 585:./src/usb/usbhw.c ****  */
 586:./src/usb/usbhw.c **** 
 587:./src/usb/usbhw.c **** uint32_t USB_DMA_Status (uint32_t EPNum)
 588:./src/usb/usbhw.c **** {
 589:./src/usb/usbhw.c **** 	uint32_t ptr, val;
 590:./src/usb/usbhw.c **** 
 591:./src/usb/usbhw.c **** 	ptr = UDCA[EPAdr(EPNum)]; /* Current Descriptor */
 592:./src/usb/usbhw.c **** 	if (ptr == 0)
 593:./src/usb/usbhw.c **** 	return (USB_DMA_INVALID);
 594:./src/usb/usbhw.c **** 
 595:./src/usb/usbhw.c **** 	val = *((uint32_t *)(ptr + 3*4)); /* Status Information */
 596:./src/usb/usbhw.c **** 	switch ((val >> 1) & 0x0F)
 597:./src/usb/usbhw.c **** 	{
 598:./src/usb/usbhw.c **** 		case 0x00: /* Not serviced */
 599:./src/usb/usbhw.c **** 		return (USB_DMA_IDLE);
 600:./src/usb/usbhw.c **** 		case 0x01: /* Being serviced */
 601:./src/usb/usbhw.c **** 		return (USB_DMA_BUSY);
 602:./src/usb/usbhw.c **** 		case 0x02: /* Normal Completition */
 603:./src/usb/usbhw.c **** 		return (USB_DMA_DONE);
 604:./src/usb/usbhw.c **** 		case 0x03: /* Data Under Run */
 605:./src/usb/usbhw.c **** 		return (USB_DMA_UNDER_RUN);
 606:./src/usb/usbhw.c **** 		case 0x08: /* Data Over Run */
 607:./src/usb/usbhw.c **** 		return (USB_DMA_OVER_RUN);
 608:./src/usb/usbhw.c **** 		case 0x09: /* System Error */
 609:./src/usb/usbhw.c **** 		return (USB_DMA_ERROR);
 610:./src/usb/usbhw.c **** 	}
 611:./src/usb/usbhw.c **** 
 612:./src/usb/usbhw.c **** 	return (USB_DMA_UNKNOWN);
 613:./src/usb/usbhw.c **** }
 614:./src/usb/usbhw.c **** 
 615:./src/usb/usbhw.c **** /*
 616:./src/usb/usbhw.c ****  *  Get USB DMA Endpoint Current Buffer Address
 617:./src/usb/usbhw.c ****  *    Parameters:      EPNum: Endpoint Number
 618:./src/usb/usbhw.c ****  *                       EPNum.0..3: Address
 619:./src/usb/usbhw.c ****  *                       EPNum.7:    Dir
 620:./src/usb/usbhw.c ****  *    Return Value:    DMA Address (or -1 when DMA is Invalid)
 621:./src/usb/usbhw.c ****  */
 622:./src/usb/usbhw.c **** 
 623:./src/usb/usbhw.c **** uint32_t USB_DMA_BufAdr (uint32_t EPNum)
 624:./src/usb/usbhw.c **** {
 625:./src/usb/usbhw.c **** 	uint32_t ptr, val;
 626:./src/usb/usbhw.c **** 
 627:./src/usb/usbhw.c **** 	ptr = UDCA[EPAdr(EPNum)]; /* Current Descriptor */
 628:./src/usb/usbhw.c **** 	if (ptr == 0)
 629:./src/usb/usbhw.c **** 	{
 630:./src/usb/usbhw.c **** 		return ((uint32_t)(-1)); /* DMA Invalid */
 631:./src/usb/usbhw.c **** 	}
 632:./src/usb/usbhw.c **** 
 633:./src/usb/usbhw.c **** 	val = *((uint32_t *)(ptr + 2*4)); /* Buffer Address */
 634:./src/usb/usbhw.c **** 	return (val); /* Current Address */
 635:./src/usb/usbhw.c **** }
 636:./src/usb/usbhw.c **** 
 637:./src/usb/usbhw.c **** /*
 638:./src/usb/usbhw.c ****  *  Get USB DMA Endpoint Current Buffer Count
 639:./src/usb/usbhw.c ****  *   Number of transfered Bytes or Iso Packets
 640:./src/usb/usbhw.c ****  *    Parameters:      EPNum: Endpoint Number
 641:./src/usb/usbhw.c ****  *                       EPNum.0..3: Address
 642:./src/usb/usbhw.c ****  *                       EPNum.7:    Dir
 643:./src/usb/usbhw.c ****  *    Return Value:    DMA Count (or -1 when DMA is Invalid)
 644:./src/usb/usbhw.c ****  */
 645:./src/usb/usbhw.c **** 
 646:./src/usb/usbhw.c **** uint32_t USB_DMA_BufCnt (uint32_t EPNum)
 647:./src/usb/usbhw.c **** {
 648:./src/usb/usbhw.c **** 	uint32_t ptr, val;
 649:./src/usb/usbhw.c **** 
 650:./src/usb/usbhw.c **** 	ptr = UDCA[EPAdr(EPNum)]; /* Current Descriptor */
 651:./src/usb/usbhw.c **** 	if (ptr == 0)
 652:./src/usb/usbhw.c **** 	{
 653:./src/usb/usbhw.c **** 		return ((uint32_t)(-1)); /* DMA Invalid */
 654:./src/usb/usbhw.c **** 	}
 655:./src/usb/usbhw.c **** 	val = *((uint32_t *)(ptr + 3*4)); /* Status Information */
 656:./src/usb/usbhw.c **** 	return (val >> 16); /* Current Count */
 657:./src/usb/usbhw.c **** }
 658:./src/usb/usbhw.c **** 
 659:./src/usb/usbhw.c **** #endif /* USB_DMA */
 660:./src/usb/usbhw.c **** 
 661:./src/usb/usbhw.c **** /*
 662:./src/usb/usbhw.c ****  *  Get USB Last Frame Number
 663:./src/usb/usbhw.c ****  *    Parameters:      None
 664:./src/usb/usbhw.c ****  *    Return Value:    Frame Number
 665:./src/usb/usbhw.c ****  */
 666:./src/usb/usbhw.c **** 
 667:./src/usb/usbhw.c **** uint32_t USB_GetFrame(void)
 668:./src/usb/usbhw.c **** {
 1647              		.loc 1 668 0
 1648              		.cfi_startproc
 1649              		@ args = 0, pretend = 0, frame = 0
 1650              		@ frame_needed = 0, uses_anonymous_args = 0
 1651              		@ link register save eliminated.
 1652              	.LVL104:
 1653              	.LBB148:
 1654              	.LBB149:
  81:./src/usb/usbhw.c **** 	LPC_USB->USBDevIntClr = CCEMTY_INT;
 1655              		.loc 1 81 0
 1656 0000 174B     		ldr	r3, .L183
  82:./src/usb/usbhw.c **** 	LPC_USB->USBCmdCode = cmd;
 1657              		.loc 1 82 0
 1658 0002 184A     		ldr	r2, .L183+4
  81:./src/usb/usbhw.c **** 	LPC_USB->USBDevIntClr = CCEMTY_INT;
 1659              		.loc 1 81 0
 1660 0004 1021     		movs	r1, #16
 1661              	.LBE149:
 1662              	.LBE148:
 1663              		.loc 1 668 0
 1664 0006 10B4     		push	{r4}
 1665              		.cfi_def_cfa_offset 4
 1666              		.cfi_offset 4, -4
 1667              	.LBB151:
 1668              	.LBB150:
  81:./src/usb/usbhw.c **** 	LPC_USB->USBDevIntClr = CCEMTY_INT;
 1669              		.loc 1 81 0
 1670 0008 C3F80812 		str	r1, [r3, #520]
  83:./src/usb/usbhw.c **** 	while ((LPC_USB->USBDevIntSt & CCEMTY_INT) == 0)
 1671              		.loc 1 83 0
 1672 000c 1946     		mov	r1, r3
  82:./src/usb/usbhw.c **** 	LPC_USB->USBCmdCode = cmd;
 1673              		.loc 1 82 0
 1674 000e C3F81022 		str	r2, [r3, #528]
 1675              	.L178:
  83:./src/usb/usbhw.c **** 	while ((LPC_USB->USBDevIntSt & CCEMTY_INT) == 0)
 1676              		.loc 1 83 0
 1677 0012 D1F80032 		ldr	r3, [r1, #512]
 1678 0016 124A     		ldr	r2, .L183
 1679 0018 DC06     		lsls	r4, r3, #27
 1680 001a FAD5     		bpl	.L178
 1681              	.LVL105:
 1682              	.LBE150:
 1683              	.LBE151:
 1684              	.LBB152:
 1685              	.LBB153:
 137:./src/usb/usbhw.c **** 	LPC_USB->USBCmdCode = cmd;
 1686              		.loc 1 137 0
 1687 001c 124B     		ldr	r3, .L183+8
 136:./src/usb/usbhw.c **** 	LPC_USB->USBDevIntClr = CCEMTY_INT | CDFULL_INT;
 1688              		.loc 1 136 0
 1689 001e 3021     		movs	r1, #48
 1690 0020 C2F80812 		str	r1, [r2, #520]
 138:./src/usb/usbhw.c **** 	while ((LPC_USB->USBDevIntSt & CDFULL_INT) == 0)
 1691              		.loc 1 138 0
 1692 0024 1146     		mov	r1, r2
 137:./src/usb/usbhw.c **** 	LPC_USB->USBCmdCode = cmd;
 1693              		.loc 1 137 0
 1694 0026 C2F81032 		str	r3, [r2, #528]
 1695              	.L180:
 138:./src/usb/usbhw.c **** 	while ((LPC_USB->USBDevIntSt & CDFULL_INT) == 0)
 1696              		.loc 1 138 0
 1697 002a D1F80032 		ldr	r3, [r1, #512]
 1698 002e 0C4A     		ldr	r2, .L183
 1699 0030 9806     		lsls	r0, r3, #26
 1700 0032 FAD5     		bpl	.L180
 1701              	.LBE153:
 1702              	.LBE152:
 1703              	.LBB155:
 1704              	.LBB156:
 137:./src/usb/usbhw.c **** 	LPC_USB->USBCmdCode = cmd;
 1705              		.loc 1 137 0
 1706 0034 0C4B     		ldr	r3, .L183+8
 136:./src/usb/usbhw.c **** 	LPC_USB->USBDevIntClr = CCEMTY_INT | CDFULL_INT;
 1707              		.loc 1 136 0
 1708 0036 3024     		movs	r4, #48
 1709              	.LBE156:
 1710              	.LBE155:
 1711              	.LBB158:
 1712              	.LBB154:
 140:./src/usb/usbhw.c **** 	return (LPC_USB->USBCmdData);
 1713              		.loc 1 140 0
 1714 0038 D2F81402 		ldr	r0, [r2, #532]
 1715              	.LVL106:
 1716              	.LBE154:
 1717              	.LBE158:
 1718              	.LBB159:
 1719              	.LBB157:
 138:./src/usb/usbhw.c **** 	while ((LPC_USB->USBDevIntSt & CDFULL_INT) == 0)
 1720              		.loc 1 138 0
 1721 003c 1146     		mov	r1, r2
 136:./src/usb/usbhw.c **** 	LPC_USB->USBDevIntClr = CCEMTY_INT | CDFULL_INT;
 1722              		.loc 1 136 0
 1723 003e C2F80842 		str	r4, [r2, #520]
 137:./src/usb/usbhw.c **** 	LPC_USB->USBCmdCode = cmd;
 1724              		.loc 1 137 0
 1725 0042 C2F81032 		str	r3, [r2, #528]
 1726              	.L182:
 138:./src/usb/usbhw.c **** 	while ((LPC_USB->USBDevIntSt & CDFULL_INT) == 0)
 1727              		.loc 1 138 0
 1728 0046 D1F80032 		ldr	r3, [r1, #512]
 1729 004a 054A     		ldr	r2, .L183
 1730 004c 9B06     		lsls	r3, r3, #26
 1731 004e FAD5     		bpl	.L182
 140:./src/usb/usbhw.c **** 	return (LPC_USB->USBCmdData);
 1732              		.loc 1 140 0
 1733 0050 D2F81432 		ldr	r3, [r2, #532]
 1734              	.LVL107:
 1735              	.LBE157:
 1736              	.LBE159:
 669:./src/usb/usbhw.c **** 	uint32_t val;
 670:./src/usb/usbhw.c **** 
 671:./src/usb/usbhw.c **** 	WrCmd(CMD_RD_FRAME);
 672:./src/usb/usbhw.c **** 	val = RdCmdDat(DAT_RD_FRAME);
 673:./src/usb/usbhw.c **** 	val = val | (RdCmdDat(DAT_RD_FRAME) << 8);
 674:./src/usb/usbhw.c **** 
 675:./src/usb/usbhw.c **** 	return (val);
 676:./src/usb/usbhw.c **** }
 1737              		.loc 1 676 0
 1738 0054 5DF8044B 		ldr	r4, [sp], #4
 1739 0058 40EA0320 		orr	r0, r0, r3, lsl #8
 1740              	.LVL108:
 1741 005c 7047     		bx	lr
 1742              	.L184:
 1743 005e 00BF     		.align	2
 1744              	.L183:
 1745 0060 00C00050 		.word	1342226432
 1746 0064 0005F500 		.word	16057600
 1747 0068 0002F500 		.word	16056832
 1748              		.cfi_endproc
 1749              	.LFE79:
 1751              		.section	.text.USB_IRQHandler,"ax",%progbits
 1752              		.align	2
 1753              		.global	USB_IRQHandler
 1754              		.thumb
 1755              		.thumb_func
 1757              	USB_IRQHandler:
 1758              	.LFB80:
 677:./src/usb/usbhw.c **** 
 678:./src/usb/usbhw.c **** /*
 679:./src/usb/usbhw.c ****  *  USB Interrupt Service Routine
 680:./src/usb/usbhw.c ****  */
 681:./src/usb/usbhw.c **** 
 682:./src/usb/usbhw.c **** void USB_IRQHandler(void)
 683:./src/usb/usbhw.c **** {
 1759              		.loc 1 683 0
 1760              		.cfi_startproc
 1761              		@ args = 0, pretend = 0, frame = 0
 1762              		@ frame_needed = 0, uses_anonymous_args = 0
 1763 0000 2DE9F843 		push	{r3, r4, r5, r6, r7, r8, r9, lr}
 1764              		.cfi_def_cfa_offset 32
 1765              		.cfi_offset 3, -32
 1766              		.cfi_offset 4, -28
 1767              		.cfi_offset 5, -24
 1768              		.cfi_offset 6, -20
 1769              		.cfi_offset 7, -16
 1770              		.cfi_offset 8, -12
 1771              		.cfi_offset 9, -8
 1772              		.cfi_offset 14, -4
 684:./src/usb/usbhw.c **** 	uint32_t disr, val, n, m;
 685:./src/usb/usbhw.c **** 	uint32_t episr, episrCur;
 686:./src/usb/usbhw.c **** 
 687:./src/usb/usbhw.c **** 	disr = LPC_USB->USBDevIntSt; /* Device Interrupt Status */
 1773              		.loc 1 687 0
 1774 0004 3B4C     		ldr	r4, .L220
 1775 0006 D4F80032 		ldr	r3, [r4, #512]
 1776              	.LVL109:
 688:./src/usb/usbhw.c **** 
 689:./src/usb/usbhw.c **** 	/* Device Status Interrupt (Reset, Connect change, Suspend/Resume) */
 690:./src/usb/usbhw.c **** 	if (disr & DEV_STAT_INT)
 1777              		.loc 1 690 0
 1778 000a 13F00805 		ands	r5, r3, #8
 1779 000e 3ED0     		beq	.L186
 1780              	.LBB160:
 1781              	.LBB161:
  82:./src/usb/usbhw.c **** 	LPC_USB->USBCmdCode = cmd;
 1782              		.loc 1 82 0
 1783 0010 394B     		ldr	r3, .L220+4
 1784              	.LVL110:
 1785              	.LBE161:
 1786              	.LBE160:
 691:./src/usb/usbhw.c **** 	{
 692:./src/usb/usbhw.c **** 		LPC_USB->USBDevIntClr = DEV_STAT_INT;
 1787              		.loc 1 692 0
 1788 0012 0821     		movs	r1, #8
 1789              	.LBB164:
 1790              	.LBB162:
  81:./src/usb/usbhw.c **** 	LPC_USB->USBDevIntClr = CCEMTY_INT;
 1791              		.loc 1 81 0
 1792 0014 1022     		movs	r2, #16
 1793              	.LBE162:
 1794              	.LBE164:
 1795              		.loc 1 692 0
 1796 0016 C4F80812 		str	r1, [r4, #520]
 1797              	.LVL111:
 1798              	.LBB165:
 1799              	.LBB163:
  81:./src/usb/usbhw.c **** 	LPC_USB->USBDevIntClr = CCEMTY_INT;
 1800              		.loc 1 81 0
 1801 001a C4F80822 		str	r2, [r4, #520]
  83:./src/usb/usbhw.c **** 	while ((LPC_USB->USBDevIntSt & CCEMTY_INT) == 0)
 1802              		.loc 1 83 0
 1803 001e 2146     		mov	r1, r4
  82:./src/usb/usbhw.c **** 	LPC_USB->USBCmdCode = cmd;
 1804              		.loc 1 82 0
 1805 0020 C4F81032 		str	r3, [r4, #528]
 1806              	.L188:
  83:./src/usb/usbhw.c **** 	while ((LPC_USB->USBDevIntSt & CCEMTY_INT) == 0)
 1807              		.loc 1 83 0
 1808 0024 D1F80032 		ldr	r3, [r1, #512]
 1809 0028 324A     		ldr	r2, .L220
 1810 002a DF06     		lsls	r7, r3, #27
 1811 002c FAD5     		bpl	.L188
 1812              	.LVL112:
 1813              	.LBE163:
 1814              	.LBE165:
 1815              	.LBB166:
 1816              	.LBB167:
 137:./src/usb/usbhw.c **** 	LPC_USB->USBCmdCode = cmd;
 1817              		.loc 1 137 0
 1818 002e 334B     		ldr	r3, .L220+8
 136:./src/usb/usbhw.c **** 	LPC_USB->USBDevIntClr = CCEMTY_INT | CDFULL_INT;
 1819              		.loc 1 136 0
 1820 0030 3021     		movs	r1, #48
 1821 0032 C2F80812 		str	r1, [r2, #520]
 138:./src/usb/usbhw.c **** 	while ((LPC_USB->USBDevIntSt & CDFULL_INT) == 0)
 1822              		.loc 1 138 0
 1823 0036 1146     		mov	r1, r2
 137:./src/usb/usbhw.c **** 	LPC_USB->USBCmdCode = cmd;
 1824              		.loc 1 137 0
 1825 0038 C2F81032 		str	r3, [r2, #528]
 1826              	.L190:
 138:./src/usb/usbhw.c **** 	while ((LPC_USB->USBDevIntSt & CDFULL_INT) == 0)
 1827              		.loc 1 138 0
 1828 003c D1F80032 		ldr	r3, [r1, #512]
 1829 0040 2C4A     		ldr	r2, .L220
 1830 0042 9E06     		lsls	r6, r3, #26
 1831 0044 FAD5     		bpl	.L190
 140:./src/usb/usbhw.c **** 	return (LPC_USB->USBCmdData);
 1832              		.loc 1 140 0
 1833 0046 D2F81432 		ldr	r3, [r2, #532]
 1834              	.LBE167:
 1835              	.LBE166:
 693:./src/usb/usbhw.c **** 		WrCmd(CMD_GET_DEV_STAT);
 694:./src/usb/usbhw.c **** 		val = RdCmdDat(DAT_GET_DEV_STAT); /* Device Status */
 695:./src/usb/usbhw.c **** 		if (val & DEV_RST)
 1836              		.loc 1 695 0
 1837 004a DD06     		lsls	r5, r3, #27
 1838 004c 21D5     		bpl	.L185
 1839              	.LBB168:
 1840              	.LBB169:
 197:./src/usb/usbhw.c **** 	LPC_USB->USBEpInd = 0;
 1841              		.loc 1 197 0
 1842 004e 0021     		movs	r1, #0
 198:./src/usb/usbhw.c **** 	LPC_USB->USBMaxPSize = USB_MAX_PACKET0;
 1843              		.loc 1 198 0
 1844 0050 0823     		movs	r3, #8
 199:./src/usb/usbhw.c **** 	LPC_USB->USBEpInd = 1;
 1845              		.loc 1 199 0
 1846 0052 0120     		movs	r0, #1
 197:./src/usb/usbhw.c **** 	LPC_USB->USBEpInd = 0;
 1847              		.loc 1 197 0
 1848 0054 C2F84812 		str	r1, [r2, #584]
 198:./src/usb/usbhw.c **** 	LPC_USB->USBMaxPSize = USB_MAX_PACKET0;
 1849              		.loc 1 198 0
 1850 0058 C2F84C32 		str	r3, [r2, #588]
 201:./src/usb/usbhw.c **** 	while ((LPC_USB->USBDevIntSt & EP_RLZED_INT) == 0)
 1851              		.loc 1 201 0
 1852 005c 1146     		mov	r1, r2
 199:./src/usb/usbhw.c **** 	LPC_USB->USBEpInd = 1;
 1853              		.loc 1 199 0
 1854 005e C2F84802 		str	r0, [r2, #584]
 200:./src/usb/usbhw.c **** 	LPC_USB->USBMaxPSize = USB_MAX_PACKET0;
 1855              		.loc 1 200 0
 1856 0062 C2F84C32 		str	r3, [r2, #588]
 1857              	.L194:
 201:./src/usb/usbhw.c **** 	while ((LPC_USB->USBDevIntSt & EP_RLZED_INT) == 0)
 1858              		.loc 1 201 0
 1859 0066 D1F80032 		ldr	r3, [r1, #512]
 1860 006a 224A     		ldr	r2, .L220
 1861 006c DC05     		lsls	r4, r3, #23
 1862 006e FAD5     		bpl	.L194
 204:./src/usb/usbhw.c **** 	LPC_USB->USBEpIntClr = 0xFFFFFFFF;
 1863              		.loc 1 204 0
 1864 0070 4FF0FF33 		mov	r3, #-1
 207:./src/usb/usbhw.c **** 	LPC_USB->USBDevIntEn = DEV_STAT_INT | EP_SLOW_INT
 1865              		.loc 1 207 0
 1866 0074 0C21     		movs	r1, #12
 204:./src/usb/usbhw.c **** 	LPC_USB->USBEpIntClr = 0xFFFFFFFF;
 1867              		.loc 1 204 0
 1868 0076 C2F83832 		str	r3, [r2, #568]
 205:./src/usb/usbhw.c **** 	LPC_USB->USBEpIntEn = 0xFFFFFFFF ^ USB_DMA_EP;
 1869              		.loc 1 205 0
 1870 007a C2F83432 		str	r3, [r2, #564]
 206:./src/usb/usbhw.c **** 	LPC_USB->USBDevIntClr = 0xFFFFFFFF;
 1871              		.loc 1 206 0
 1872 007e C2F80832 		str	r3, [r2, #520]
 207:./src/usb/usbhw.c **** 	LPC_USB->USBDevIntEn = DEV_STAT_INT | EP_SLOW_INT
 1873              		.loc 1 207 0
 1874 0082 C2F80412 		str	r1, [r2, #516]
 1875              	.LBE169:
 1876              	.LBE168:
 696:./src/usb/usbhw.c **** 		{ /* Reset */
 697:./src/usb/usbhw.c **** 			USB_Reset();
 698:./src/usb/usbhw.c **** #if   USB_RESET_EVENT
 699:./src/usb/usbhw.c **** 			USB_Reset_Event();
 700:./src/usb/usbhw.c **** #endif
 701:./src/usb/usbhw.c **** 		}
 702:./src/usb/usbhw.c **** 		if (val & DEV_CON_CH)
 703:./src/usb/usbhw.c **** 		{ /* Connect change */
 704:./src/usb/usbhw.c **** #if   USB_POWER_EVENT
 705:./src/usb/usbhw.c **** 			USB_Power_Event(val & DEV_CON);
 706:./src/usb/usbhw.c **** #endif
 707:./src/usb/usbhw.c **** 		}
 708:./src/usb/usbhw.c **** 		if (val & DEV_SUS_CH)
 709:./src/usb/usbhw.c **** 		{ /* Suspend/Resume */
 710:./src/usb/usbhw.c **** 			if (val & DEV_SUS)
 711:./src/usb/usbhw.c **** 			{ /* Suspend */
 712:./src/usb/usbhw.c **** 				USB_Suspend();
 713:./src/usb/usbhw.c **** #if     USB_SUSPEND_EVENT
 714:./src/usb/usbhw.c **** 				USB_Suspend_Event();
 715:./src/usb/usbhw.c **** #endif
 716:./src/usb/usbhw.c **** 			}
 717:./src/usb/usbhw.c **** 			else
 718:./src/usb/usbhw.c **** 			{ /* Resume */
 719:./src/usb/usbhw.c **** 				USB_Resume();
 720:./src/usb/usbhw.c **** #if     USB_RESUME_EVENT
 721:./src/usb/usbhw.c **** 				USB_Resume_Event();
 722:./src/usb/usbhw.c **** #endif
 723:./src/usb/usbhw.c **** 			}
 724:./src/usb/usbhw.c **** 		}
 725:./src/usb/usbhw.c **** 		goto isr_end;
 726:./src/usb/usbhw.c **** 	}
 727:./src/usb/usbhw.c **** 
 728:./src/usb/usbhw.c **** #if USB_SOF_EVENT
 729:./src/usb/usbhw.c **** 	/* Start of Frame Interrupt */
 730:./src/usb/usbhw.c **** 	if (disr & FRAME_INT)
 731:./src/usb/usbhw.c **** 	{
 732:./src/usb/usbhw.c **** 		USB_SOF_Event();
 733:./src/usb/usbhw.c **** 	}
 734:./src/usb/usbhw.c **** #endif
 735:./src/usb/usbhw.c **** 
 736:./src/usb/usbhw.c **** #if USB_ERROR_EVENT
 737:./src/usb/usbhw.c **** 	/* Error Interrupt */
 738:./src/usb/usbhw.c **** 	if (disr & ERR_INT)
 739:./src/usb/usbhw.c **** 	{
 740:./src/usb/usbhw.c **** 		WrCmd(CMD_RD_ERR_STAT);
 741:./src/usb/usbhw.c **** 		val = RdCmdDat(DAT_RD_ERR_STAT);
 742:./src/usb/usbhw.c **** 		USB_Error_Event(val);
 743:./src/usb/usbhw.c **** 	}
 744:./src/usb/usbhw.c **** #endif
 745:./src/usb/usbhw.c **** 
 746:./src/usb/usbhw.c **** 	/* Endpoint's Slow Interrupt */
 747:./src/usb/usbhw.c **** 	if (disr & EP_SLOW_INT)
 748:./src/usb/usbhw.c **** 	{
 749:./src/usb/usbhw.c **** 		episr = LPC_USB->USBEpIntSt;
 750:./src/usb/usbhw.c **** 		for (n = 0, episrCur = 1; n < USB_EP_NUM; n++, episrCur <<= 1)
 751:./src/usb/usbhw.c **** 		{ /* Check All Endpoints */
 752:./src/usb/usbhw.c **** 			if (episr == 0)
 753:./src/usb/usbhw.c **** 				break; /* break if all EP interrupts handled */
 754:./src/usb/usbhw.c **** 			if (episr & episrCur)
 755:./src/usb/usbhw.c **** 			{
 756:./src/usb/usbhw.c **** 				episr ^= episrCur;
 757:./src/usb/usbhw.c **** 				LPC_USB->USBEpIntClr = episrCur;
 758:./src/usb/usbhw.c **** 				while ((LPC_USB->USBDevIntSt & CDFULL_INT) == 0)
 759:./src/usb/usbhw.c **** 					;
 760:./src/usb/usbhw.c **** 				val = LPC_USB->USBCmdData;
 761:./src/usb/usbhw.c **** 				if ((n & 1) == 0)
 762:./src/usb/usbhw.c **** 				{ /* OUT Endpoint */
 763:./src/usb/usbhw.c **** 					if (n == 0)
 764:./src/usb/usbhw.c **** 					{ /* Control OUT Endpoint */
 765:./src/usb/usbhw.c **** 						if (val & EP_SEL_STP)
 766:./src/usb/usbhw.c **** 						{ /* Setup Packet */
 767:./src/usb/usbhw.c **** 							m = USB_EVT_SETUP;
 768:./src/usb/usbhw.c **** 							goto usb_p_ep;
 769:./src/usb/usbhw.c **** 						}
 770:./src/usb/usbhw.c **** 					}
 771:./src/usb/usbhw.c **** 					m = USB_EVT_OUT;
 772:./src/usb/usbhw.c **** 				}
 773:./src/usb/usbhw.c **** 				else
 774:./src/usb/usbhw.c **** 				{ /* IN Endpoint */
 775:./src/usb/usbhw.c **** 					m = USB_EVT_IN;
 776:./src/usb/usbhw.c **** 				}
 777:./src/usb/usbhw.c **** 				usb_p_ep: USB_P_EP[n >> 1](m);
 778:./src/usb/usbhw.c **** 			}
 779:./src/usb/usbhw.c **** 		}
 780:./src/usb/usbhw.c **** 		LPC_USB->USBDevIntClr = EP_SLOW_INT;
 781:./src/usb/usbhw.c **** 	}
 782:./src/usb/usbhw.c **** 
 783:./src/usb/usbhw.c **** #if USB_DMA
 784:./src/usb/usbhw.c **** 
 785:./src/usb/usbhw.c **** 	if (LPC_USB->USBDMAIntSt & 0x00000001)
 786:./src/usb/usbhw.c **** 	{ /* End of Transfer Interrupt */
 787:./src/usb/usbhw.c **** 		val = LPC_USB->USBEoTIntSt;
 788:./src/usb/usbhw.c **** 		for (n = 2; n < USB_EP_NUM; n++)
 789:./src/usb/usbhw.c **** 		{ /* Check All Endpoints */
 790:./src/usb/usbhw.c **** 			if (val & (1 << n))
 791:./src/usb/usbhw.c **** 			{
 792:./src/usb/usbhw.c **** 				m = n >> 1;
 793:./src/usb/usbhw.c **** 				if ((n & 1) == 0)
 794:./src/usb/usbhw.c **** 				{ /* OUT Endpoint */
 795:./src/usb/usbhw.c **** 					if (USB_P_EP[m])
 796:./src/usb/usbhw.c **** 					{
 797:./src/usb/usbhw.c **** 						USB_P_EP[m](USB_EVT_OUT_DMA_EOT);
 798:./src/usb/usbhw.c **** 					}
 799:./src/usb/usbhw.c **** 				}
 800:./src/usb/usbhw.c **** 				else
 801:./src/usb/usbhw.c **** 				{ /* IN Endpoint */
 802:./src/usb/usbhw.c **** 					if (USB_P_EP[m])
 803:./src/usb/usbhw.c **** 					{
 804:./src/usb/usbhw.c **** 						USB_P_EP[m](USB_EVT_IN_DMA_EOT);
 805:./src/usb/usbhw.c **** 					}
 806:./src/usb/usbhw.c **** 				}
 807:./src/usb/usbhw.c **** 			}
 808:./src/usb/usbhw.c **** 		}
 809:./src/usb/usbhw.c **** 		LPC_USB->USBEoTIntClr = val;
 810:./src/usb/usbhw.c **** 	}
 811:./src/usb/usbhw.c **** 
 812:./src/usb/usbhw.c **** 	if (LPC_USB->USBDMAIntSt & 0x00000002)
 813:./src/usb/usbhw.c **** 	{ /* New DD Request Interrupt */
 814:./src/usb/usbhw.c **** 		val = LPC_USB->USBNDDRIntSt;
 815:./src/usb/usbhw.c **** 		for (n = 2; n < USB_EP_NUM; n++)
 816:./src/usb/usbhw.c **** 		{ /* Check All Endpoints */
 817:./src/usb/usbhw.c **** 			if (val & (1 << n))
 818:./src/usb/usbhw.c **** 			{
 819:./src/usb/usbhw.c **** 				m = n >> 1;
 820:./src/usb/usbhw.c **** 				if ((n & 1) == 0)
 821:./src/usb/usbhw.c **** 				{ /* OUT Endpoint */
 822:./src/usb/usbhw.c **** 					if (USB_P_EP[m])
 823:./src/usb/usbhw.c **** 					{
 824:./src/usb/usbhw.c **** 						USB_P_EP[m](USB_EVT_OUT_DMA_NDR);
 825:./src/usb/usbhw.c **** 					}
 826:./src/usb/usbhw.c **** 				}
 827:./src/usb/usbhw.c **** 				else
 828:./src/usb/usbhw.c **** 				{ /* IN Endpoint */
 829:./src/usb/usbhw.c **** 					if (USB_P_EP[m])
 830:./src/usb/usbhw.c **** 					{
 831:./src/usb/usbhw.c **** 						USB_P_EP[m](USB_EVT_IN_DMA_NDR);
 832:./src/usb/usbhw.c **** 					}
 833:./src/usb/usbhw.c **** 				}
 834:./src/usb/usbhw.c **** 			}
 835:./src/usb/usbhw.c **** 		}
 836:./src/usb/usbhw.c **** 		LPC_USB->USBNDDRIntClr = val;
 837:./src/usb/usbhw.c **** 	}
 838:./src/usb/usbhw.c **** 
 839:./src/usb/usbhw.c **** 	if (LPC_USB->USBDMAIntSt & 0x00000004)
 840:./src/usb/usbhw.c **** 	{ /* System Error Interrupt */
 841:./src/usb/usbhw.c **** 		val = LPC_USB->USBSysErrIntSt;
 842:./src/usb/usbhw.c **** 		for (n = 2; n < USB_EP_NUM; n++)
 843:./src/usb/usbhw.c **** 		{ /* Check All Endpoints */
 844:./src/usb/usbhw.c **** 			if (val & (1 << n))
 845:./src/usb/usbhw.c **** 			{
 846:./src/usb/usbhw.c **** 				m = n >> 1;
 847:./src/usb/usbhw.c **** 				if ((n & 1) == 0)
 848:./src/usb/usbhw.c **** 				{ /* OUT Endpoint */
 849:./src/usb/usbhw.c **** 					if (USB_P_EP[m])
 850:./src/usb/usbhw.c **** 					{
 851:./src/usb/usbhw.c **** 						USB_P_EP[m](USB_EVT_OUT_DMA_ERR);
 852:./src/usb/usbhw.c **** 					}
 853:./src/usb/usbhw.c **** 				}
 854:./src/usb/usbhw.c **** 				else
 855:./src/usb/usbhw.c **** 				{ /* IN Endpoint */
 856:./src/usb/usbhw.c **** 					if (USB_P_EP[m])
 857:./src/usb/usbhw.c **** 					{
 858:./src/usb/usbhw.c **** 						USB_P_EP[m](USB_EVT_IN_DMA_ERR);
 859:./src/usb/usbhw.c **** 					}
 860:./src/usb/usbhw.c **** 				}
 861:./src/usb/usbhw.c **** 			}
 862:./src/usb/usbhw.c **** 		}
 863:./src/usb/usbhw.c **** 		LPC_USB->USBSysErrIntClr = val;
 864:./src/usb/usbhw.c **** 	}
 865:./src/usb/usbhw.c **** 
 866:./src/usb/usbhw.c **** #endif /* USB_DMA */
 867:./src/usb/usbhw.c **** 
 868:./src/usb/usbhw.c **** 	isr_end: return;
 869:./src/usb/usbhw.c **** }
 1877              		.loc 1 869 0
 1878 0086 BDE8F843 		pop	{r3, r4, r5, r6, r7, r8, r9, lr}
 699:./src/usb/usbhw.c **** 			USB_Reset_Event();
 1879              		.loc 1 699 0
 1880 008a FFF7FEBF 		b	USB_Reset_Event
 1881              	.LVL113:
 1882              	.L186:
 747:./src/usb/usbhw.c **** 	if (disr & EP_SLOW_INT)
 1883              		.loc 1 747 0
 1884 008e 5807     		lsls	r0, r3, #29
 1885 0090 01D4     		bmi	.L218
 1886              	.L192:
 1887              	.LVL114:
 1888              	.L185:
 1889 0092 BDE8F883 		pop	{r3, r4, r5, r6, r7, r8, r9, pc}
 1890              	.LVL115:
 1891              	.L218:
 749:./src/usb/usbhw.c **** 		episr = LPC_USB->USBEpIntSt;
 1892              		.loc 1 749 0
 1893 0096 D4F83072 		ldr	r7, [r4, #560]
 1894              	.LVL116:
 752:./src/usb/usbhw.c **** 			if (episr == 0)
 1895              		.loc 1 752 0
 1896 009a EFB1     		cbz	r7, .L196
 777:./src/usb/usbhw.c **** 				usb_p_ep: USB_P_EP[n >> 1](m);
 1897              		.loc 1 777 0
 1898 009c DFF86080 		ldr	r8, .L220+12
 758:./src/usb/usbhw.c **** 				while ((LPC_USB->USBDevIntSt & CDFULL_INT) == 0)
 1899              		.loc 1 758 0
 1900 00a0 A146     		mov	r9, r4
 750:./src/usb/usbhw.c **** 		for (n = 0, episrCur = 1; n < USB_EP_NUM; n++, episrCur <<= 1)
 1901              		.loc 1 750 0
 1902 00a2 0126     		movs	r6, #1
 1903              	.LVL117:
 1904              	.L197:
 754:./src/usb/usbhw.c **** 			if (episr & episrCur)
 1905              		.loc 1 754 0
 1906 00a4 3E42     		tst	r6, r7
 1907 00a6 10D0     		beq	.L198
 756:./src/usb/usbhw.c **** 				episr ^= episrCur;
 1908              		.loc 1 756 0
 1909 00a8 7740     		eors	r7, r7, r6
 1910              	.LVL118:
 757:./src/usb/usbhw.c **** 				LPC_USB->USBEpIntClr = episrCur;
 1911              		.loc 1 757 0
 1912 00aa C4F83862 		str	r6, [r4, #568]
 1913              	.L200:
 758:./src/usb/usbhw.c **** 				while ((LPC_USB->USBDevIntSt & CDFULL_INT) == 0)
 1914              		.loc 1 758 0 discriminator 1
 1915 00ae D4F80032 		ldr	r3, [r4, #512]
 1916 00b2 9906     		lsls	r1, r3, #26
 1917 00b4 FBD5     		bpl	.L200
 761:./src/usb/usbhw.c **** 				if ((n & 1) == 0)
 1918              		.loc 1 761 0
 1919 00b6 EA07     		lsls	r2, r5, #31
 760:./src/usb/usbhw.c **** 				val = LPC_USB->USBCmdData;
 1920              		.loc 1 760 0
 1921 00b8 D9F81432 		ldr	r3, [r9, #532]
 1922              	.LVL119:
 761:./src/usb/usbhw.c **** 				if ((n & 1) == 0)
 1923              		.loc 1 761 0
 1924 00bc 12D4     		bmi	.L203
 771:./src/usb/usbhw.c **** 					m = USB_EVT_OUT;
 1925              		.loc 1 771 0
 1926 00be 0220     		movs	r0, #2
 763:./src/usb/usbhw.c **** 					if (n == 0)
 1927              		.loc 1 763 0
 1928 00c0 95B1     		cbz	r5, .L219
 1929              	.L201:
 1930              	.LVL120:
 777:./src/usb/usbhw.c **** 				usb_p_ep: USB_P_EP[n >> 1](m);
 1931              		.loc 1 777 0
 1932 00c2 6B08     		lsrs	r3, r5, #1
 1933              	.LVL121:
 1934 00c4 58F82330 		ldr	r3, [r8, r3, lsl #2]
 1935 00c8 9847     		blx	r3
 1936              	.LVL122:
 1937              	.L198:
 750:./src/usb/usbhw.c **** 		for (n = 0, episrCur = 1; n < USB_EP_NUM; n++, episrCur <<= 1)
 1938              		.loc 1 750 0
 1939 00ca 0135     		adds	r5, r5, #1
 1940              	.LVL123:
 1941 00cc 202D     		cmp	r5, #32
 1942 00ce 4FEA4606 		lsl	r6, r6, #1
 1943              	.LVL124:
 1944 00d2 01D0     		beq	.L196
 752:./src/usb/usbhw.c **** 			if (episr == 0)
 1945              		.loc 1 752 0
 1946 00d4 002F     		cmp	r7, #0
 1947 00d6 E5D1     		bne	.L197
 1948              	.LVL125:
 1949              	.L196:
 780:./src/usb/usbhw.c **** 		LPC_USB->USBDevIntClr = EP_SLOW_INT;
 1950              		.loc 1 780 0
 1951 00d8 064B     		ldr	r3, .L220
 1952 00da 0422     		movs	r2, #4
 1953 00dc C3F80822 		str	r2, [r3, #520]
 1954 00e0 BDE8F883 		pop	{r3, r4, r5, r6, r7, r8, r9, pc}
 1955              	.LVL126:
 1956              	.L203:
 775:./src/usb/usbhw.c **** 					m = USB_EVT_IN;
 1957              		.loc 1 775 0
 1958 00e4 0320     		movs	r0, #3
 1959 00e6 ECE7     		b	.L201
 1960              	.L219:
 771:./src/usb/usbhw.c **** 					m = USB_EVT_OUT;
 1961              		.loc 1 771 0
 1962 00e8 13F0040F 		tst	r3, #4
 1963 00ec 14BF     		ite	ne
 1964 00ee 0120     		movne	r0, #1
 1965 00f0 0220     		moveq	r0, #2
 1966 00f2 E6E7     		b	.L201
 1967              	.L221:
 1968              		.align	2
 1969              	.L220:
 1970 00f4 00C00050 		.word	1342226432
 1971 00f8 0005FE00 		.word	16647424
 1972 00fc 0002FE00 		.word	16646656
 1973 0100 00000000 		.word	USB_P_EP
 1974              		.cfi_endproc
 1975              	.LFE80:
 1977              		.text
 1978              	.Letext0:
 1979              		.file 3 "./LPC17xx/LPC17xx.h"
 1980              		.file 4 "d:\\gnu\\4_8\\arm-none-eabi\\include\\machine\\_default_types.h"
 1981              		.file 5 "d:\\gnu\\4_8\\arm-none-eabi\\include\\stdint.h"
 1982              		.file 6 "./src/usb/usb.h"
 1983              		.file 7 "./src/usb/usbcore.h"
 1984              		.file 8 "./src/usb/usbuser.h"
DEFINED SYMBOLS
                            *ABS*:00000000 usbhw.c
C:\Users\kosmos\AppData\Local\Temp\ccz2aGFq.s:19     .text.EPAdr:00000000 $t
C:\Users\kosmos\AppData\Local\Temp\ccz2aGFq.s:24     .text.EPAdr:00000000 EPAdr
C:\Users\kosmos\AppData\Local\Temp\ccz2aGFq.s:53     .text.WrCmd:00000000 $t
C:\Users\kosmos\AppData\Local\Temp\ccz2aGFq.s:58     .text.WrCmd:00000000 WrCmd
C:\Users\kosmos\AppData\Local\Temp\ccz2aGFq.s:84     .text.WrCmd:00000018 $d
C:\Users\kosmos\AppData\Local\Temp\ccz2aGFq.s:89     .text.WrCmdDat:00000000 $t
C:\Users\kosmos\AppData\Local\Temp\ccz2aGFq.s:94     .text.WrCmdDat:00000000 WrCmdDat
C:\Users\kosmos\AppData\Local\Temp\ccz2aGFq.s:141    .text.WrCmdDat:00000034 $d
C:\Users\kosmos\AppData\Local\Temp\ccz2aGFq.s:146    .text.WrCmdEP:00000000 $t
C:\Users\kosmos\AppData\Local\Temp\ccz2aGFq.s:151    .text.WrCmdEP:00000000 WrCmdEP
C:\Users\kosmos\AppData\Local\Temp\ccz2aGFq.s:224    .text.WrCmdEP:00000048 $d
C:\Users\kosmos\AppData\Local\Temp\ccz2aGFq.s:229    .text.RdCmdDat:00000000 $t
C:\Users\kosmos\AppData\Local\Temp\ccz2aGFq.s:234    .text.RdCmdDat:00000000 RdCmdDat
C:\Users\kosmos\AppData\Local\Temp\ccz2aGFq.s:264    .text.RdCmdDat:00000020 $d
C:\Users\kosmos\AppData\Local\Temp\ccz2aGFq.s:269    .text.USB_Connect:00000000 $t
C:\Users\kosmos\AppData\Local\Temp\ccz2aGFq.s:274    .text.USB_Connect:00000000 USB_Connect
C:\Users\kosmos\AppData\Local\Temp\ccz2aGFq.s:346    .text.USB_Connect:00000044 $d
C:\Users\kosmos\AppData\Local\Temp\ccz2aGFq.s:353    .text.USB_Reset:00000000 $t
C:\Users\kosmos\AppData\Local\Temp\ccz2aGFq.s:358    .text.USB_Reset:00000000 USB_Reset
C:\Users\kosmos\AppData\Local\Temp\ccz2aGFq.s:404    .text.USB_Reset:0000003c $d
C:\Users\kosmos\AppData\Local\Temp\ccz2aGFq.s:409    .text.USB_Suspend:00000000 $t
C:\Users\kosmos\AppData\Local\Temp\ccz2aGFq.s:414    .text.USB_Suspend:00000000 USB_Suspend
C:\Users\kosmos\AppData\Local\Temp\ccz2aGFq.s:426    .text.USB_Resume:00000000 $t
C:\Users\kosmos\AppData\Local\Temp\ccz2aGFq.s:431    .text.USB_Resume:00000000 USB_Resume
C:\Users\kosmos\AppData\Local\Temp\ccz2aGFq.s:443    .text.USB_WakeUp:00000000 $t
C:\Users\kosmos\AppData\Local\Temp\ccz2aGFq.s:448    .text.USB_WakeUp:00000000 USB_WakeUp
C:\Users\kosmos\AppData\Local\Temp\ccz2aGFq.s:500    .text.USB_WakeUp:0000003c $d
C:\Users\kosmos\AppData\Local\Temp\ccz2aGFq.s:510    .text.USB_WakeUpCfg:00000000 $t
C:\Users\kosmos\AppData\Local\Temp\ccz2aGFq.s:515    .text.USB_WakeUpCfg:00000000 USB_WakeUpCfg
C:\Users\kosmos\AppData\Local\Temp\ccz2aGFq.s:528    .text.USB_SetAddress:00000000 $t
C:\Users\kosmos\AppData\Local\Temp\ccz2aGFq.s:533    .text.USB_SetAddress:00000000 USB_SetAddress
C:\Users\kosmos\AppData\Local\Temp\ccz2aGFq.s:633    .text.USB_SetAddress:00000068 $d
C:\Users\kosmos\AppData\Local\Temp\ccz2aGFq.s:639    .text.USB_Init:00000000 $t
C:\Users\kosmos\AppData\Local\Temp\ccz2aGFq.s:644    .text.USB_Init:00000000 USB_Init
C:\Users\kosmos\AppData\Local\Temp\ccz2aGFq.s:793    .text.USB_Init:000000ac $d
C:\Users\kosmos\AppData\Local\Temp\ccz2aGFq.s:801    .text.USB_Configure:00000000 $t
C:\Users\kosmos\AppData\Local\Temp\ccz2aGFq.s:806    .text.USB_Configure:00000000 USB_Configure
C:\Users\kosmos\AppData\Local\Temp\ccz2aGFq.s:893    .text.USB_Configure:0000005c $d
C:\Users\kosmos\AppData\Local\Temp\ccz2aGFq.s:900    .text.USB_ConfigEP:00000000 $t
C:\Users\kosmos\AppData\Local\Temp\ccz2aGFq.s:905    .text.USB_ConfigEP:00000000 USB_ConfigEP
C:\Users\kosmos\AppData\Local\Temp\ccz2aGFq.s:969    .text.USB_ConfigEP:00000044 $d
C:\Users\kosmos\AppData\Local\Temp\ccz2aGFq.s:974    .text.USB_DirCtrlEP:00000000 $t
C:\Users\kosmos\AppData\Local\Temp\ccz2aGFq.s:979    .text.USB_DirCtrlEP:00000000 USB_DirCtrlEP
C:\Users\kosmos\AppData\Local\Temp\ccz2aGFq.s:992    .text.USB_EnableEP:00000000 $t
C:\Users\kosmos\AppData\Local\Temp\ccz2aGFq.s:997    .text.USB_EnableEP:00000000 USB_EnableEP
C:\Users\kosmos\AppData\Local\Temp\ccz2aGFq.s:1078   .text.USB_EnableEP:00000048 $d
C:\Users\kosmos\AppData\Local\Temp\ccz2aGFq.s:1083   .text.USB_DisableEP:00000000 $t
C:\Users\kosmos\AppData\Local\Temp\ccz2aGFq.s:1088   .text.USB_DisableEP:00000000 USB_DisableEP
C:\Users\kosmos\AppData\Local\Temp\ccz2aGFq.s:1168   .text.USB_DisableEP:00000048 $d
C:\Users\kosmos\AppData\Local\Temp\ccz2aGFq.s:1174   .text.USB_ResetEP:00000000 $t
C:\Users\kosmos\AppData\Local\Temp\ccz2aGFq.s:1179   .text.USB_ResetEP:00000000 USB_ResetEP
C:\Users\kosmos\AppData\Local\Temp\ccz2aGFq.s:1260   .text.USB_ResetEP:00000048 $d
C:\Users\kosmos\AppData\Local\Temp\ccz2aGFq.s:1265   .text.USB_SetStallEP:00000000 $t
C:\Users\kosmos\AppData\Local\Temp\ccz2aGFq.s:1270   .text.USB_SetStallEP:00000000 USB_SetStallEP
C:\Users\kosmos\AppData\Local\Temp\ccz2aGFq.s:1350   .text.USB_SetStallEP:00000048 $d
C:\Users\kosmos\AppData\Local\Temp\ccz2aGFq.s:1356   .text.USB_ClrStallEP:00000000 $t
C:\Users\kosmos\AppData\Local\Temp\ccz2aGFq.s:1361   .text.USB_ClrStallEP:00000000 USB_ClrStallEP
C:\Users\kosmos\AppData\Local\Temp\ccz2aGFq.s:1442   .text.USB_ClrStallEP:00000048 $d
C:\Users\kosmos\AppData\Local\Temp\ccz2aGFq.s:1447   .text.USB_ClearEPBuf:00000000 $t
C:\Users\kosmos\AppData\Local\Temp\ccz2aGFq.s:1452   .text.USB_ClearEPBuf:00000000 USB_ClearEPBuf
C:\Users\kosmos\AppData\Local\Temp\ccz2aGFq.s:1467   .text.USB_ClearEPBuf:00000008 $d
C:\Users\kosmos\AppData\Local\Temp\ccz2aGFq.s:1472   .text.USB_ReadEP:00000000 $t
C:\Users\kosmos\AppData\Local\Temp\ccz2aGFq.s:1477   .text.USB_ReadEP:00000000 USB_ReadEP
C:\Users\kosmos\AppData\Local\Temp\ccz2aGFq.s:1555   .text.USB_ReadEP:00000050 $d
C:\Users\kosmos\AppData\Local\Temp\ccz2aGFq.s:1561   .text.USB_WriteEP:00000000 $t
C:\Users\kosmos\AppData\Local\Temp\ccz2aGFq.s:1566   .text.USB_WriteEP:00000000 USB_WriteEP
C:\Users\kosmos\AppData\Local\Temp\ccz2aGFq.s:1634   .text.USB_WriteEP:00000040 $d
C:\Users\kosmos\AppData\Local\Temp\ccz2aGFq.s:1640   .text.USB_GetFrame:00000000 $t
C:\Users\kosmos\AppData\Local\Temp\ccz2aGFq.s:1645   .text.USB_GetFrame:00000000 USB_GetFrame
C:\Users\kosmos\AppData\Local\Temp\ccz2aGFq.s:1745   .text.USB_GetFrame:00000060 $d
C:\Users\kosmos\AppData\Local\Temp\ccz2aGFq.s:1752   .text.USB_IRQHandler:00000000 $t
C:\Users\kosmos\AppData\Local\Temp\ccz2aGFq.s:1757   .text.USB_IRQHandler:00000000 USB_IRQHandler
C:\Users\kosmos\AppData\Local\Temp\ccz2aGFq.s:1970   .text.USB_IRQHandler:000000f4 $d
                     .debug_frame:00000010 $d

UNDEFINED SYMBOLS
USB_DeviceStatus
USB_Reset_Event
USB_P_EP
