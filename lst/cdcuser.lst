   1              		.syntax unified
   2              		.cpu cortex-m3
   3              		.fpu softvfp
   4              		.eabi_attribute 20, 1
   5              		.eabi_attribute 21, 1
   6              		.eabi_attribute 23, 3
   7              		.eabi_attribute 24, 1
   8              		.eabi_attribute 25, 1
   9              		.eabi_attribute 26, 1
  10              		.eabi_attribute 30, 2
  11              		.eabi_attribute 34, 1
  12              		.eabi_attribute 18, 4
  13              		.thumb
  14              		.file	"cdcuser.c"
  15              		.text
  16              	.Ltext0:
  17              		.cfi_sections	.debug_frame
  18              		.section	.text.CDC_RdOutBuf,"ax",%progbits
  19              		.align	2
  20              		.global	CDC_RdOutBuf
  21              		.thumb
  22              		.thumb_func
  24              	CDC_RdOutBuf:
  25              	.LFB55:
  26              		.file 1 "./src/usb/cdcuser.c"
   1:./src/usb/cdcuser.c **** /*----------------------------------------------------------------------------
   2:./src/usb/cdcuser.c ****  *      U S B  -  K e r n e l
   3:./src/usb/cdcuser.c ****  *----------------------------------------------------------------------------
   4:./src/usb/cdcuser.c ****  *      Name:    cdcuser.c
   5:./src/usb/cdcuser.c ****  *      Purpose: USB Communication Device Class User module
   6:./src/usb/cdcuser.c ****  *      Version: V1.10
   7:./src/usb/cdcuser.c ****  *----------------------------------------------------------------------------
   8:./src/usb/cdcuser.c **** *      This software is supplied "AS IS" without any warranties, express,
   9:./src/usb/cdcuser.c ****  *      implied or statutory, including but not limited to the implied
  10:./src/usb/cdcuser.c ****  *      warranties of fitness for purpose, satisfactory quality and
  11:./src/usb/cdcuser.c ****  *      noninfringement. Keil extends you a royalty-free right to reproduce
  12:./src/usb/cdcuser.c ****  *      and distribute executable files created using this software for use
  13:./src/usb/cdcuser.c ****  *      on NXP Semiconductors LPC microcontroller devices only. Nothing else
  14:./src/usb/cdcuser.c ****  *      gives you the right to use this software.
  15:./src/usb/cdcuser.c ****  *
  16:./src/usb/cdcuser.c ****  * Copyright (c) 2009 Keil - An ARM Company. All rights reserved.
  17:./src/usb/cdcuser.c ****  *---------------------------------------------------------------------------*/
  18:./src/usb/cdcuser.c **** 
  19:./src/usb/cdcuser.c **** #include "lpc_types.h"
  20:./src/usb/cdcuser.c **** 
  21:./src/usb/cdcuser.c **** #include "usb.h"
  22:./src/usb/cdcuser.c **** #include "usbhw.h"
  23:./src/usb/cdcuser.c **** #include "usbcfg.h"
  24:./src/usb/cdcuser.c **** #include "usbcore.h"
  25:./src/usb/cdcuser.c **** #include "cdc.h"
  26:./src/usb/cdcuser.c **** #include "cdcuser.h"
  27:./src/usb/cdcuser.c **** #include "serial.h"
  28:./src/usb/cdcuser.c **** 
  29:./src/usb/cdcuser.c **** #include "lpc17xx_systick.h"
  30:./src/usb/cdcuser.c **** 
  31:./src/usb/cdcuser.c **** unsigned char BulkBufIn  [USB_CDC_BUFSIZE];            // Buffer to store USB IN  packet
  32:./src/usb/cdcuser.c **** unsigned char BulkBufOut [USB_CDC_BUFSIZE];            // Buffer to store USB OUT packet
  33:./src/usb/cdcuser.c **** unsigned char NotificationBuf [10];
  34:./src/usb/cdcuser.c **** 
  35:./src/usb/cdcuser.c **** CDC_LINE_CODING CDC_LineCoding  = {9600, 0, 0, 8};
  36:./src/usb/cdcuser.c **** volatile unsigned short  CDC_SerialState = 0x0000;
  37:./src/usb/cdcuser.c **** volatile unsigned short  CDC_DepInEmpty  = 1;                   // Data IN EP is empty
  38:./src/usb/cdcuser.c **** 
  39:./src/usb/cdcuser.c **** /*----------------------------------------------------------------------------
  40:./src/usb/cdcuser.c ****   We need a buffer for incomming data on USB port because USB receives
  41:./src/usb/cdcuser.c ****   much faster than  UART transmits
  42:./src/usb/cdcuser.c ****  *---------------------------------------------------------------------------*/
  43:./src/usb/cdcuser.c **** /* Buffer masks */
  44:./src/usb/cdcuser.c **** #define CDC_BUF_SIZE               (64)               // Output buffer in bytes (power 2)
  45:./src/usb/cdcuser.c ****                                                        // large enough for file transfer
  46:./src/usb/cdcuser.c **** #define CDC_BUF_MASK               (CDC_BUF_SIZE-1ul)
  47:./src/usb/cdcuser.c **** 
  48:./src/usb/cdcuser.c **** /* Buffer read / write macros */
  49:./src/usb/cdcuser.c **** #define CDC_BUF_RESET(cdcBuf)      (cdcBuf.rdIdx = cdcBuf.wrIdx = 0)
  50:./src/usb/cdcuser.c **** #define CDC_BUF_WR(cdcBuf, dataIn) (cdcBuf.data[CDC_BUF_MASK & cdcBuf.wrIdx++] = (dataIn))
  51:./src/usb/cdcuser.c **** #define CDC_BUF_RD(cdcBuf)         (cdcBuf.data[CDC_BUF_MASK & cdcBuf.rdIdx++])
  52:./src/usb/cdcuser.c **** #define CDC_BUF_EMPTY(cdcBuf)      (cdcBuf.rdIdx == cdcBuf.wrIdx)
  53:./src/usb/cdcuser.c **** #define CDC_BUF_FULL(cdcBuf)       (cdcBuf.rdIdx == cdcBuf.wrIdx+1)
  54:./src/usb/cdcuser.c **** #define CDC_BUF_COUNT(cdcBuf)      (CDC_BUF_MASK & (cdcBuf.wrIdx - cdcBuf.rdIdx))
  55:./src/usb/cdcuser.c **** 
  56:./src/usb/cdcuser.c **** 
  57:./src/usb/cdcuser.c **** // CDC output buffer
  58:./src/usb/cdcuser.c **** typedef struct __CDC_BUF_T {
  59:./src/usb/cdcuser.c ****   unsigned char data[CDC_BUF_SIZE];
  60:./src/usb/cdcuser.c ****   unsigned int wrIdx;
  61:./src/usb/cdcuser.c ****   unsigned int rdIdx;
  62:./src/usb/cdcuser.c **** } CDC_BUF_T;
  63:./src/usb/cdcuser.c **** 
  64:./src/usb/cdcuser.c **** CDC_BUF_T  CDC_OutBuf;                                 // buffer for all CDC Out data
  65:./src/usb/cdcuser.c **** 
  66:./src/usb/cdcuser.c **** /*----------------------------------------------------------------------------
  67:./src/usb/cdcuser.c ****   read data from CDC_OutBuf
  68:./src/usb/cdcuser.c ****  *---------------------------------------------------------------------------*/
  69:./src/usb/cdcuser.c **** int CDC_RdOutBuf (char *buffer, const int *length) {
  27              		.loc 1 69 0
  28              		.cfi_startproc
  29              		@ args = 0, pretend = 0, frame = 0
  30              		@ frame_needed = 0, uses_anonymous_args = 0
  31              		@ link register save eliminated.
  32              	.LVL0:
  33 0000 70B4     		push	{r4, r5, r6}
  34              		.cfi_def_cfa_offset 12
  35              		.cfi_offset 4, -12
  36              		.cfi_offset 5, -8
  37              		.cfi_offset 6, -4
  70:./src/usb/cdcuser.c ****   int bytesToRead, bytesRead;
  71:./src/usb/cdcuser.c **** 
  72:./src/usb/cdcuser.c ****   /* Read *length bytes, block if *bytes are not avaialable	*/
  73:./src/usb/cdcuser.c ****   bytesToRead = *length;
  38              		.loc 1 73 0
  39 0002 0E68     		ldr	r6, [r1]
  40              	.LVL1:
  74:./src/usb/cdcuser.c ****   bytesToRead = (bytesToRead < (*length)) ? bytesToRead : (*length);
  75:./src/usb/cdcuser.c ****   bytesRead = bytesToRead;
  76:./src/usb/cdcuser.c **** 
  77:./src/usb/cdcuser.c **** 
  78:./src/usb/cdcuser.c ****   // ... add code to check for underrun
  79:./src/usb/cdcuser.c **** 
  80:./src/usb/cdcuser.c ****   while (bytesToRead--) {
  41              		.loc 1 80 0
  42 0004 5EB1     		cbz	r6, .L5
  43 0006 074A     		ldr	r2, .L8
  44 0008 8519     		adds	r5, r0, r6
  45              	.LVL2:
  46              	.L4:
  81:./src/usb/cdcuser.c ****     *buffer++ = CDC_BUF_RD(CDC_OutBuf);
  47              		.loc 1 81 0
  48 000a 516C     		ldr	r1, [r2, #68]
  49 000c 01F03F04 		and	r4, r1, #63
  50 0010 145D     		ldrb	r4, [r2, r4]	@ zero_extendqisi2
  51 0012 0131     		adds	r1, r1, #1
  52 0014 5164     		str	r1, [r2, #68]
  53 0016 00F8014B 		strb	r4, [r0], #1
  54              	.LVL3:
  80:./src/usb/cdcuser.c ****   while (bytesToRead--) {
  55              		.loc 1 80 0
  56 001a A842     		cmp	r0, r5
  57 001c F5D1     		bne	.L4
  58              	.L5:
  82:./src/usb/cdcuser.c ****   }
  83:./src/usb/cdcuser.c ****   return (bytesRead);
  84:./src/usb/cdcuser.c **** }
  59              		.loc 1 84 0
  60 001e 3046     		mov	r0, r6
  61              	.LVL4:
  62 0020 70BC     		pop	{r4, r5, r6}
  63              	.LVL5:
  64 0022 7047     		bx	lr
  65              	.L9:
  66              		.align	2
  67              	.L8:
  68 0024 00000000 		.word	CDC_OutBuf
  69              		.cfi_endproc
  70              	.LFE55:
  72              		.section	.text.CDC_WrOutBuf,"ax",%progbits
  73              		.align	2
  74              		.global	CDC_WrOutBuf
  75              		.thumb
  76              		.thumb_func
  78              	CDC_WrOutBuf:
  79              	.LFB56:
  85:./src/usb/cdcuser.c **** 
  86:./src/usb/cdcuser.c **** /*----------------------------------------------------------------------------
  87:./src/usb/cdcuser.c ****   write data to CDC_OutBuf
  88:./src/usb/cdcuser.c ****  *---------------------------------------------------------------------------*/
  89:./src/usb/cdcuser.c **** int CDC_WrOutBuf (const char *buffer, int *length) {
  80              		.loc 1 89 0
  81              		.cfi_startproc
  82              		@ args = 0, pretend = 0, frame = 0
  83              		@ frame_needed = 0, uses_anonymous_args = 0
  84              		@ link register save eliminated.
  85              	.LVL6:
  86 0000 F0B4     		push	{r4, r5, r6, r7}
  87              		.cfi_def_cfa_offset 16
  88              		.cfi_offset 4, -16
  89              		.cfi_offset 5, -12
  90              		.cfi_offset 6, -8
  91              		.cfi_offset 7, -4
  90:./src/usb/cdcuser.c ****   int bytesToWrite, bytesWritten;
  91:./src/usb/cdcuser.c **** 
  92:./src/usb/cdcuser.c ****   // Write *length bytes
  93:./src/usb/cdcuser.c ****   bytesToWrite = *length;
  92              		.loc 1 93 0
  93 0002 0F68     		ldr	r7, [r1]
  94              	.LVL7:
  94:./src/usb/cdcuser.c ****   bytesWritten = bytesToWrite;
  95:./src/usb/cdcuser.c **** 
  96:./src/usb/cdcuser.c **** 
  97:./src/usb/cdcuser.c ****   // ... add code to check for overwrite
  98:./src/usb/cdcuser.c **** 
  99:./src/usb/cdcuser.c ****   while (bytesToWrite) {
  95              		.loc 1 99 0
  96 0004 6FB1     		cbz	r7, .L14
  97 0006 084C     		ldr	r4, .L17
  98 0008 C619     		adds	r6, r0, r7
  99 000a 226C     		ldr	r2, [r4, #64]
 100 000c 00E0     		b	.L13
 101              	.LVL8:
 102              	.L16:
 103 000e 0A46     		mov	r2, r1
 104              	.L13:
 100:./src/usb/cdcuser.c ****       CDC_BUF_WR(CDC_OutBuf, *buffer++);           // Copy Data to buffer
 105              		.loc 1 100 0
 106 0010 511C     		adds	r1, r2, #1
 107 0012 2164     		str	r1, [r4, #64]
 108 0014 10F8015B 		ldrb	r5, [r0], #1	@ zero_extendqisi2
 109              	.LVL9:
 110 0018 02F03F02 		and	r2, r2, #63
  99:./src/usb/cdcuser.c ****   while (bytesToWrite) {
 111              		.loc 1 99 0
 112 001c B042     		cmp	r0, r6
 113              		.loc 1 100 0
 114 001e A554     		strb	r5, [r4, r2]
 115              	.LVL10:
  99:./src/usb/cdcuser.c ****   while (bytesToWrite) {
 116              		.loc 1 99 0
 117 0020 F5D1     		bne	.L16
 118              	.L14:
 101:./src/usb/cdcuser.c ****       bytesToWrite--;
 102:./src/usb/cdcuser.c ****   }
 103:./src/usb/cdcuser.c **** 
 104:./src/usb/cdcuser.c ****   return (bytesWritten);
 105:./src/usb/cdcuser.c **** }
 119              		.loc 1 105 0
 120 0022 3846     		mov	r0, r7
 121              	.LVL11:
 122 0024 F0BC     		pop	{r4, r5, r6, r7}
 123              	.LVL12:
 124 0026 7047     		bx	lr
 125              	.L18:
 126              		.align	2
 127              	.L17:
 128 0028 00000000 		.word	CDC_OutBuf
 129              		.cfi_endproc
 130              	.LFE56:
 132              		.section	.text.CDC_OutBufAvailChar,"ax",%progbits
 133              		.align	2
 134              		.global	CDC_OutBufAvailChar
 135              		.thumb
 136              		.thumb_func
 138              	CDC_OutBufAvailChar:
 139              	.LFB57:
 106:./src/usb/cdcuser.c **** 
 107:./src/usb/cdcuser.c **** /*----------------------------------------------------------------------------
 108:./src/usb/cdcuser.c ****   check if character(s) are available at CDC_OutBuf
 109:./src/usb/cdcuser.c ****  *---------------------------------------------------------------------------*/
 110:./src/usb/cdcuser.c **** int CDC_OutBufAvailChar (int *availChar) {
 140              		.loc 1 110 0
 141              		.cfi_startproc
 142              		@ args = 0, pretend = 0, frame = 0
 143              		@ frame_needed = 0, uses_anonymous_args = 0
 144              		@ link register save eliminated.
 145              	.LVL13:
 111:./src/usb/cdcuser.c **** 
 112:./src/usb/cdcuser.c ****   *availChar = CDC_BUF_COUNT(CDC_OutBuf);
 146              		.loc 1 112 0
 147 0000 044B     		ldr	r3, .L20
 148 0002 1A6C     		ldr	r2, [r3, #64]
 149 0004 5B6C     		ldr	r3, [r3, #68]
 150 0006 D31A     		subs	r3, r2, r3
 151 0008 03F03F03 		and	r3, r3, #63
 152 000c 0360     		str	r3, [r0]
 113:./src/usb/cdcuser.c **** 
 114:./src/usb/cdcuser.c ****   return (0);
 115:./src/usb/cdcuser.c **** }
 153              		.loc 1 115 0
 154 000e 0020     		movs	r0, #0
 155              	.LVL14:
 156 0010 7047     		bx	lr
 157              	.L21:
 158 0012 00BF     		.align	2
 159              	.L20:
 160 0014 00000000 		.word	CDC_OutBuf
 161              		.cfi_endproc
 162              	.LFE57:
 164              		.section	.text.CDC_SendEncapsulatedCommand,"ax",%progbits
 165              		.align	2
 166              		.global	CDC_SendEncapsulatedCommand
 167              		.thumb
 168              		.thumb_func
 170              	CDC_SendEncapsulatedCommand:
 171              	.LFB59:
 116:./src/usb/cdcuser.c **** /* end Buffer handling */
 117:./src/usb/cdcuser.c **** 
 118:./src/usb/cdcuser.c **** 
 119:./src/usb/cdcuser.c **** /*----------------------------------------------------------------------------
 120:./src/usb/cdcuser.c ****   CDC Initialisation
 121:./src/usb/cdcuser.c ****   Initializes the data structures and serial port
 122:./src/usb/cdcuser.c ****   Parameters:   None
 123:./src/usb/cdcuser.c ****   Return Value: None
 124:./src/usb/cdcuser.c ****  *---------------------------------------------------------------------------*/
 125:./src/usb/cdcuser.c **** void CDC_Init (char portNum ) {
 126:./src/usb/cdcuser.c **** 
 127:./src/usb/cdcuser.c ****   if ( portNum == 0 )
 128:./src/usb/cdcuser.c ****   {
 129:./src/usb/cdcuser.c **** 	ser_OpenPort (0);
 130:./src/usb/cdcuser.c **** 	ser_InitPort0 (CDC_LineCoding.dwDTERate,
 131:./src/usb/cdcuser.c ****                 CDC_LineCoding.bDataBits,
 132:./src/usb/cdcuser.c ****                 CDC_LineCoding.bParityType,
 133:./src/usb/cdcuser.c ****                 CDC_LineCoding.bCharFormat);
 134:./src/usb/cdcuser.c ****   }
 135:./src/usb/cdcuser.c ****   else
 136:./src/usb/cdcuser.c ****   {
 137:./src/usb/cdcuser.c **** 	ser_OpenPort (1);
 138:./src/usb/cdcuser.c **** 	ser_InitPort1 (CDC_LineCoding.dwDTERate,
 139:./src/usb/cdcuser.c ****                 CDC_LineCoding.bDataBits,
 140:./src/usb/cdcuser.c ****                 CDC_LineCoding.bParityType,
 141:./src/usb/cdcuser.c ****                 CDC_LineCoding.bCharFormat);
 142:./src/usb/cdcuser.c ****   }
 143:./src/usb/cdcuser.c ****   CDC_DepInEmpty  = 1;
 144:./src/usb/cdcuser.c ****   CDC_SerialState = CDC_GetSerialState();
 145:./src/usb/cdcuser.c **** 
 146:./src/usb/cdcuser.c ****   CDC_BUF_RESET(CDC_OutBuf);
 147:./src/usb/cdcuser.c **** }
 148:./src/usb/cdcuser.c **** 
 149:./src/usb/cdcuser.c **** 
 150:./src/usb/cdcuser.c **** /*----------------------------------------------------------------------------
 151:./src/usb/cdcuser.c ****   CDC SendEncapsulatedCommand Request Callback
 152:./src/usb/cdcuser.c ****   Called automatically on CDC SEND_ENCAPSULATED_COMMAND Request
 153:./src/usb/cdcuser.c ****   Parameters:   None                          (global SetupPacket and EP0Buf)
 154:./src/usb/cdcuser.c ****   Return Value: TRUE - Success, FALSE - Error
 155:./src/usb/cdcuser.c ****  *---------------------------------------------------------------------------*/
 156:./src/usb/cdcuser.c **** uint32_t CDC_SendEncapsulatedCommand (void) {
 172              		.loc 1 156 0
 173              		.cfi_startproc
 174              		@ args = 0, pretend = 0, frame = 0
 175              		@ frame_needed = 0, uses_anonymous_args = 0
 176              		@ link register save eliminated.
 157:./src/usb/cdcuser.c **** 
 158:./src/usb/cdcuser.c ****   return (TRUE);
 159:./src/usb/cdcuser.c **** }
 177              		.loc 1 159 0
 178 0000 0120     		movs	r0, #1
 179 0002 7047     		bx	lr
 180              		.cfi_endproc
 181              	.LFE59:
 183              		.section	.text.CDC_GetEncapsulatedResponse,"ax",%progbits
 184              		.align	2
 185              		.global	CDC_GetEncapsulatedResponse
 186              		.thumb
 187              		.thumb_func
 189              	CDC_GetEncapsulatedResponse:
 190              	.LFB60:
 160:./src/usb/cdcuser.c **** 
 161:./src/usb/cdcuser.c **** 
 162:./src/usb/cdcuser.c **** /*----------------------------------------------------------------------------
 163:./src/usb/cdcuser.c ****   CDC GetEncapsulatedResponse Request Callback
 164:./src/usb/cdcuser.c ****   Called automatically on CDC Get_ENCAPSULATED_RESPONSE Request
 165:./src/usb/cdcuser.c ****   Parameters:   None                          (global SetupPacket and EP0Buf)
 166:./src/usb/cdcuser.c ****   Return Value: TRUE - Success, FALSE - Error
 167:./src/usb/cdcuser.c ****  *---------------------------------------------------------------------------*/
 168:./src/usb/cdcuser.c **** uint32_t CDC_GetEncapsulatedResponse (void) {
 191              		.loc 1 168 0
 192              		.cfi_startproc
 193              		@ args = 0, pretend = 0, frame = 0
 194              		@ frame_needed = 0, uses_anonymous_args = 0
 195              		@ link register save eliminated.
 169:./src/usb/cdcuser.c **** 
 170:./src/usb/cdcuser.c ****   /* ... add code to handle request */
 171:./src/usb/cdcuser.c ****   return (TRUE);
 172:./src/usb/cdcuser.c **** }
 196              		.loc 1 172 0
 197 0000 0120     		movs	r0, #1
 198 0002 7047     		bx	lr
 199              		.cfi_endproc
 200              	.LFE60:
 202              		.section	.text.CDC_SetCommFeature,"ax",%progbits
 203              		.align	2
 204              		.global	CDC_SetCommFeature
 205              		.thumb
 206              		.thumb_func
 208              	CDC_SetCommFeature:
 209              	.LFB61:
 173:./src/usb/cdcuser.c **** 
 174:./src/usb/cdcuser.c **** 
 175:./src/usb/cdcuser.c **** /*----------------------------------------------------------------------------
 176:./src/usb/cdcuser.c ****   CDC SetCommFeature Request Callback
 177:./src/usb/cdcuser.c ****   Called automatically on CDC Set_COMM_FATURE Request
 178:./src/usb/cdcuser.c ****   Parameters:   FeatureSelector
 179:./src/usb/cdcuser.c ****   Return Value: TRUE - Success, FALSE - Error
 180:./src/usb/cdcuser.c ****  *---------------------------------------------------------------------------*/
 181:./src/usb/cdcuser.c **** uint32_t CDC_SetCommFeature (unsigned short wFeatureSelector) {
 210              		.loc 1 181 0
 211              		.cfi_startproc
 212              		@ args = 0, pretend = 0, frame = 0
 213              		@ frame_needed = 0, uses_anonymous_args = 0
 214              		@ link register save eliminated.
 215              	.LVL15:
 182:./src/usb/cdcuser.c **** 
 183:./src/usb/cdcuser.c ****   /* ... add code to handle request */
 184:./src/usb/cdcuser.c ****   return (TRUE);
 185:./src/usb/cdcuser.c **** }
 216              		.loc 1 185 0
 217 0000 0120     		movs	r0, #1
 218              	.LVL16:
 219 0002 7047     		bx	lr
 220              		.cfi_endproc
 221              	.LFE61:
 223              		.section	.text.CDC_GetCommFeature,"ax",%progbits
 224              		.align	2
 225              		.global	CDC_GetCommFeature
 226              		.thumb
 227              		.thumb_func
 229              	CDC_GetCommFeature:
 230              	.LFB62:
 186:./src/usb/cdcuser.c **** 
 187:./src/usb/cdcuser.c **** 
 188:./src/usb/cdcuser.c **** /*----------------------------------------------------------------------------
 189:./src/usb/cdcuser.c ****   CDC GetCommFeature Request Callback
 190:./src/usb/cdcuser.c ****   Called automatically on CDC Get_COMM_FATURE Request
 191:./src/usb/cdcuser.c ****   Parameters:   FeatureSelector
 192:./src/usb/cdcuser.c ****   Return Value: TRUE - Success, FALSE - Error
 193:./src/usb/cdcuser.c ****  *---------------------------------------------------------------------------*/
 194:./src/usb/cdcuser.c **** uint32_t CDC_GetCommFeature (unsigned short wFeatureSelector) {
 231              		.loc 1 194 0
 232              		.cfi_startproc
 233              		@ args = 0, pretend = 0, frame = 0
 234              		@ frame_needed = 0, uses_anonymous_args = 0
 235              		@ link register save eliminated.
 236              	.LVL17:
 195:./src/usb/cdcuser.c **** 
 196:./src/usb/cdcuser.c ****   /* ... add code to handle request */
 197:./src/usb/cdcuser.c ****   return (TRUE);
 198:./src/usb/cdcuser.c **** }
 237              		.loc 1 198 0
 238 0000 0120     		movs	r0, #1
 239              	.LVL18:
 240 0002 7047     		bx	lr
 241              		.cfi_endproc
 242              	.LFE62:
 244              		.section	.text.CDC_ClearCommFeature,"ax",%progbits
 245              		.align	2
 246              		.global	CDC_ClearCommFeature
 247              		.thumb
 248              		.thumb_func
 250              	CDC_ClearCommFeature:
 251              	.LFB63:
 199:./src/usb/cdcuser.c **** 
 200:./src/usb/cdcuser.c **** 
 201:./src/usb/cdcuser.c **** /*----------------------------------------------------------------------------
 202:./src/usb/cdcuser.c ****   CDC ClearCommFeature Request Callback
 203:./src/usb/cdcuser.c ****   Called automatically on CDC CLEAR_COMM_FATURE Request
 204:./src/usb/cdcuser.c ****   Parameters:   FeatureSelector
 205:./src/usb/cdcuser.c ****   Return Value: TRUE - Success, FALSE - Error
 206:./src/usb/cdcuser.c ****  *---------------------------------------------------------------------------*/
 207:./src/usb/cdcuser.c **** uint32_t CDC_ClearCommFeature (unsigned short wFeatureSelector) {
 252              		.loc 1 207 0
 253              		.cfi_startproc
 254              		@ args = 0, pretend = 0, frame = 0
 255              		@ frame_needed = 0, uses_anonymous_args = 0
 256              		@ link register save eliminated.
 257              	.LVL19:
 208:./src/usb/cdcuser.c **** 
 209:./src/usb/cdcuser.c ****   /* ... add code to handle request */
 210:./src/usb/cdcuser.c ****   return (TRUE);
 211:./src/usb/cdcuser.c **** }
 258              		.loc 1 211 0
 259 0000 0120     		movs	r0, #1
 260              	.LVL20:
 261 0002 7047     		bx	lr
 262              		.cfi_endproc
 263              	.LFE63:
 265              		.section	.text.CDC_SetLineCoding,"ax",%progbits
 266              		.align	2
 267              		.global	CDC_SetLineCoding
 268              		.thumb
 269              		.thumb_func
 271              	CDC_SetLineCoding:
 272              	.LFB64:
 212:./src/usb/cdcuser.c **** 
 213:./src/usb/cdcuser.c **** 
 214:./src/usb/cdcuser.c **** /*----------------------------------------------------------------------------
 215:./src/usb/cdcuser.c ****   CDC SetLineCoding Request Callback
 216:./src/usb/cdcuser.c ****   Called automatically on CDC SET_LINE_CODING Request
 217:./src/usb/cdcuser.c ****   Parameters:   none                    (global SetupPacket and EP0Buf)
 218:./src/usb/cdcuser.c ****   Return Value: TRUE - Success, FALSE - Error
 219:./src/usb/cdcuser.c ****  *---------------------------------------------------------------------------*/
 220:./src/usb/cdcuser.c **** uint32_t CDC_SetLineCoding (void) {
 273              		.loc 1 220 0
 274              		.cfi_startproc
 275              		@ args = 0, pretend = 0, frame = 0
 276              		@ frame_needed = 0, uses_anonymous_args = 0
 277 0000 38B5     		push	{r3, r4, r5, lr}
 278              		.cfi_def_cfa_offset 16
 279              		.cfi_offset 3, -16
 280              		.cfi_offset 4, -12
 281              		.cfi_offset 5, -8
 282              		.cfi_offset 14, -4
 221:./src/usb/cdcuser.c **** 
 222:./src/usb/cdcuser.c ****   CDC_LineCoding.dwDTERate   = uEP0.EP0Buf32[0];
 283              		.loc 1 222 0
 284 0002 0C4B     		ldr	r3, .L28
 285 0004 0C4C     		ldr	r4, .L28+4
 286 0006 1A68     		ldr	r2, [r3]
 223:./src/usb/cdcuser.c **** /*
 224:./src/usb/cdcuser.c **** 		  	  	  	  	  	  	 (uEP0.EP0Buf[0] <<  0)
 225:./src/usb/cdcuser.c ****                                | (uEP0.EP0Buf[1] <<  8)
 226:./src/usb/cdcuser.c ****                                | (uEP0.EP0Buf[2] << 16)
 227:./src/usb/cdcuser.c ****                                | (uEP0.EP0Buf[3] << 24);  */
 228:./src/usb/cdcuser.c ****   CDC_LineCoding.bCharFormat =  uEP0.EP0Buf[4];
 229:./src/usb/cdcuser.c ****   CDC_LineCoding.bParityType =  uEP0.EP0Buf[5];
 287              		.loc 1 229 0
 288 0008 5979     		ldrb	r1, [r3, #5]	@ zero_extendqisi2
 228:./src/usb/cdcuser.c ****   CDC_LineCoding.bCharFormat =  uEP0.EP0Buf[4];
 289              		.loc 1 228 0
 290 000a 1D79     		ldrb	r5, [r3, #4]	@ zero_extendqisi2
 230:./src/usb/cdcuser.c ****   CDC_LineCoding.bDataBits   =  uEP0.EP0Buf[6];
 291              		.loc 1 230 0
 292 000c 9B79     		ldrb	r3, [r3, #6]	@ zero_extendqisi2
 231:./src/usb/cdcuser.c **** 
 232:./src/usb/cdcuser.c **** #if PORT_NUM
 233:./src/usb/cdcuser.c ****   ser_ClosePort(1);
 234:./src/usb/cdcuser.c ****   ser_OpenPort (1);
 235:./src/usb/cdcuser.c ****   ser_InitPort1 (CDC_LineCoding.dwDTERate,
 236:./src/usb/cdcuser.c ****                 CDC_LineCoding.bDataBits,
 237:./src/usb/cdcuser.c ****                 CDC_LineCoding.bParityType,
 238:./src/usb/cdcuser.c ****                 CDC_LineCoding.bCharFormat);
 239:./src/usb/cdcuser.c **** #else
 240:./src/usb/cdcuser.c ****   ser_ClosePort(0);
 293              		.loc 1 240 0
 294 000e 0020     		movs	r0, #0
 222:./src/usb/cdcuser.c ****   CDC_LineCoding.dwDTERate   = uEP0.EP0Buf32[0];
 295              		.loc 1 222 0
 296 0010 2260     		str	r2, [r4]
 229:./src/usb/cdcuser.c ****   CDC_LineCoding.bParityType =  uEP0.EP0Buf[5];
 297              		.loc 1 229 0
 298 0012 6171     		strb	r1, [r4, #5]
 230:./src/usb/cdcuser.c ****   CDC_LineCoding.bDataBits   =  uEP0.EP0Buf[6];
 299              		.loc 1 230 0
 300 0014 A371     		strb	r3, [r4, #6]
 228:./src/usb/cdcuser.c ****   CDC_LineCoding.bCharFormat =  uEP0.EP0Buf[4];
 301              		.loc 1 228 0
 302 0016 2571     		strb	r5, [r4, #4]
 303              		.loc 1 240 0
 304 0018 FFF7FEFF 		bl	ser_ClosePort
 305              	.LVL21:
 241:./src/usb/cdcuser.c ****   ser_OpenPort (0);
 306              		.loc 1 241 0
 307 001c 0020     		movs	r0, #0
 308 001e FFF7FEFF 		bl	ser_OpenPort
 309              	.LVL22:
 242:./src/usb/cdcuser.c ****   ser_InitPort0 (CDC_LineCoding.dwDTERate,
 310              		.loc 1 242 0
 311 0022 2068     		ldr	r0, [r4]
 312 0024 A179     		ldrb	r1, [r4, #6]	@ zero_extendqisi2
 313 0026 6279     		ldrb	r2, [r4, #5]	@ zero_extendqisi2
 314 0028 2379     		ldrb	r3, [r4, #4]	@ zero_extendqisi2
 315 002a FFF7FEFF 		bl	ser_InitPort0
 316              	.LVL23:
 243:./src/usb/cdcuser.c ****                 CDC_LineCoding.bDataBits,
 244:./src/usb/cdcuser.c ****                 CDC_LineCoding.bParityType,
 245:./src/usb/cdcuser.c ****                 CDC_LineCoding.bCharFormat);
 246:./src/usb/cdcuser.c **** #endif
 247:./src/usb/cdcuser.c ****   return (TRUE);
 248:./src/usb/cdcuser.c **** }
 317              		.loc 1 248 0
 318 002e 0120     		movs	r0, #1
 319 0030 38BD     		pop	{r3, r4, r5, pc}
 320              	.L29:
 321 0032 00BF     		.align	2
 322              	.L28:
 323 0034 00000000 		.word	uEP0
 324 0038 00000000 		.word	.LANCHOR0
 325              		.cfi_endproc
 326              	.LFE64:
 328              		.section	.text.CDC_GetLineCoding,"ax",%progbits
 329              		.align	2
 330              		.global	CDC_GetLineCoding
 331              		.thumb
 332              		.thumb_func
 334              	CDC_GetLineCoding:
 335              	.LFB65:
 249:./src/usb/cdcuser.c **** 
 250:./src/usb/cdcuser.c **** 
 251:./src/usb/cdcuser.c **** /*----------------------------------------------------------------------------
 252:./src/usb/cdcuser.c ****   CDC GetLineCoding Request Callback
 253:./src/usb/cdcuser.c ****   Called automatically on CDC GET_LINE_CODING Request
 254:./src/usb/cdcuser.c ****   Parameters:   None                         (global SetupPacket and EP0Buf)
 255:./src/usb/cdcuser.c ****   Return Value: TRUE - Success, FALSE - Error
 256:./src/usb/cdcuser.c ****  *---------------------------------------------------------------------------*/
 257:./src/usb/cdcuser.c **** uint32_t CDC_GetLineCoding (void) {
 336              		.loc 1 257 0
 337              		.cfi_startproc
 338              		@ args = 0, pretend = 0, frame = 0
 339              		@ frame_needed = 0, uses_anonymous_args = 0
 340              		@ link register save eliminated.
 341 0000 10B4     		push	{r4}
 342              		.cfi_def_cfa_offset 4
 343              		.cfi_offset 4, -4
 258:./src/usb/cdcuser.c **** 
 259:./src/usb/cdcuser.c **** //	uEP0.EP0Buf[0] = (CDC_LineCoding.dwDTERate >>  0) & 0xFF;
 260:./src/usb/cdcuser.c **** //	uEP0.EP0Buf[1] = (CDC_LineCoding.dwDTERate >>  8) & 0xFF;
 261:./src/usb/cdcuser.c **** //	uEP0.EP0Buf[2] = (CDC_LineCoding.dwDTERate >> 16) & 0xFF;
 262:./src/usb/cdcuser.c **** //	uEP0.EP0Buf[3] = (CDC_LineCoding.dwDTERate >> 24) & 0xFF;
 263:./src/usb/cdcuser.c **** 
 264:./src/usb/cdcuser.c **** 	uEP0.EP0Buf32[0] = CDC_LineCoding.dwDTERate;
 344              		.loc 1 264 0
 345 0002 074A     		ldr	r2, .L31
 346 0004 074B     		ldr	r3, .L31+4
 265:./src/usb/cdcuser.c **** 	uEP0.EP0Buf[4] =  CDC_LineCoding.bCharFormat;
 347              		.loc 1 265 0
 348 0006 1479     		ldrb	r4, [r2, #4]	@ zero_extendqisi2
 266:./src/usb/cdcuser.c **** 	uEP0.EP0Buf[5] =  CDC_LineCoding.bParityType;
 349              		.loc 1 266 0
 350 0008 5079     		ldrb	r0, [r2, #5]	@ zero_extendqisi2
 264:./src/usb/cdcuser.c **** 	uEP0.EP0Buf32[0] = CDC_LineCoding.dwDTERate;
 351              		.loc 1 264 0
 352 000a 1168     		ldr	r1, [r2]
 267:./src/usb/cdcuser.c **** 	uEP0.EP0Buf[6] =  CDC_LineCoding.bDataBits;
 353              		.loc 1 267 0
 354 000c 9279     		ldrb	r2, [r2, #6]	@ zero_extendqisi2
 266:./src/usb/cdcuser.c **** 	uEP0.EP0Buf[5] =  CDC_LineCoding.bParityType;
 355              		.loc 1 266 0
 356 000e 5871     		strb	r0, [r3, #5]
 264:./src/usb/cdcuser.c **** 	uEP0.EP0Buf32[0] = CDC_LineCoding.dwDTERate;
 357              		.loc 1 264 0
 358 0010 1960     		str	r1, [r3]
 265:./src/usb/cdcuser.c **** 	uEP0.EP0Buf[4] =  CDC_LineCoding.bCharFormat;
 359              		.loc 1 265 0
 360 0012 1C71     		strb	r4, [r3, #4]
 361              		.loc 1 267 0
 362 0014 9A71     		strb	r2, [r3, #6]
 268:./src/usb/cdcuser.c **** 
 269:./src/usb/cdcuser.c ****   return (TRUE);
 270:./src/usb/cdcuser.c **** }
 363              		.loc 1 270 0
 364 0016 0120     		movs	r0, #1
 365 0018 5DF8044B 		ldr	r4, [sp], #4
 366 001c 7047     		bx	lr
 367              	.L32:
 368 001e 00BF     		.align	2
 369              	.L31:
 370 0020 00000000 		.word	.LANCHOR0
 371 0024 00000000 		.word	uEP0
 372              		.cfi_endproc
 373              	.LFE65:
 375              		.section	.text.CDC_SetControlLineState,"ax",%progbits
 376              		.align	2
 377              		.global	CDC_SetControlLineState
 378              		.thumb
 379              		.thumb_func
 381              	CDC_SetControlLineState:
 382              	.LFB66:
 271:./src/usb/cdcuser.c **** 
 272:./src/usb/cdcuser.c **** 
 273:./src/usb/cdcuser.c **** /*----------------------------------------------------------------------------
 274:./src/usb/cdcuser.c ****   CDC SetControlLineState Request Callback
 275:./src/usb/cdcuser.c ****   Called automatically on CDC SET_CONTROL_LINE_STATE Request
 276:./src/usb/cdcuser.c ****   Parameters:   ControlSignalBitmap
 277:./src/usb/cdcuser.c ****   Return Value: TRUE - Success, FALSE - Error
 278:./src/usb/cdcuser.c ****  *---------------------------------------------------------------------------*/
 279:./src/usb/cdcuser.c **** uint32_t CDC_SetControlLineState (unsigned short wControlSignalBitmap) {
 383              		.loc 1 279 0
 384              		.cfi_startproc
 385              		@ args = 0, pretend = 0, frame = 0
 386              		@ frame_needed = 0, uses_anonymous_args = 0
 387              		@ link register save eliminated.
 388              	.LVL24:
 280:./src/usb/cdcuser.c **** 
 281:./src/usb/cdcuser.c ****   /* ... add code to handle request */
 282:./src/usb/cdcuser.c ****   return (TRUE);
 283:./src/usb/cdcuser.c **** }
 389              		.loc 1 283 0
 390 0000 0120     		movs	r0, #1
 391              	.LVL25:
 392 0002 7047     		bx	lr
 393              		.cfi_endproc
 394              	.LFE66:
 396              		.section	.text.CDC_SendBreak,"ax",%progbits
 397              		.align	2
 398              		.global	CDC_SendBreak
 399              		.thumb
 400              		.thumb_func
 402              	CDC_SendBreak:
 403              	.LFB67:
 284:./src/usb/cdcuser.c **** 
 285:./src/usb/cdcuser.c **** 
 286:./src/usb/cdcuser.c **** /*----------------------------------------------------------------------------
 287:./src/usb/cdcuser.c ****   CDC SendBreak Request Callback
 288:./src/usb/cdcuser.c ****   Called automatically on CDC Set_COMM_FATURE Request
 289:./src/usb/cdcuser.c ****   Parameters:   0xFFFF  start of Break
 290:./src/usb/cdcuser.c ****                 0x0000  stop  of Break
 291:./src/usb/cdcuser.c ****                 0x####  Duration of Break
 292:./src/usb/cdcuser.c ****   Return Value: TRUE - Success, FALSE - Error
 293:./src/usb/cdcuser.c ****  *---------------------------------------------------------------------------*/
 294:./src/usb/cdcuser.c **** uint32_t CDC_SendBreak (unsigned short wDurationOfBreak) {
 404              		.loc 1 294 0
 405              		.cfi_startproc
 406              		@ args = 0, pretend = 0, frame = 0
 407              		@ frame_needed = 0, uses_anonymous_args = 0
 408              		@ link register save eliminated.
 409              	.LVL26:
 295:./src/usb/cdcuser.c **** 
 296:./src/usb/cdcuser.c ****   /* ... add code to handle request */
 297:./src/usb/cdcuser.c ****   return (TRUE);
 298:./src/usb/cdcuser.c **** }
 410              		.loc 1 298 0
 411 0000 0120     		movs	r0, #1
 412              	.LVL27:
 413 0002 7047     		bx	lr
 414              		.cfi_endproc
 415              	.LFE67:
 417              		.section	.text.CDC_BulkIn,"ax",%progbits
 418              		.align	2
 419              		.global	CDC_BulkIn
 420              		.thumb
 421              		.thumb_func
 423              	CDC_BulkIn:
 424              	.LFB68:
 299:./src/usb/cdcuser.c **** 
 300:./src/usb/cdcuser.c **** 
 301:./src/usb/cdcuser.c **** /*----------------------------------------------------------------------------
 302:./src/usb/cdcuser.c ****   CDC_BulkIn call on DataIn Request
 303:./src/usb/cdcuser.c ****   Parameters:   none
 304:./src/usb/cdcuser.c ****   Return Value: none
 305:./src/usb/cdcuser.c ****  *---------------------------------------------------------------------------*/
 306:./src/usb/cdcuser.c **** void CDC_BulkIn(void) {
 425              		.loc 1 306 0
 426              		.cfi_startproc
 427              		@ args = 0, pretend = 0, frame = 8
 428              		@ frame_needed = 0, uses_anonymous_args = 0
 429 0000 00B5     		push	{lr}
 430              		.cfi_def_cfa_offset 4
 431              		.cfi_offset 14, -4
 432 0002 83B0     		sub	sp, sp, #12
 433              		.cfi_def_cfa_offset 16
 307:./src/usb/cdcuser.c ****   int numBytesRead, numBytesAvail;
 308:./src/usb/cdcuser.c **** 
 309:./src/usb/cdcuser.c ****   ser_AvailChar (&numBytesAvail);
 434              		.loc 1 309 0
 435 0004 01A8     		add	r0, sp, #4
 436 0006 FFF7FEFF 		bl	ser_AvailChar
 437              	.LVL28:
 310:./src/usb/cdcuser.c **** 
 311:./src/usb/cdcuser.c ****   // ... add code to check for overwrite
 312:./src/usb/cdcuser.c **** 
 313:./src/usb/cdcuser.c ****   numBytesRead = ser_Read ((char *)&BulkBufIn[0], &numBytesAvail);
 438              		.loc 1 313 0
 439 000a 01A9     		add	r1, sp, #4
 440 000c 0848     		ldr	r0, .L39
 441 000e FFF7FEFF 		bl	ser_Read
 442              	.LVL29:
 314:./src/usb/cdcuser.c **** 
 315:./src/usb/cdcuser.c ****   // send over USB
 316:./src/usb/cdcuser.c ****   if (numBytesRead > 0) {
 443              		.loc 1 316 0
 444 0012 021E     		subs	r2, r0, #0
 445 0014 05DC     		bgt	.L38
 317:./src/usb/cdcuser.c **** 	USB_WriteEP (CDC_DEP_IN, &BulkBufIn[0], numBytesRead);
 318:./src/usb/cdcuser.c ****   }
 319:./src/usb/cdcuser.c ****   else {
 320:./src/usb/cdcuser.c ****     CDC_DepInEmpty = 1;
 446              		.loc 1 320 0
 447 0016 074B     		ldr	r3, .L39+4
 448 0018 0122     		movs	r2, #1
 449 001a 1A80     		strh	r2, [r3]	@ movhi
 321:./src/usb/cdcuser.c ****   }
 322:./src/usb/cdcuser.c **** }
 450              		.loc 1 322 0
 451 001c 03B0     		add	sp, sp, #12
 452              		@ sp needed
 453 001e 5DF804FB 		ldr	pc, [sp], #4
 454              	.L38:
 317:./src/usb/cdcuser.c **** 	USB_WriteEP (CDC_DEP_IN, &BulkBufIn[0], numBytesRead);
 455              		.loc 1 317 0
 456 0022 0349     		ldr	r1, .L39
 457 0024 8220     		movs	r0, #130
 458              	.LVL30:
 459 0026 FFF7FEFF 		bl	USB_WriteEP
 460              	.LVL31:
 461              		.loc 1 322 0
 462 002a 03B0     		add	sp, sp, #12
 463              		@ sp needed
 464 002c 5DF804FB 		ldr	pc, [sp], #4
 465              	.L40:
 466              		.align	2
 467              	.L39:
 468 0030 00000000 		.word	BulkBufIn
 469 0034 00000000 		.word	.LANCHOR1
 470              		.cfi_endproc
 471              	.LFE68:
 473              		.section	.text.CDC_BulkOut,"ax",%progbits
 474              		.align	2
 475              		.global	CDC_BulkOut
 476              		.thumb
 477              		.thumb_func
 479              	CDC_BulkOut:
 480              	.LFB69:
 323:./src/usb/cdcuser.c **** 
 324:./src/usb/cdcuser.c **** 
 325:./src/usb/cdcuser.c **** volatile U8 Inters=0;
 326:./src/usb/cdcuser.c **** volatile U32 Bytes=0;
 327:./src/usb/cdcuser.c **** volatile U8 mass[128];
 328:./src/usb/cdcuser.c **** volatile U32 times[128];
 329:./src/usb/cdcuser.c **** 
 330:./src/usb/cdcuser.c **** /*----------------------------------------------------------------------------
 331:./src/usb/cdcuser.c ****   CDC_BulkOut call on DataOut Request
 332:./src/usb/cdcuser.c ****   Parameters:   none
 333:./src/usb/cdcuser.c ****   Return Value: none
 334:./src/usb/cdcuser.c ****  *---------------------------------------------------------------------------*/
 335:./src/usb/cdcuser.c **** void CDC_BulkOut(void) {
 481              		.loc 1 335 0
 482              		.cfi_startproc
 483              		@ args = 0, pretend = 0, frame = 0
 484              		@ frame_needed = 0, uses_anonymous_args = 0
 485 0000 38B5     		push	{r3, r4, r5, lr}
 486              		.cfi_def_cfa_offset 16
 487              		.cfi_offset 3, -16
 488              		.cfi_offset 4, -12
 489              		.cfi_offset 5, -8
 490              		.cfi_offset 14, -4
 336:./src/usb/cdcuser.c ****   int numBytesRead;
 337:./src/usb/cdcuser.c **** 
 338:./src/usb/cdcuser.c ****   // get data from USB into intermediate buffer
 339:./src/usb/cdcuser.c ****   numBytesRead = USB_ReadEP(CDC_DEP_OUT, &BulkBufOut[0]);
 491              		.loc 1 339 0
 492 0002 0220     		movs	r0, #2
 493 0004 0C49     		ldr	r1, .L47
 494 0006 FFF7FEFF 		bl	USB_ReadEP
 495              	.LVL32:
 496              	.LBB4:
 497              	.LBB5:
  99:./src/usb/cdcuser.c ****   while (bytesToWrite) {
 498              		.loc 1 99 0
 499 000a 70B1     		cbz	r0, .L44
 500 000c 0B4C     		ldr	r4, .L47+4
 501 000e 0A4D     		ldr	r5, .L47
 502 0010 226C     		ldr	r2, [r4, #64]
 503 0012 1346     		mov	r3, r2
 504 0014 1044     		add	r0, r0, r2
 505              	.LVL33:
 506 0016 AD1A     		subs	r5, r5, r2
 507              	.LVL34:
 508              	.L45:
 100:./src/usb/cdcuser.c ****       CDC_BUF_WR(CDC_OutBuf, *buffer++);           // Copy Data to buffer
 509              		.loc 1 100 0
 510 0018 03F03F02 		and	r2, r3, #63
 511 001c E95C     		ldrb	r1, [r5, r3]	@ zero_extendqisi2
 512 001e 0133     		adds	r3, r3, #1
  99:./src/usb/cdcuser.c ****   while (bytesToWrite) {
 513              		.loc 1 99 0
 514 0020 8342     		cmp	r3, r0
 100:./src/usb/cdcuser.c ****       CDC_BUF_WR(CDC_OutBuf, *buffer++);           // Copy Data to buffer
 515              		.loc 1 100 0
 516 0022 A154     		strb	r1, [r4, r2]
 517 0024 054A     		ldr	r2, .L47+4
  99:./src/usb/cdcuser.c ****   while (bytesToWrite) {
 518              		.loc 1 99 0
 519 0026 F7D1     		bne	.L45
 520 0028 1364     		str	r3, [r2, #64]
 521              	.L44:
 522              	.LBE5:
 523              	.LBE4:
 340:./src/usb/cdcuser.c **** 
 341:./src/usb/cdcuser.c ****   //----------- mass[Inters] = numBytesRead;
 342:./src/usb/cdcuser.c ****   //-----------times[Inters] = SysTick_GetDelta();
 343:./src/usb/cdcuser.c ****   //-----------SysTick_SetStamp();
 344:./src/usb/cdcuser.c ****   //-----------Bytes += numBytesRead;
 345:./src/usb/cdcuser.c ****   // ... add code to check for overwrite
 346:./src/usb/cdcuser.c **** 
 347:./src/usb/cdcuser.c ****   // store data in a buffer to transmit it over serial interface
 348:./src/usb/cdcuser.c ****   CDC_WrOutBuf ((char *)&BulkBufOut[0], &numBytesRead);
 349:./src/usb/cdcuser.c **** 
 350:./src/usb/cdcuser.c ****   Inters = (Inters + 1) & 0x7F;
 524              		.loc 1 350 0
 525 002a 054B     		ldr	r3, .L47+8
 526 002c 1A78     		ldrb	r2, [r3]	@ zero_extendqisi2
 527 002e 0132     		adds	r2, r2, #1
 528 0030 02F07F02 		and	r2, r2, #127
 529 0034 1A70     		strb	r2, [r3]
 530 0036 38BD     		pop	{r3, r4, r5, pc}
 531              	.L48:
 532              		.align	2
 533              	.L47:
 534 0038 00000000 		.word	BulkBufOut
 535 003c 00000000 		.word	CDC_OutBuf
 536 0040 00000000 		.word	.LANCHOR2
 537              		.cfi_endproc
 538              	.LFE69:
 540              		.section	.text.CDC_GetSerialState,"ax",%progbits
 541              		.align	2
 542              		.global	CDC_GetSerialState
 543              		.thumb
 544              		.thumb_func
 546              	CDC_GetSerialState:
 547              	.LFB70:
 351:./src/usb/cdcuser.c **** 
 352:./src/usb/cdcuser.c **** }
 353:./src/usb/cdcuser.c **** 
 354:./src/usb/cdcuser.c **** 
 355:./src/usb/cdcuser.c **** /*----------------------------------------------------------------------------
 356:./src/usb/cdcuser.c ****   Get the SERIAL_STATE as defined in usbcdc11.pdf, 6.3.5, Table 69.
 357:./src/usb/cdcuser.c ****   Parameters:   none
 358:./src/usb/cdcuser.c ****   Return Value: SerialState as defined in usbcdc11.pdf
 359:./src/usb/cdcuser.c ****  *---------------------------------------------------------------------------*/
 360:./src/usb/cdcuser.c **** unsigned short CDC_GetSerialState (void) {
 548              		.loc 1 360 0
 549              		.cfi_startproc
 550              		@ args = 0, pretend = 0, frame = 8
 551              		@ frame_needed = 0, uses_anonymous_args = 0
 552 0000 10B5     		push	{r4, lr}
 553              		.cfi_def_cfa_offset 8
 554              		.cfi_offset 4, -8
 555              		.cfi_offset 14, -4
 361:./src/usb/cdcuser.c ****   unsigned short temp;
 362:./src/usb/cdcuser.c **** 
 363:./src/usb/cdcuser.c ****   CDC_SerialState = 0;
 556              		.loc 1 363 0
 557 0002 204C     		ldr	r4, .L76
 360:./src/usb/cdcuser.c **** unsigned short CDC_GetSerialState (void) {
 558              		.loc 1 360 0
 559 0004 82B0     		sub	sp, sp, #8
 560              		.cfi_def_cfa_offset 16
 561              		.loc 1 363 0
 562 0006 0023     		movs	r3, #0
 364:./src/usb/cdcuser.c ****   ser_LineState (&temp);
 563              		.loc 1 364 0
 564 0008 0DF10600 		add	r0, sp, #6
 363:./src/usb/cdcuser.c ****   CDC_SerialState = 0;
 565              		.loc 1 363 0
 566 000c 2380     		strh	r3, [r4]	@ movhi
 567              		.loc 1 364 0
 568 000e FFF7FEFF 		bl	ser_LineState
 569              	.LVL35:
 365:./src/usb/cdcuser.c **** 
 366:./src/usb/cdcuser.c ****   if (temp & 0x8000)  CDC_SerialState |= CDC_SERIAL_STATE_RX_CARRIER;
 570              		.loc 1 366 0
 571 0012 BDF80630 		ldrh	r3, [sp, #6]
 572 0016 1804     		lsls	r0, r3, #16
 573 0018 2DD4     		bmi	.L75
 574              	.L50:
 367:./src/usb/cdcuser.c ****   if (temp & 0x2000)  CDC_SerialState |= CDC_SERIAL_STATE_TX_CARRIER;
 575              		.loc 1 367 0
 576 001a 9904     		lsls	r1, r3, #18
 577 001c 04D5     		bpl	.L51
 578              		.loc 1 367 0 is_stmt 0 discriminator 1
 579 001e 2288     		ldrh	r2, [r4]
 580 0020 92B2     		uxth	r2, r2
 581 0022 42F00202 		orr	r2, r2, #2
 582 0026 2280     		strh	r2, [r4]	@ movhi
 583              	.L51:
 368:./src/usb/cdcuser.c ****   if (temp & 0x0010)  CDC_SerialState |= CDC_SERIAL_STATE_BREAK;
 584              		.loc 1 368 0 is_stmt 1
 585 0028 DA06     		lsls	r2, r3, #27
 586 002a 04D5     		bpl	.L52
 587              		.loc 1 368 0 is_stmt 0 discriminator 1
 588 002c 2288     		ldrh	r2, [r4]
 589 002e 92B2     		uxth	r2, r2
 590 0030 42F00402 		orr	r2, r2, #4
 591 0034 2280     		strh	r2, [r4]	@ movhi
 592              	.L52:
 369:./src/usb/cdcuser.c ****   if (temp & 0x4000)  CDC_SerialState |= CDC_SERIAL_STATE_RING;
 593              		.loc 1 369 0 is_stmt 1
 594 0036 5804     		lsls	r0, r3, #17
 595 0038 04D5     		bpl	.L53
 596              		.loc 1 369 0 is_stmt 0 discriminator 1
 597 003a 2288     		ldrh	r2, [r4]
 598 003c 92B2     		uxth	r2, r2
 599 003e 42F00802 		orr	r2, r2, #8
 600 0042 2280     		strh	r2, [r4]	@ movhi
 601              	.L53:
 370:./src/usb/cdcuser.c ****   if (temp & 0x0008)  CDC_SerialState |= CDC_SERIAL_STATE_FRAMING;
 602              		.loc 1 370 0 is_stmt 1
 603 0044 1907     		lsls	r1, r3, #28
 604 0046 04D5     		bpl	.L54
 605              		.loc 1 370 0 is_stmt 0 discriminator 1
 606 0048 2288     		ldrh	r2, [r4]
 607 004a 92B2     		uxth	r2, r2
 608 004c 42F01002 		orr	r2, r2, #16
 609 0050 2280     		strh	r2, [r4]	@ movhi
 610              	.L54:
 371:./src/usb/cdcuser.c ****   if (temp & 0x0004)  CDC_SerialState |= CDC_SERIAL_STATE_PARITY;
 611              		.loc 1 371 0 is_stmt 1
 612 0052 5A07     		lsls	r2, r3, #29
 613 0054 04D5     		bpl	.L55
 614              		.loc 1 371 0 is_stmt 0 discriminator 1
 615 0056 2288     		ldrh	r2, [r4]
 616 0058 92B2     		uxth	r2, r2
 617 005a 42F02002 		orr	r2, r2, #32
 618 005e 2280     		strh	r2, [r4]	@ movhi
 619              	.L55:
 372:./src/usb/cdcuser.c ****   if (temp & 0x0002)  CDC_SerialState |= CDC_SERIAL_STATE_OVERRUN;
 620              		.loc 1 372 0 is_stmt 1
 621 0060 9B07     		lsls	r3, r3, #30
 622 0062 04D5     		bpl	.L56
 623              		.loc 1 372 0 is_stmt 0 discriminator 1
 624 0064 2388     		ldrh	r3, [r4]
 625 0066 9BB2     		uxth	r3, r3
 626 0068 43F04003 		orr	r3, r3, #64
 627 006c 2380     		strh	r3, [r4]	@ movhi
 628              	.L56:
 373:./src/usb/cdcuser.c **** 
 374:./src/usb/cdcuser.c ****   return (CDC_SerialState);
 629              		.loc 1 374 0 is_stmt 1
 630 006e 2088     		ldrh	r0, [r4]
 375:./src/usb/cdcuser.c **** }
 631              		.loc 1 375 0
 632 0070 80B2     		uxth	r0, r0
 633 0072 02B0     		add	sp, sp, #8
 634              		@ sp needed
 635 0074 10BD     		pop	{r4, pc}
 636              	.L75:
 366:./src/usb/cdcuser.c ****   if (temp & 0x8000)  CDC_SerialState |= CDC_SERIAL_STATE_RX_CARRIER;
 637              		.loc 1 366 0 discriminator 1
 638 0076 2288     		ldrh	r2, [r4]
 639 0078 92B2     		uxth	r2, r2
 640 007a 42F00102 		orr	r2, r2, #1
 641 007e 2280     		strh	r2, [r4]	@ movhi
 642 0080 CBE7     		b	.L50
 643              	.L77:
 644 0082 00BF     		.align	2
 645              	.L76:
 646 0084 00000000 		.word	.LANCHOR3
 647              		.cfi_endproc
 648              	.LFE70:
 650              		.section	.text.CDC_Init,"ax",%progbits
 651              		.align	2
 652              		.global	CDC_Init
 653              		.thumb
 654              		.thumb_func
 656              	CDC_Init:
 657              	.LFB58:
 125:./src/usb/cdcuser.c **** void CDC_Init (char portNum ) {
 658              		.loc 1 125 0
 659              		.cfi_startproc
 660              		@ args = 0, pretend = 0, frame = 0
 661              		@ frame_needed = 0, uses_anonymous_args = 0
 662              	.LVL36:
 663 0000 08B5     		push	{r3, lr}
 664              		.cfi_def_cfa_offset 8
 665              		.cfi_offset 3, -8
 666              		.cfi_offset 14, -4
 127:./src/usb/cdcuser.c ****   if ( portNum == 0 )
 667              		.loc 1 127 0
 668 0002 A8B1     		cbz	r0, .L81
 137:./src/usb/cdcuser.c **** 	ser_OpenPort (1);
 669              		.loc 1 137 0
 670 0004 0120     		movs	r0, #1
 671              	.LVL37:
 672 0006 FFF7FEFF 		bl	ser_OpenPort
 673              	.LVL38:
 138:./src/usb/cdcuser.c **** 	ser_InitPort1 (CDC_LineCoding.dwDTERate,
 674              		.loc 1 138 0
 675 000a 0E4B     		ldr	r3, .L82
 676 000c 1868     		ldr	r0, [r3]
 677 000e 9979     		ldrb	r1, [r3, #6]	@ zero_extendqisi2
 678 0010 5A79     		ldrb	r2, [r3, #5]	@ zero_extendqisi2
 679 0012 1B79     		ldrb	r3, [r3, #4]	@ zero_extendqisi2
 680 0014 FFF7FEFF 		bl	ser_InitPort1
 681              	.LVL39:
 682              	.L80:
 143:./src/usb/cdcuser.c ****   CDC_DepInEmpty  = 1;
 683              		.loc 1 143 0
 684 0018 0B4B     		ldr	r3, .L82+4
 685 001a 0122     		movs	r2, #1
 686 001c 1A80     		strh	r2, [r3]	@ movhi
 144:./src/usb/cdcuser.c ****   CDC_SerialState = CDC_GetSerialState();
 687              		.loc 1 144 0
 688 001e FFF7FEFF 		bl	CDC_GetSerialState
 689              	.LVL40:
 146:./src/usb/cdcuser.c ****   CDC_BUF_RESET(CDC_OutBuf);
 690              		.loc 1 146 0
 691 0022 0A4B     		ldr	r3, .L82+8
 144:./src/usb/cdcuser.c ****   CDC_SerialState = CDC_GetSerialState();
 692              		.loc 1 144 0
 693 0024 0A49     		ldr	r1, .L82+12
 146:./src/usb/cdcuser.c ****   CDC_BUF_RESET(CDC_OutBuf);
 694              		.loc 1 146 0
 695 0026 0022     		movs	r2, #0
 144:./src/usb/cdcuser.c ****   CDC_SerialState = CDC_GetSerialState();
 696              		.loc 1 144 0
 697 0028 0880     		strh	r0, [r1]	@ movhi
 146:./src/usb/cdcuser.c ****   CDC_BUF_RESET(CDC_OutBuf);
 698              		.loc 1 146 0
 699 002a 1A64     		str	r2, [r3, #64]
 700 002c 5A64     		str	r2, [r3, #68]
 701 002e 08BD     		pop	{r3, pc}
 702              	.LVL41:
 703              	.L81:
 129:./src/usb/cdcuser.c **** 	ser_OpenPort (0);
 704              		.loc 1 129 0
 705 0030 FFF7FEFF 		bl	ser_OpenPort
 706              	.LVL42:
 130:./src/usb/cdcuser.c **** 	ser_InitPort0 (CDC_LineCoding.dwDTERate,
 707              		.loc 1 130 0
 708 0034 034B     		ldr	r3, .L82
 709 0036 1868     		ldr	r0, [r3]
 710 0038 9979     		ldrb	r1, [r3, #6]	@ zero_extendqisi2
 711 003a 5A79     		ldrb	r2, [r3, #5]	@ zero_extendqisi2
 712 003c 1B79     		ldrb	r3, [r3, #4]	@ zero_extendqisi2
 713 003e FFF7FEFF 		bl	ser_InitPort0
 714              	.LVL43:
 715 0042 E9E7     		b	.L80
 716              	.L83:
 717              		.align	2
 718              	.L82:
 719 0044 00000000 		.word	.LANCHOR0
 720 0048 00000000 		.word	.LANCHOR1
 721 004c 00000000 		.word	CDC_OutBuf
 722 0050 00000000 		.word	.LANCHOR3
 723              		.cfi_endproc
 724              	.LFE58:
 726              		.section	.text.CDC_NotificationIn,"ax",%progbits
 727              		.align	2
 728              		.global	CDC_NotificationIn
 729              		.thumb
 730              		.thumb_func
 732              	CDC_NotificationIn:
 733              	.LFB71:
 376:./src/usb/cdcuser.c **** 
 377:./src/usb/cdcuser.c **** 
 378:./src/usb/cdcuser.c **** /*----------------------------------------------------------------------------
 379:./src/usb/cdcuser.c ****   Send the SERIAL_STATE notification as defined in usbcdc11.pdf, 6.3.5.
 380:./src/usb/cdcuser.c ****  *---------------------------------------------------------------------------*/
 381:./src/usb/cdcuser.c **** void CDC_NotificationIn (void) {
 734              		.loc 1 381 0
 735              		.cfi_startproc
 736              		@ args = 0, pretend = 0, frame = 0
 737              		@ frame_needed = 0, uses_anonymous_args = 0
 738              		@ link register save eliminated.
 382:./src/usb/cdcuser.c **** 
 383:./src/usb/cdcuser.c ****   NotificationBuf[0] = 0xA1;                           // bmRequestType
 384:./src/usb/cdcuser.c ****   NotificationBuf[1] = CDC_NOTIFICATION_SERIAL_STATE;  // bNotification (SERIAL_STATE)
 385:./src/usb/cdcuser.c ****   NotificationBuf[2] = 0x00;                           // wValue
 386:./src/usb/cdcuser.c ****   NotificationBuf[3] = 0x00;
 387:./src/usb/cdcuser.c ****   NotificationBuf[4] = 0x00;                           // wIndex (Interface #, LSB first)
 388:./src/usb/cdcuser.c ****   NotificationBuf[5] = 0x00;
 389:./src/usb/cdcuser.c ****   NotificationBuf[6] = 0x02;                           // wLength (Data length = 2 bytes, LSB first
 390:./src/usb/cdcuser.c ****   NotificationBuf[7] = 0x00;
 391:./src/usb/cdcuser.c ****   NotificationBuf[8] = (CDC_SerialState >>  0) & 0xFF; // UART State Bitmap (16bits, LSB first)
 739              		.loc 1 391 0
 740 0000 104A     		ldr	r2, .L85
 381:./src/usb/cdcuser.c **** void CDC_NotificationIn (void) {
 741              		.loc 1 381 0
 742 0002 2DE9F001 		push	{r4, r5, r6, r7, r8}
 743              		.cfi_def_cfa_offset 20
 744              		.cfi_offset 4, -20
 745              		.cfi_offset 5, -16
 746              		.cfi_offset 6, -12
 747              		.cfi_offset 7, -8
 748              		.cfi_offset 8, -4
 749              		.loc 1 391 0
 750 0006 B2F800C0 		ldrh	ip, [r2]
 392:./src/usb/cdcuser.c ****   NotificationBuf[9] = (CDC_SerialState >>  8) & 0xFF;
 751              		.loc 1 392 0
 752 000a B2F80080 		ldrh	r8, [r2]
 383:./src/usb/cdcuser.c ****   NotificationBuf[0] = 0xA1;                           // bmRequestType
 753              		.loc 1 383 0
 754 000e 0E4B     		ldr	r3, .L85+4
 385:./src/usb/cdcuser.c ****   NotificationBuf[2] = 0x00;                           // wValue
 755              		.loc 1 385 0
 756 0010 0024     		movs	r4, #0
 383:./src/usb/cdcuser.c ****   NotificationBuf[0] = 0xA1;                           // bmRequestType
 757              		.loc 1 383 0
 758 0012 A127     		movs	r7, #161
 759              		.loc 1 392 0
 760 0014 C8F30728 		ubfx	r8, r8, #8, #8
 384:./src/usb/cdcuser.c ****   NotificationBuf[1] = CDC_NOTIFICATION_SERIAL_STATE;  // bNotification (SERIAL_STATE)
 761              		.loc 1 384 0
 762 0018 2026     		movs	r6, #32
 389:./src/usb/cdcuser.c ****   NotificationBuf[6] = 0x02;                           // wLength (Data length = 2 bytes, LSB first
 763              		.loc 1 389 0
 764 001a 0225     		movs	r5, #2
 765              		.loc 1 392 0
 766 001c 83F80980 		strb	r8, [r3, #9]
 391:./src/usb/cdcuser.c ****   NotificationBuf[8] = (CDC_SerialState >>  0) & 0xFF; // UART State Bitmap (16bits, LSB first)
 767              		.loc 1 391 0
 768 0020 83F808C0 		strb	ip, [r3, #8]
 383:./src/usb/cdcuser.c ****   NotificationBuf[0] = 0xA1;                           // bmRequestType
 769              		.loc 1 383 0
 770 0024 1F70     		strb	r7, [r3]
 384:./src/usb/cdcuser.c ****   NotificationBuf[1] = CDC_NOTIFICATION_SERIAL_STATE;  // bNotification (SERIAL_STATE)
 771              		.loc 1 384 0
 772 0026 5E70     		strb	r6, [r3, #1]
 389:./src/usb/cdcuser.c ****   NotificationBuf[6] = 0x02;                           // wLength (Data length = 2 bytes, LSB first
 773              		.loc 1 389 0
 774 0028 9D71     		strb	r5, [r3, #6]
 385:./src/usb/cdcuser.c ****   NotificationBuf[2] = 0x00;                           // wValue
 775              		.loc 1 385 0
 776 002a 9C70     		strb	r4, [r3, #2]
 386:./src/usb/cdcuser.c ****   NotificationBuf[3] = 0x00;
 777              		.loc 1 386 0
 778 002c DC70     		strb	r4, [r3, #3]
 387:./src/usb/cdcuser.c ****   NotificationBuf[4] = 0x00;                           // wIndex (Interface #, LSB first)
 779              		.loc 1 387 0
 780 002e 1C71     		strb	r4, [r3, #4]
 388:./src/usb/cdcuser.c ****   NotificationBuf[5] = 0x00;
 781              		.loc 1 388 0
 782 0030 5C71     		strb	r4, [r3, #5]
 390:./src/usb/cdcuser.c ****   NotificationBuf[7] = 0x00;
 783              		.loc 1 390 0
 784 0032 DC71     		strb	r4, [r3, #7]
 393:./src/usb/cdcuser.c **** 
 394:./src/usb/cdcuser.c ****   USB_WriteEP (CDC_CEP_IN, &NotificationBuf[0], 10);   // send notification
 785              		.loc 1 394 0
 786 0034 1946     		mov	r1, r3
 787 0036 8120     		movs	r0, #129
 788 0038 0A22     		movs	r2, #10
 395:./src/usb/cdcuser.c **** }
 789              		.loc 1 395 0
 790 003a BDE8F001 		pop	{r4, r5, r6, r7, r8}
 394:./src/usb/cdcuser.c ****   USB_WriteEP (CDC_CEP_IN, &NotificationBuf[0], 10);   // send notification
 791              		.loc 1 394 0
 792 003e FFF7FEBF 		b	USB_WriteEP
 793              	.LVL44:
 794              	.L86:
 795 0042 00BF     		.align	2
 796              	.L85:
 797 0044 00000000 		.word	.LANCHOR3
 798 0048 00000000 		.word	NotificationBuf
 799              		.cfi_endproc
 800              	.LFE71:
 802              		.comm	times,512,4
 803              		.comm	mass,128,4
 804              		.global	Bytes
 805              		.global	Inters
 806              		.comm	CDC_OutBuf,72,4
 807              		.global	CDC_DepInEmpty
 808              		.global	CDC_SerialState
 809              		.global	CDC_LineCoding
 810              		.comm	NotificationBuf,10,4
 811              		.comm	BulkBufOut,64,4
 812              		.comm	BulkBufIn,64,4
 813              		.section	.bss.Bytes,"aw",%nobits
 814              		.align	2
 817              	Bytes:
 818 0000 00000000 		.space	4
 819              		.section	.data.CDC_DepInEmpty,"aw",%progbits
 820              		.align	1
 821              		.set	.LANCHOR1,. + 0
 824              	CDC_DepInEmpty:
 825 0000 0100     		.short	1
 826              		.section	.bss.CDC_SerialState,"aw",%nobits
 827              		.align	1
 828              		.set	.LANCHOR3,. + 0
 831              	CDC_SerialState:
 832 0000 0000     		.space	2
 833              		.section	.bss.Inters,"aw",%nobits
 834              		.set	.LANCHOR2,. + 0
 837              	Inters:
 838 0000 00       		.space	1
 839              		.section	.data.CDC_LineCoding,"aw",%progbits
 840              		.align	2
 841              		.set	.LANCHOR0,. + 0
 844              	CDC_LineCoding:
 845 0000 80250000 		.word	9600
 846 0004 00       		.byte	0
 847 0005 00       		.byte	0
 848 0006 08       		.byte	8
 849 0007 00       		.text
 850              	.Letext0:
 851              		.file 2 "d:\\gnu\\4_8\\arm-none-eabi\\include\\machine\\_default_types.h"
 852              		.file 3 "d:\\gnu\\4_8\\arm-none-eabi\\include\\stdint.h"
 853              		.file 4 "./Drivers/include/vkv_compiler.h"
 854              		.file 5 "./src/usb/usbcore.h"
 855              		.file 6 "./src/usb/cdc.h"
 856              		.file 7 "./Core/core_cm3.h"
 857              		.file 8 "./src/serial.h"
 858              		.file 9 "./src/usb/usbhw.h"
 859              		.file 10 "./Drivers/include/lpc_types.h"
DEFINED SYMBOLS
                            *ABS*:00000000 cdcuser.c
C:\Users\kosmos\AppData\Local\Temp\cc9tpnFS.s:19     .text.CDC_RdOutBuf:00000000 $t
C:\Users\kosmos\AppData\Local\Temp\cc9tpnFS.s:24     .text.CDC_RdOutBuf:00000000 CDC_RdOutBuf
C:\Users\kosmos\AppData\Local\Temp\cc9tpnFS.s:68     .text.CDC_RdOutBuf:00000024 $d
                            *COM*:00000048 CDC_OutBuf
C:\Users\kosmos\AppData\Local\Temp\cc9tpnFS.s:73     .text.CDC_WrOutBuf:00000000 $t
C:\Users\kosmos\AppData\Local\Temp\cc9tpnFS.s:78     .text.CDC_WrOutBuf:00000000 CDC_WrOutBuf
C:\Users\kosmos\AppData\Local\Temp\cc9tpnFS.s:128    .text.CDC_WrOutBuf:00000028 $d
C:\Users\kosmos\AppData\Local\Temp\cc9tpnFS.s:133    .text.CDC_OutBufAvailChar:00000000 $t
C:\Users\kosmos\AppData\Local\Temp\cc9tpnFS.s:138    .text.CDC_OutBufAvailChar:00000000 CDC_OutBufAvailChar
C:\Users\kosmos\AppData\Local\Temp\cc9tpnFS.s:160    .text.CDC_OutBufAvailChar:00000014 $d
C:\Users\kosmos\AppData\Local\Temp\cc9tpnFS.s:165    .text.CDC_SendEncapsulatedCommand:00000000 $t
C:\Users\kosmos\AppData\Local\Temp\cc9tpnFS.s:170    .text.CDC_SendEncapsulatedCommand:00000000 CDC_SendEncapsulatedCommand
C:\Users\kosmos\AppData\Local\Temp\cc9tpnFS.s:184    .text.CDC_GetEncapsulatedResponse:00000000 $t
C:\Users\kosmos\AppData\Local\Temp\cc9tpnFS.s:189    .text.CDC_GetEncapsulatedResponse:00000000 CDC_GetEncapsulatedResponse
C:\Users\kosmos\AppData\Local\Temp\cc9tpnFS.s:203    .text.CDC_SetCommFeature:00000000 $t
C:\Users\kosmos\AppData\Local\Temp\cc9tpnFS.s:208    .text.CDC_SetCommFeature:00000000 CDC_SetCommFeature
C:\Users\kosmos\AppData\Local\Temp\cc9tpnFS.s:224    .text.CDC_GetCommFeature:00000000 $t
C:\Users\kosmos\AppData\Local\Temp\cc9tpnFS.s:229    .text.CDC_GetCommFeature:00000000 CDC_GetCommFeature
C:\Users\kosmos\AppData\Local\Temp\cc9tpnFS.s:245    .text.CDC_ClearCommFeature:00000000 $t
C:\Users\kosmos\AppData\Local\Temp\cc9tpnFS.s:250    .text.CDC_ClearCommFeature:00000000 CDC_ClearCommFeature
C:\Users\kosmos\AppData\Local\Temp\cc9tpnFS.s:266    .text.CDC_SetLineCoding:00000000 $t
C:\Users\kosmos\AppData\Local\Temp\cc9tpnFS.s:271    .text.CDC_SetLineCoding:00000000 CDC_SetLineCoding
C:\Users\kosmos\AppData\Local\Temp\cc9tpnFS.s:323    .text.CDC_SetLineCoding:00000034 $d
C:\Users\kosmos\AppData\Local\Temp\cc9tpnFS.s:329    .text.CDC_GetLineCoding:00000000 $t
C:\Users\kosmos\AppData\Local\Temp\cc9tpnFS.s:334    .text.CDC_GetLineCoding:00000000 CDC_GetLineCoding
C:\Users\kosmos\AppData\Local\Temp\cc9tpnFS.s:370    .text.CDC_GetLineCoding:00000020 $d
C:\Users\kosmos\AppData\Local\Temp\cc9tpnFS.s:376    .text.CDC_SetControlLineState:00000000 $t
C:\Users\kosmos\AppData\Local\Temp\cc9tpnFS.s:381    .text.CDC_SetControlLineState:00000000 CDC_SetControlLineState
C:\Users\kosmos\AppData\Local\Temp\cc9tpnFS.s:397    .text.CDC_SendBreak:00000000 $t
C:\Users\kosmos\AppData\Local\Temp\cc9tpnFS.s:402    .text.CDC_SendBreak:00000000 CDC_SendBreak
C:\Users\kosmos\AppData\Local\Temp\cc9tpnFS.s:418    .text.CDC_BulkIn:00000000 $t
C:\Users\kosmos\AppData\Local\Temp\cc9tpnFS.s:423    .text.CDC_BulkIn:00000000 CDC_BulkIn
C:\Users\kosmos\AppData\Local\Temp\cc9tpnFS.s:468    .text.CDC_BulkIn:00000030 $d
                            *COM*:00000040 BulkBufIn
C:\Users\kosmos\AppData\Local\Temp\cc9tpnFS.s:474    .text.CDC_BulkOut:00000000 $t
C:\Users\kosmos\AppData\Local\Temp\cc9tpnFS.s:479    .text.CDC_BulkOut:00000000 CDC_BulkOut
C:\Users\kosmos\AppData\Local\Temp\cc9tpnFS.s:534    .text.CDC_BulkOut:00000038 $d
                            *COM*:00000040 BulkBufOut
C:\Users\kosmos\AppData\Local\Temp\cc9tpnFS.s:541    .text.CDC_GetSerialState:00000000 $t
C:\Users\kosmos\AppData\Local\Temp\cc9tpnFS.s:546    .text.CDC_GetSerialState:00000000 CDC_GetSerialState
C:\Users\kosmos\AppData\Local\Temp\cc9tpnFS.s:646    .text.CDC_GetSerialState:00000084 $d
C:\Users\kosmos\AppData\Local\Temp\cc9tpnFS.s:651    .text.CDC_Init:00000000 $t
C:\Users\kosmos\AppData\Local\Temp\cc9tpnFS.s:656    .text.CDC_Init:00000000 CDC_Init
C:\Users\kosmos\AppData\Local\Temp\cc9tpnFS.s:719    .text.CDC_Init:00000044 $d
C:\Users\kosmos\AppData\Local\Temp\cc9tpnFS.s:727    .text.CDC_NotificationIn:00000000 $t
C:\Users\kosmos\AppData\Local\Temp\cc9tpnFS.s:732    .text.CDC_NotificationIn:00000000 CDC_NotificationIn
C:\Users\kosmos\AppData\Local\Temp\cc9tpnFS.s:797    .text.CDC_NotificationIn:00000044 $d
                            *COM*:0000000a NotificationBuf
                            *COM*:00000200 times
                            *COM*:00000080 mass
C:\Users\kosmos\AppData\Local\Temp\cc9tpnFS.s:817    .bss.Bytes:00000000 Bytes
C:\Users\kosmos\AppData\Local\Temp\cc9tpnFS.s:837    .bss.Inters:00000000 Inters
C:\Users\kosmos\AppData\Local\Temp\cc9tpnFS.s:824    .data.CDC_DepInEmpty:00000000 CDC_DepInEmpty
C:\Users\kosmos\AppData\Local\Temp\cc9tpnFS.s:831    .bss.CDC_SerialState:00000000 CDC_SerialState
C:\Users\kosmos\AppData\Local\Temp\cc9tpnFS.s:844    .data.CDC_LineCoding:00000000 CDC_LineCoding
C:\Users\kosmos\AppData\Local\Temp\cc9tpnFS.s:814    .bss.Bytes:00000000 $d
C:\Users\kosmos\AppData\Local\Temp\cc9tpnFS.s:820    .data.CDC_DepInEmpty:00000000 $d
C:\Users\kosmos\AppData\Local\Temp\cc9tpnFS.s:827    .bss.CDC_SerialState:00000000 $d
C:\Users\kosmos\AppData\Local\Temp\cc9tpnFS.s:838    .bss.Inters:00000000 $d
C:\Users\kosmos\AppData\Local\Temp\cc9tpnFS.s:840    .data.CDC_LineCoding:00000000 $d
                     .debug_frame:00000010 $d

UNDEFINED SYMBOLS
ser_ClosePort
ser_OpenPort
ser_InitPort0
uEP0
ser_AvailChar
ser_Read
USB_WriteEP
USB_ReadEP
ser_LineState
ser_InitPort1
