   1              		.syntax unified
   2              		.cpu cortex-m3
   3              		.fpu softvfp
   4              		.eabi_attribute 20, 1
   5              		.eabi_attribute 21, 1
   6              		.eabi_attribute 23, 3
   7              		.eabi_attribute 24, 1
   8              		.eabi_attribute 25, 1
   9              		.eabi_attribute 26, 1
  10              		.eabi_attribute 30, 2
  11              		.eabi_attribute 34, 1
  12              		.eabi_attribute 18, 4
  13              		.thumb
  14              		.file	"lpc17xx_clkpwr.c"
  15              		.text
  16              	.Ltext0:
  17              		.cfi_sections	.debug_frame
  18              		.section	.text.CLKPWR_SetPCLKDiv,"ax",%progbits
  19              		.align	2
  20              		.global	CLKPWR_SetPCLKDiv
  21              		.thumb
  22              		.thumb_func
  24              	CLKPWR_SetPCLKDiv:
  25              	.LFB55:
  26              		.file 1 "./Drivers/source/lpc17xx_clkpwr.c"
   1:./Drivers/source/lpc17xx_clkpwr.c **** /***********************************************************************//**
   2:./Drivers/source/lpc17xx_clkpwr.c ****  * @file		lpc17xx_clkpwr.c
   3:./Drivers/source/lpc17xx_clkpwr.c ****  * @brief		Contains all functions support for Clock and Power Control
   4:./Drivers/source/lpc17xx_clkpwr.c ****  * 				firmware library on LPC17xx
   5:./Drivers/source/lpc17xx_clkpwr.c ****  * @version		3.0
   6:./Drivers/source/lpc17xx_clkpwr.c ****  * @date		18. June. 2010
   7:./Drivers/source/lpc17xx_clkpwr.c ****  * @author		NXP MCU SW Application Team
   8:./Drivers/source/lpc17xx_clkpwr.c ****  **************************************************************************
   9:./Drivers/source/lpc17xx_clkpwr.c ****  * Software that is described herein is for illustrative purposes only
  10:./Drivers/source/lpc17xx_clkpwr.c ****  * which provides customers with programming information regarding the
  11:./Drivers/source/lpc17xx_clkpwr.c ****  * products. This software is supplied "AS IS" without any warranties.
  12:./Drivers/source/lpc17xx_clkpwr.c ****  * NXP Semiconductors assumes no responsibility or liability for the
  13:./Drivers/source/lpc17xx_clkpwr.c ****  * use of the software, conveys no license or title under any patent,
  14:./Drivers/source/lpc17xx_clkpwr.c ****  * copyright, or mask work right to the product. NXP Semiconductors
  15:./Drivers/source/lpc17xx_clkpwr.c ****  * reserves the right to make changes in the software without
  16:./Drivers/source/lpc17xx_clkpwr.c ****  * notification. NXP Semiconductors also make no representation or
  17:./Drivers/source/lpc17xx_clkpwr.c ****  * warranty that such application will be suitable for the specified
  18:./Drivers/source/lpc17xx_clkpwr.c ****  * use without further testing or modification.
  19:./Drivers/source/lpc17xx_clkpwr.c ****  **********************************************************************/
  20:./Drivers/source/lpc17xx_clkpwr.c **** 
  21:./Drivers/source/lpc17xx_clkpwr.c **** /* Peripheral group ----------------------------------------------------------- */
  22:./Drivers/source/lpc17xx_clkpwr.c **** /** @addtogroup CLKPWR
  23:./Drivers/source/lpc17xx_clkpwr.c ****  * @{
  24:./Drivers/source/lpc17xx_clkpwr.c ****  */
  25:./Drivers/source/lpc17xx_clkpwr.c **** 
  26:./Drivers/source/lpc17xx_clkpwr.c **** /* Includes ------------------------------------------------------------------- */
  27:./Drivers/source/lpc17xx_clkpwr.c **** #include "lpc17xx_clkpwr.h"
  28:./Drivers/source/lpc17xx_clkpwr.c **** 
  29:./Drivers/source/lpc17xx_clkpwr.c **** 
  30:./Drivers/source/lpc17xx_clkpwr.c **** /* Public Functions ----------------------------------------------------------- */
  31:./Drivers/source/lpc17xx_clkpwr.c **** /** @addtogroup CLKPWR_Public_Functions
  32:./Drivers/source/lpc17xx_clkpwr.c ****  * @{
  33:./Drivers/source/lpc17xx_clkpwr.c ****  */
  34:./Drivers/source/lpc17xx_clkpwr.c **** 
  35:./Drivers/source/lpc17xx_clkpwr.c **** /*********************************************************************//**
  36:./Drivers/source/lpc17xx_clkpwr.c ****  * @brief 		Set value of each Peripheral Clock Selection
  37:./Drivers/source/lpc17xx_clkpwr.c ****  * @param[in]	ClkType	Peripheral Clock Selection of each type,
  38:./Drivers/source/lpc17xx_clkpwr.c ****  * 				should be one of the following:
  39:./Drivers/source/lpc17xx_clkpwr.c ****  *				- CLKPWR_PCLKSEL_WDT   		: WDT
  40:./Drivers/source/lpc17xx_clkpwr.c **** 				- CLKPWR_PCLKSEL_TIMER0   	: Timer 0
  41:./Drivers/source/lpc17xx_clkpwr.c **** 				- CLKPWR_PCLKSEL_TIMER1   	: Timer 1
  42:./Drivers/source/lpc17xx_clkpwr.c **** 				- CLKPWR_PCLKSEL_UART0   	: UART 0
  43:./Drivers/source/lpc17xx_clkpwr.c **** 				- CLKPWR_PCLKSEL_UART1  	: UART 1
  44:./Drivers/source/lpc17xx_clkpwr.c **** 				- CLKPWR_PCLKSEL_PWM1   	: PWM 1
  45:./Drivers/source/lpc17xx_clkpwr.c **** 				- CLKPWR_PCLKSEL_I2C0   	: I2C 0
  46:./Drivers/source/lpc17xx_clkpwr.c **** 				- CLKPWR_PCLKSEL_SPI   		: SPI
  47:./Drivers/source/lpc17xx_clkpwr.c **** 				- CLKPWR_PCLKSEL_SSP1   	: SSP 1
  48:./Drivers/source/lpc17xx_clkpwr.c **** 				- CLKPWR_PCLKSEL_DAC   		: DAC
  49:./Drivers/source/lpc17xx_clkpwr.c **** 				- CLKPWR_PCLKSEL_ADC   		: ADC
  50:./Drivers/source/lpc17xx_clkpwr.c **** 				- CLKPWR_PCLKSEL_CAN1  		: CAN 1
  51:./Drivers/source/lpc17xx_clkpwr.c **** 				- CLKPWR_PCLKSEL_CAN2  		: CAN 2
  52:./Drivers/source/lpc17xx_clkpwr.c **** 				- CLKPWR_PCLKSEL_ACF   		: ACF
  53:./Drivers/source/lpc17xx_clkpwr.c **** 				- CLKPWR_PCLKSEL_QEI 		: QEI
  54:./Drivers/source/lpc17xx_clkpwr.c **** 				- CLKPWR_PCLKSEL_PCB   		: PCB
  55:./Drivers/source/lpc17xx_clkpwr.c **** 				- CLKPWR_PCLKSEL_I2C1   	: I2C 1
  56:./Drivers/source/lpc17xx_clkpwr.c **** 				- CLKPWR_PCLKSEL_SSP0   	: SSP 0
  57:./Drivers/source/lpc17xx_clkpwr.c **** 				- CLKPWR_PCLKSEL_TIMER2   	: Timer 2
  58:./Drivers/source/lpc17xx_clkpwr.c **** 				- CLKPWR_PCLKSEL_TIMER3   	: Timer 3
  59:./Drivers/source/lpc17xx_clkpwr.c **** 				- CLKPWR_PCLKSEL_UART2   	: UART 2
  60:./Drivers/source/lpc17xx_clkpwr.c **** 				- CLKPWR_PCLKSEL_UART3   	: UART 3
  61:./Drivers/source/lpc17xx_clkpwr.c **** 				- CLKPWR_PCLKSEL_I2C2   	: I2C 2
  62:./Drivers/source/lpc17xx_clkpwr.c **** 				- CLKPWR_PCLKSEL_I2S   		: I2S
  63:./Drivers/source/lpc17xx_clkpwr.c **** 				- CLKPWR_PCLKSEL_RIT   		: RIT
  64:./Drivers/source/lpc17xx_clkpwr.c **** 				- CLKPWR_PCLKSEL_SYSCON   	: SYSCON
  65:./Drivers/source/lpc17xx_clkpwr.c **** 				- CLKPWR_PCLKSEL_MC 		: MC
  66:./Drivers/source/lpc17xx_clkpwr.c **** 
  67:./Drivers/source/lpc17xx_clkpwr.c ****  * @param[in]	DivVal	Value of divider, should be:
  68:./Drivers/source/lpc17xx_clkpwr.c ****  * 				- CLKPWR_PCLKSEL_CCLK_DIV_4 : PCLK_peripheral = CCLK/4
  69:./Drivers/source/lpc17xx_clkpwr.c ****  * 				- CLKPWR_PCLKSEL_CCLK_DIV_1 : PCLK_peripheral = CCLK/1
  70:./Drivers/source/lpc17xx_clkpwr.c ****  *				- CLKPWR_PCLKSEL_CCLK_DIV_2 : PCLK_peripheral = CCLK/2
  71:./Drivers/source/lpc17xx_clkpwr.c ****  *
  72:./Drivers/source/lpc17xx_clkpwr.c ****  * @return none
  73:./Drivers/source/lpc17xx_clkpwr.c ****  **********************************************************************/
  74:./Drivers/source/lpc17xx_clkpwr.c **** void CLKPWR_SetPCLKDiv (uint32_t ClkType, uint32_t DivVal)
  75:./Drivers/source/lpc17xx_clkpwr.c **** {
  27              		.loc 1 75 0
  28              		.cfi_startproc
  29              		@ args = 0, pretend = 0, frame = 0
  30              		@ frame_needed = 0, uses_anonymous_args = 0
  31              		@ link register save eliminated.
  32              	.LVL0:
  76:./Drivers/source/lpc17xx_clkpwr.c **** 	uint32_t bitpos;
  77:./Drivers/source/lpc17xx_clkpwr.c **** 
  78:./Drivers/source/lpc17xx_clkpwr.c **** 	bitpos = (ClkType < 32) ? (ClkType) : (ClkType - 32);
  33              		.loc 1 78 0
  34 0000 1F28     		cmp	r0, #31
  35 0002 11D9     		bls	.L2
  36              	.LVL1:
  37              		.loc 1 78 0 is_stmt 0 discriminator 1
  38 0004 2038     		subs	r0, r0, #32
  39              	.LVL2:
  79:./Drivers/source/lpc17xx_clkpwr.c **** 
  80:./Drivers/source/lpc17xx_clkpwr.c **** 	/* PCLKSEL0 selected */
  81:./Drivers/source/lpc17xx_clkpwr.c **** 	if (ClkType < 32)
  82:./Drivers/source/lpc17xx_clkpwr.c **** 	{
  83:./Drivers/source/lpc17xx_clkpwr.c **** 		/* Clear two bit at bit position */
  84:./Drivers/source/lpc17xx_clkpwr.c **** 		LPC_SC->PCLKSEL0 &= (~(CLKPWR_PCLKSEL_BITMASK(bitpos)));
  85:./Drivers/source/lpc17xx_clkpwr.c **** 
  86:./Drivers/source/lpc17xx_clkpwr.c **** 		/* Set two selected bit */
  87:./Drivers/source/lpc17xx_clkpwr.c **** 		LPC_SC->PCLKSEL0 |= (CLKPWR_PCLKSEL_SET(bitpos, DivVal));
  88:./Drivers/source/lpc17xx_clkpwr.c **** 	}
  89:./Drivers/source/lpc17xx_clkpwr.c **** 	/* PCLKSEL1 selected */
  90:./Drivers/source/lpc17xx_clkpwr.c **** 	else
  91:./Drivers/source/lpc17xx_clkpwr.c **** 	{
  92:./Drivers/source/lpc17xx_clkpwr.c **** 		/* Clear two bit at bit position */
  93:./Drivers/source/lpc17xx_clkpwr.c **** 		LPC_SC->PCLKSEL1 &= ~(CLKPWR_PCLKSEL_BITMASK(bitpos));
  40              		.loc 1 93 0 is_stmt 1 discriminator 1
  41 0006 0322     		movs	r2, #3
  42 0008 8240     		lsls	r2, r2, r0
  94:./Drivers/source/lpc17xx_clkpwr.c **** 
  95:./Drivers/source/lpc17xx_clkpwr.c **** 		/* Set two selected bit */
  96:./Drivers/source/lpc17xx_clkpwr.c **** 		LPC_SC->PCLKSEL1 |= (CLKPWR_PCLKSEL_SET(bitpos, DivVal));
  43              		.loc 1 96 0 discriminator 1
  44 000a 01FA00F0 		lsl	r0, r1, r0
  45              	.LVL3:
  93:./Drivers/source/lpc17xx_clkpwr.c **** 		LPC_SC->PCLKSEL1 &= ~(CLKPWR_PCLKSEL_BITMASK(bitpos));
  46              		.loc 1 93 0 discriminator 1
  47 000e 0E4B     		ldr	r3, .L5
  48 0010 D3F8AC11 		ldr	r1, [r3, #428]
  49              	.LVL4:
  50 0014 21EA0202 		bic	r2, r1, r2
  51 0018 C3F8AC21 		str	r2, [r3, #428]
  52              		.loc 1 96 0 discriminator 1
  53 001c D3F8AC21 		ldr	r2, [r3, #428]
  54 0020 1043     		orrs	r0, r0, r2
  55 0022 C3F8AC01 		str	r0, [r3, #428]
  56 0026 7047     		bx	lr
  57              	.LVL5:
  58              	.L2:
  84:./Drivers/source/lpc17xx_clkpwr.c **** 		LPC_SC->PCLKSEL0 &= (~(CLKPWR_PCLKSEL_BITMASK(bitpos)));
  59              		.loc 1 84 0
  60 0028 0322     		movs	r2, #3
  61 002a 8240     		lsls	r2, r2, r0
  87:./Drivers/source/lpc17xx_clkpwr.c **** 		LPC_SC->PCLKSEL0 |= (CLKPWR_PCLKSEL_SET(bitpos, DivVal));
  62              		.loc 1 87 0
  63 002c 8140     		lsls	r1, r1, r0
  64              	.LVL6:
  84:./Drivers/source/lpc17xx_clkpwr.c **** 		LPC_SC->PCLKSEL0 &= (~(CLKPWR_PCLKSEL_BITMASK(bitpos)));
  65              		.loc 1 84 0
  66 002e 064B     		ldr	r3, .L5
  67 0030 D3F8A801 		ldr	r0, [r3, #424]
  68              	.LVL7:
  69 0034 20EA0202 		bic	r2, r0, r2
  70 0038 C3F8A821 		str	r2, [r3, #424]
  87:./Drivers/source/lpc17xx_clkpwr.c **** 		LPC_SC->PCLKSEL0 |= (CLKPWR_PCLKSEL_SET(bitpos, DivVal));
  71              		.loc 1 87 0
  72 003c D3F8A821 		ldr	r2, [r3, #424]
  73 0040 1143     		orrs	r1, r1, r2
  74 0042 C3F8A811 		str	r1, [r3, #424]
  75 0046 7047     		bx	lr
  76              	.L6:
  77              		.align	2
  78              	.L5:
  79 0048 00C00F40 		.word	1074774016
  80              		.cfi_endproc
  81              	.LFE55:
  83              		.section	.text.CLKPWR_GetPCLKSEL,"ax",%progbits
  84              		.align	2
  85              		.global	CLKPWR_GetPCLKSEL
  86              		.thumb
  87              		.thumb_func
  89              	CLKPWR_GetPCLKSEL:
  90              	.LFB56:
  97:./Drivers/source/lpc17xx_clkpwr.c **** 	}
  98:./Drivers/source/lpc17xx_clkpwr.c **** }
  99:./Drivers/source/lpc17xx_clkpwr.c **** 
 100:./Drivers/source/lpc17xx_clkpwr.c **** 
 101:./Drivers/source/lpc17xx_clkpwr.c **** /*********************************************************************//**
 102:./Drivers/source/lpc17xx_clkpwr.c ****  * @brief		Get current value of each Peripheral Clock Selection
 103:./Drivers/source/lpc17xx_clkpwr.c ****  * @param[in]	ClkType	Peripheral Clock Selection of each type,
 104:./Drivers/source/lpc17xx_clkpwr.c ****  * 				should be one of the following:
 105:./Drivers/source/lpc17xx_clkpwr.c ****  *				- CLKPWR_PCLKSEL_WDT   		: WDT
 106:./Drivers/source/lpc17xx_clkpwr.c **** 				- CLKPWR_PCLKSEL_TIMER0   	: Timer 0
 107:./Drivers/source/lpc17xx_clkpwr.c **** 				- CLKPWR_PCLKSEL_TIMER1   	: Timer 1
 108:./Drivers/source/lpc17xx_clkpwr.c **** 				- CLKPWR_PCLKSEL_UART0   	: UART 0
 109:./Drivers/source/lpc17xx_clkpwr.c **** 				- CLKPWR_PCLKSEL_UART1  	: UART 1
 110:./Drivers/source/lpc17xx_clkpwr.c **** 				- CLKPWR_PCLKSEL_PWM1   	: PWM 1
 111:./Drivers/source/lpc17xx_clkpwr.c **** 				- CLKPWR_PCLKSEL_I2C0   	: I2C 0
 112:./Drivers/source/lpc17xx_clkpwr.c **** 				- CLKPWR_PCLKSEL_SPI   		: SPI
 113:./Drivers/source/lpc17xx_clkpwr.c **** 				- CLKPWR_PCLKSEL_SSP1   	: SSP 1
 114:./Drivers/source/lpc17xx_clkpwr.c **** 				- CLKPWR_PCLKSEL_DAC   		: DAC
 115:./Drivers/source/lpc17xx_clkpwr.c **** 				- CLKPWR_PCLKSEL_ADC   		: ADC
 116:./Drivers/source/lpc17xx_clkpwr.c **** 				- CLKPWR_PCLKSEL_CAN1  		: CAN 1
 117:./Drivers/source/lpc17xx_clkpwr.c **** 				- CLKPWR_PCLKSEL_CAN2  		: CAN 2
 118:./Drivers/source/lpc17xx_clkpwr.c **** 				- CLKPWR_PCLKSEL_ACF   		: ACF
 119:./Drivers/source/lpc17xx_clkpwr.c **** 				- CLKPWR_PCLKSEL_QEI 		: QEI
 120:./Drivers/source/lpc17xx_clkpwr.c **** 				- CLKPWR_PCLKSEL_PCB   		: PCB
 121:./Drivers/source/lpc17xx_clkpwr.c **** 				- CLKPWR_PCLKSEL_I2C1   	: I2C 1
 122:./Drivers/source/lpc17xx_clkpwr.c **** 				- CLKPWR_PCLKSEL_SSP0   	: SSP 0
 123:./Drivers/source/lpc17xx_clkpwr.c **** 				- CLKPWR_PCLKSEL_TIMER2   	: Timer 2
 124:./Drivers/source/lpc17xx_clkpwr.c **** 				- CLKPWR_PCLKSEL_TIMER3   	: Timer 3
 125:./Drivers/source/lpc17xx_clkpwr.c **** 				- CLKPWR_PCLKSEL_UART2   	: UART 2
 126:./Drivers/source/lpc17xx_clkpwr.c **** 				- CLKPWR_PCLKSEL_UART3   	: UART 3
 127:./Drivers/source/lpc17xx_clkpwr.c **** 				- CLKPWR_PCLKSEL_I2C2   	: I2C 2
 128:./Drivers/source/lpc17xx_clkpwr.c **** 				- CLKPWR_PCLKSEL_I2S   		: I2S
 129:./Drivers/source/lpc17xx_clkpwr.c **** 				- CLKPWR_PCLKSEL_RIT   		: RIT
 130:./Drivers/source/lpc17xx_clkpwr.c **** 				- CLKPWR_PCLKSEL_SYSCON   	: SYSCON
 131:./Drivers/source/lpc17xx_clkpwr.c **** 				- CLKPWR_PCLKSEL_MC 		: MC
 132:./Drivers/source/lpc17xx_clkpwr.c **** 
 133:./Drivers/source/lpc17xx_clkpwr.c ****  * @return		Value of Selected Peripheral Clock Selection
 134:./Drivers/source/lpc17xx_clkpwr.c ****  **********************************************************************/
 135:./Drivers/source/lpc17xx_clkpwr.c **** uint32_t CLKPWR_GetPCLKSEL (uint32_t ClkType)
 136:./Drivers/source/lpc17xx_clkpwr.c **** {
  91              		.loc 1 136 0
  92              		.cfi_startproc
  93              		@ args = 0, pretend = 0, frame = 0
  94              		@ frame_needed = 0, uses_anonymous_args = 0
  95              		@ link register save eliminated.
  96              	.LVL8:
 137:./Drivers/source/lpc17xx_clkpwr.c **** 	uint32_t bitpos, retval;
 138:./Drivers/source/lpc17xx_clkpwr.c **** 
 139:./Drivers/source/lpc17xx_clkpwr.c **** 	if (ClkType < 32)
 140:./Drivers/source/lpc17xx_clkpwr.c **** 	{
 141:./Drivers/source/lpc17xx_clkpwr.c **** 		bitpos = ClkType;
 142:./Drivers/source/lpc17xx_clkpwr.c **** 		retval = LPC_SC->PCLKSEL0;
  97              		.loc 1 142 0
  98 0000 064B     		ldr	r3, .L10
 139:./Drivers/source/lpc17xx_clkpwr.c **** 	if (ClkType < 32)
  99              		.loc 1 139 0
 100 0002 1F28     		cmp	r0, #31
 101              	.LVL9:
 102              		.loc 1 142 0
 103 0004 92BF     		itee	ls
 104 0006 D3F8A831 		ldrls	r3, [r3, #424]
 105              	.LVL10:
 143:./Drivers/source/lpc17xx_clkpwr.c **** 	}
 144:./Drivers/source/lpc17xx_clkpwr.c **** 	else
 145:./Drivers/source/lpc17xx_clkpwr.c **** 	{
 146:./Drivers/source/lpc17xx_clkpwr.c **** 		bitpos = ClkType - 32;
 147:./Drivers/source/lpc17xx_clkpwr.c **** 		retval = LPC_SC->PCLKSEL1;
 106              		.loc 1 147 0
 107 000a D3F8AC31 		ldrhi	r3, [r3, #428]
 108              	.LVL11:
 146:./Drivers/source/lpc17xx_clkpwr.c **** 		bitpos = ClkType - 32;
 109              		.loc 1 146 0
 110 000e 2038     		subhi	r0, r0, #32
 111              	.LVL12:
 148:./Drivers/source/lpc17xx_clkpwr.c **** 	}
 149:./Drivers/source/lpc17xx_clkpwr.c **** 
 150:./Drivers/source/lpc17xx_clkpwr.c **** 	retval = CLKPWR_PCLKSEL_GET(bitpos, retval);
 112              		.loc 1 150 0
 113 0010 23FA00F0 		lsr	r0, r3, r0
 114              	.LVL13:
 151:./Drivers/source/lpc17xx_clkpwr.c **** 	return retval;
 152:./Drivers/source/lpc17xx_clkpwr.c **** }
 115              		.loc 1 152 0
 116 0014 00F00300 		and	r0, r0, #3
 117              	.LVL14:
 118 0018 7047     		bx	lr
 119              	.L11:
 120 001a 00BF     		.align	2
 121              	.L10:
 122 001c 00C00F40 		.word	1074774016
 123              		.cfi_endproc
 124              	.LFE56:
 126              		.section	.text.CLKPWR_GetPCLK,"ax",%progbits
 127              		.align	2
 128              		.global	CLKPWR_GetPCLK
 129              		.thumb
 130              		.thumb_func
 132              	CLKPWR_GetPCLK:
 133              	.LFB57:
 153:./Drivers/source/lpc17xx_clkpwr.c **** 
 154:./Drivers/source/lpc17xx_clkpwr.c **** 
 155:./Drivers/source/lpc17xx_clkpwr.c **** 
 156:./Drivers/source/lpc17xx_clkpwr.c **** /*********************************************************************//**
 157:./Drivers/source/lpc17xx_clkpwr.c ****  * @brief 		Get current value of each Peripheral Clock
 158:./Drivers/source/lpc17xx_clkpwr.c ****  * @param[in]	ClkType	Peripheral Clock Selection of each type,
 159:./Drivers/source/lpc17xx_clkpwr.c ****  * 				should be one of the following:
 160:./Drivers/source/lpc17xx_clkpwr.c ****  *				- CLKPWR_PCLKSEL_WDT   		: WDT
 161:./Drivers/source/lpc17xx_clkpwr.c **** 				- CLKPWR_PCLKSEL_TIMER0   	: Timer 0
 162:./Drivers/source/lpc17xx_clkpwr.c **** 				- CLKPWR_PCLKSEL_TIMER1   	: Timer 1
 163:./Drivers/source/lpc17xx_clkpwr.c **** 				- CLKPWR_PCLKSEL_UART0   	: UART 0
 164:./Drivers/source/lpc17xx_clkpwr.c **** 				- CLKPWR_PCLKSEL_UART1  	: UART 1
 165:./Drivers/source/lpc17xx_clkpwr.c **** 				- CLKPWR_PCLKSEL_PWM1   	: PWM 1
 166:./Drivers/source/lpc17xx_clkpwr.c **** 				- CLKPWR_PCLKSEL_I2C0   	: I2C 0
 167:./Drivers/source/lpc17xx_clkpwr.c **** 				- CLKPWR_PCLKSEL_SPI   		: SPI
 168:./Drivers/source/lpc17xx_clkpwr.c **** 				- CLKPWR_PCLKSEL_SSP1   	: SSP 1
 169:./Drivers/source/lpc17xx_clkpwr.c **** 				- CLKPWR_PCLKSEL_DAC   		: DAC
 170:./Drivers/source/lpc17xx_clkpwr.c **** 				- CLKPWR_PCLKSEL_ADC   		: ADC
 171:./Drivers/source/lpc17xx_clkpwr.c **** 				- CLKPWR_PCLKSEL_CAN1  		: CAN 1
 172:./Drivers/source/lpc17xx_clkpwr.c **** 				- CLKPWR_PCLKSEL_CAN2  		: CAN 2
 173:./Drivers/source/lpc17xx_clkpwr.c **** 				- CLKPWR_PCLKSEL_ACF   		: ACF
 174:./Drivers/source/lpc17xx_clkpwr.c **** 				- CLKPWR_PCLKSEL_QEI 		: QEI
 175:./Drivers/source/lpc17xx_clkpwr.c **** 				- CLKPWR_PCLKSEL_PCB   		: PCB
 176:./Drivers/source/lpc17xx_clkpwr.c **** 				- CLKPWR_PCLKSEL_I2C1   	: I2C 1
 177:./Drivers/source/lpc17xx_clkpwr.c **** 				- CLKPWR_PCLKSEL_SSP0   	: SSP 0
 178:./Drivers/source/lpc17xx_clkpwr.c **** 				- CLKPWR_PCLKSEL_TIMER2   	: Timer 2
 179:./Drivers/source/lpc17xx_clkpwr.c **** 				- CLKPWR_PCLKSEL_TIMER3   	: Timer 3
 180:./Drivers/source/lpc17xx_clkpwr.c **** 				- CLKPWR_PCLKSEL_UART2   	: UART 2
 181:./Drivers/source/lpc17xx_clkpwr.c **** 				- CLKPWR_PCLKSEL_UART3   	: UART 3
 182:./Drivers/source/lpc17xx_clkpwr.c **** 				- CLKPWR_PCLKSEL_I2C2   	: I2C 2
 183:./Drivers/source/lpc17xx_clkpwr.c **** 				- CLKPWR_PCLKSEL_I2S   		: I2S
 184:./Drivers/source/lpc17xx_clkpwr.c **** 				- CLKPWR_PCLKSEL_RIT   		: RIT
 185:./Drivers/source/lpc17xx_clkpwr.c **** 				- CLKPWR_PCLKSEL_SYSCON   	: SYSCON
 186:./Drivers/source/lpc17xx_clkpwr.c **** 				- CLKPWR_PCLKSEL_MC 		: MC
 187:./Drivers/source/lpc17xx_clkpwr.c **** 
 188:./Drivers/source/lpc17xx_clkpwr.c ****  * @return		Value of Selected Peripheral Clock
 189:./Drivers/source/lpc17xx_clkpwr.c ****  **********************************************************************/
 190:./Drivers/source/lpc17xx_clkpwr.c **** uint32_t CLKPWR_GetPCLK (uint32_t ClkType)
 191:./Drivers/source/lpc17xx_clkpwr.c **** {
 134              		.loc 1 191 0
 135              		.cfi_startproc
 136              		@ args = 0, pretend = 0, frame = 0
 137              		@ frame_needed = 0, uses_anonymous_args = 0
 138              		@ link register save eliminated.
 139              	.LVL15:
 140              	.LBB12:
 141              	.LBB13:
 142:./Drivers/source/lpc17xx_clkpwr.c **** 		retval = LPC_SC->PCLKSEL0;
 142              		.loc 1 142 0
 143 0000 0E4A     		ldr	r2, .L19
 139:./Drivers/source/lpc17xx_clkpwr.c **** 	if (ClkType < 32)
 144              		.loc 1 139 0
 145 0002 1F28     		cmp	r0, #31
 142:./Drivers/source/lpc17xx_clkpwr.c **** 		retval = LPC_SC->PCLKSEL0;
 146              		.loc 1 142 0
 147 0004 92BF     		itee	ls
 148 0006 D2F8A821 		ldrls	r2, [r2, #424]
 147:./Drivers/source/lpc17xx_clkpwr.c **** 		retval = LPC_SC->PCLKSEL1;
 149              		.loc 1 147 0
 150 000a D2F8AC21 		ldrhi	r2, [r2, #428]
 146:./Drivers/source/lpc17xx_clkpwr.c **** 		bitpos = ClkType - 32;
 151              		.loc 1 146 0
 152 000e 2038     		subhi	r0, r0, #32
 153              	.LVL16:
 150:./Drivers/source/lpc17xx_clkpwr.c **** 	retval = CLKPWR_PCLKSEL_GET(bitpos, retval);
 154              		.loc 1 150 0
 155 0010 22FA00F0 		lsr	r0, r2, r0
 156              	.LBE13:
 157              	.LBE12:
 192:./Drivers/source/lpc17xx_clkpwr.c **** 	uint32_t retval, div;
 193:./Drivers/source/lpc17xx_clkpwr.c **** 
 194:./Drivers/source/lpc17xx_clkpwr.c **** 	retval = SystemCoreClock;
 158              		.loc 1 194 0
 159 0014 0A4B     		ldr	r3, .L19+4
 195:./Drivers/source/lpc17xx_clkpwr.c **** 	div = CLKPWR_GetPCLKSEL(ClkType);
 196:./Drivers/source/lpc17xx_clkpwr.c **** 
 197:./Drivers/source/lpc17xx_clkpwr.c **** 	switch (div)
 160              		.loc 1 197 0
 161 0016 10F00300 		ands	r0, r0, #3
 194:./Drivers/source/lpc17xx_clkpwr.c **** 	retval = SystemCoreClock;
 162              		.loc 1 194 0
 163 001a 1B68     		ldr	r3, [r3]
 164              	.LVL17:
 165              		.loc 1 197 0
 166 001c 0AD0     		beq	.L15
 167 001e 0228     		cmp	r0, #2
 168 0020 02D8     		bhi	.L18
 169              	.LVL18:
 198:./Drivers/source/lpc17xx_clkpwr.c **** 	{
 199:./Drivers/source/lpc17xx_clkpwr.c **** 	case 0:
 200:./Drivers/source/lpc17xx_clkpwr.c **** 		div = 4;
 201:./Drivers/source/lpc17xx_clkpwr.c **** 		break;
 202:./Drivers/source/lpc17xx_clkpwr.c **** 
 203:./Drivers/source/lpc17xx_clkpwr.c **** 	case 1:
 204:./Drivers/source/lpc17xx_clkpwr.c **** 		div = 1;
 205:./Drivers/source/lpc17xx_clkpwr.c **** 		break;
 206:./Drivers/source/lpc17xx_clkpwr.c **** 
 207:./Drivers/source/lpc17xx_clkpwr.c **** 	case 2:
 208:./Drivers/source/lpc17xx_clkpwr.c **** 		div = 2;
 209:./Drivers/source/lpc17xx_clkpwr.c **** 		break;
 210:./Drivers/source/lpc17xx_clkpwr.c **** 
 211:./Drivers/source/lpc17xx_clkpwr.c **** 	case 3:
 212:./Drivers/source/lpc17xx_clkpwr.c **** 		div = 8;
 213:./Drivers/source/lpc17xx_clkpwr.c **** 		break;
 214:./Drivers/source/lpc17xx_clkpwr.c **** 	}
 215:./Drivers/source/lpc17xx_clkpwr.c **** 	retval /= div;
 216:./Drivers/source/lpc17xx_clkpwr.c **** 
 217:./Drivers/source/lpc17xx_clkpwr.c **** 	return retval;
 218:./Drivers/source/lpc17xx_clkpwr.c **** }
 170              		.loc 1 218 0
 171 0022 B3FBF0F0 		udiv	r0, r3, r0
 172              	.LVL19:
 173 0026 7047     		bx	lr
 174              	.LVL20:
 175              	.L18:
 197:./Drivers/source/lpc17xx_clkpwr.c **** 	switch (div)
 176              		.loc 1 197 0
 177 0028 0328     		cmp	r0, #3
 178 002a 03D1     		bne	.L15
 179              	.LVL21:
 212:./Drivers/source/lpc17xx_clkpwr.c **** 		div = 8;
 180              		.loc 1 212 0
 181 002c 0820     		movs	r0, #8
 182              	.LVL22:
 183              		.loc 1 218 0
 184 002e B3FBF0F0 		udiv	r0, r3, r0
 185              	.LVL23:
 186 0032 7047     		bx	lr
 187              	.LVL24:
 188              	.L15:
 200:./Drivers/source/lpc17xx_clkpwr.c **** 		div = 4;
 189              		.loc 1 200 0
 190 0034 0420     		movs	r0, #4
 191              	.LVL25:
 192              		.loc 1 218 0
 193 0036 B3FBF0F0 		udiv	r0, r3, r0
 194              	.LVL26:
 195 003a 7047     		bx	lr
 196              	.L20:
 197              		.align	2
 198              	.L19:
 199 003c 00C00F40 		.word	1074774016
 200 0040 00000000 		.word	SystemCoreClock
 201              		.cfi_endproc
 202              	.LFE57:
 204              		.section	.text.CLKPWR_ConfigPPWR,"ax",%progbits
 205              		.align	2
 206              		.global	CLKPWR_ConfigPPWR
 207              		.thumb
 208              		.thumb_func
 210              	CLKPWR_ConfigPPWR:
 211              	.LFB58:
 219:./Drivers/source/lpc17xx_clkpwr.c **** 
 220:./Drivers/source/lpc17xx_clkpwr.c **** 
 221:./Drivers/source/lpc17xx_clkpwr.c **** 
 222:./Drivers/source/lpc17xx_clkpwr.c **** /*********************************************************************//**
 223:./Drivers/source/lpc17xx_clkpwr.c ****  * @brief 		Configure power supply for each peripheral according to NewState
 224:./Drivers/source/lpc17xx_clkpwr.c ****  * @param[in]	PPType	Type of peripheral used to enable power,
 225:./Drivers/source/lpc17xx_clkpwr.c ****  *     					should be one of the following:
 226:./Drivers/source/lpc17xx_clkpwr.c ****  *     			-  CLKPWR_PCONP_PCTIM0 		: Timer 0
 227:./Drivers/source/lpc17xx_clkpwr.c **** 				-  CLKPWR_PCONP_PCTIM1 		: Timer 1
 228:./Drivers/source/lpc17xx_clkpwr.c **** 				-  CLKPWR_PCONP_PCUART0  	: UART 0
 229:./Drivers/source/lpc17xx_clkpwr.c **** 				-  CLKPWR_PCONP_PCUART1   	: UART 1
 230:./Drivers/source/lpc17xx_clkpwr.c **** 				-  CLKPWR_PCONP_PCPWM1 		: PWM 1
 231:./Drivers/source/lpc17xx_clkpwr.c **** 				-  CLKPWR_PCONP_PCI2C0 		: I2C 0
 232:./Drivers/source/lpc17xx_clkpwr.c **** 				-  CLKPWR_PCONP_PCSPI   	: SPI
 233:./Drivers/source/lpc17xx_clkpwr.c **** 				-  CLKPWR_PCONP_PCRTC   	: RTC
 234:./Drivers/source/lpc17xx_clkpwr.c **** 				-  CLKPWR_PCONP_PCSSP1 		: SSP 1
 235:./Drivers/source/lpc17xx_clkpwr.c **** 				-  CLKPWR_PCONP_PCAD   		: ADC
 236:./Drivers/source/lpc17xx_clkpwr.c **** 				-  CLKPWR_PCONP_PCAN1   	: CAN 1
 237:./Drivers/source/lpc17xx_clkpwr.c **** 				-  CLKPWR_PCONP_PCAN2   	: CAN 2
 238:./Drivers/source/lpc17xx_clkpwr.c **** 				-  CLKPWR_PCONP_PCGPIO 		: GPIO
 239:./Drivers/source/lpc17xx_clkpwr.c **** 				-  CLKPWR_PCONP_PCRIT 		: RIT
 240:./Drivers/source/lpc17xx_clkpwr.c **** 				-  CLKPWR_PCONP_PCMC 		: MC
 241:./Drivers/source/lpc17xx_clkpwr.c **** 				-  CLKPWR_PCONP_PCQEI 		: QEI
 242:./Drivers/source/lpc17xx_clkpwr.c **** 				-  CLKPWR_PCONP_PCI2C1   	: I2C 1
 243:./Drivers/source/lpc17xx_clkpwr.c **** 				-  CLKPWR_PCONP_PCSSP0 		: SSP 0
 244:./Drivers/source/lpc17xx_clkpwr.c **** 				-  CLKPWR_PCONP_PCTIM2 		: Timer 2
 245:./Drivers/source/lpc17xx_clkpwr.c **** 				-  CLKPWR_PCONP_PCTIM3 		: Timer 3
 246:./Drivers/source/lpc17xx_clkpwr.c **** 				-  CLKPWR_PCONP_PCUART2  	: UART 2
 247:./Drivers/source/lpc17xx_clkpwr.c **** 				-  CLKPWR_PCONP_PCUART3   	: UART 3
 248:./Drivers/source/lpc17xx_clkpwr.c **** 				-  CLKPWR_PCONP_PCI2C2 		: I2C 2
 249:./Drivers/source/lpc17xx_clkpwr.c **** 				-  CLKPWR_PCONP_PCI2S   	: I2S
 250:./Drivers/source/lpc17xx_clkpwr.c **** 				-  CLKPWR_PCONP_PCGPDMA   	: GPDMA
 251:./Drivers/source/lpc17xx_clkpwr.c **** 				-  CLKPWR_PCONP_PCENET 		: Ethernet
 252:./Drivers/source/lpc17xx_clkpwr.c **** 				-  CLKPWR_PCONP_PCUSB   	: USB
 253:./Drivers/source/lpc17xx_clkpwr.c ****  *
 254:./Drivers/source/lpc17xx_clkpwr.c ****  * @param[in]	NewState	New state of Peripheral Power, should be:
 255:./Drivers/source/lpc17xx_clkpwr.c ****  * 				- ENABLE	: Enable power for this peripheral
 256:./Drivers/source/lpc17xx_clkpwr.c ****  * 				- DISABLE	: Disable power for this peripheral
 257:./Drivers/source/lpc17xx_clkpwr.c ****  *
 258:./Drivers/source/lpc17xx_clkpwr.c ****  * @return none
 259:./Drivers/source/lpc17xx_clkpwr.c ****  **********************************************************************/
 260:./Drivers/source/lpc17xx_clkpwr.c **** void CLKPWR_ConfigPPWR (uint32_t PPType, FunctionalState NewState)
 261:./Drivers/source/lpc17xx_clkpwr.c **** {
 212              		.loc 1 261 0
 213              		.cfi_startproc
 214              		@ args = 0, pretend = 0, frame = 0
 215              		@ frame_needed = 0, uses_anonymous_args = 0
 216              		@ link register save eliminated.
 217              	.LVL27:
 262:./Drivers/source/lpc17xx_clkpwr.c **** 	if (NewState == ENABLE)
 218              		.loc 1 262 0
 219 0000 0129     		cmp	r1, #1
 220 0002 0AD0     		beq	.L24
 263:./Drivers/source/lpc17xx_clkpwr.c **** 	{
 264:./Drivers/source/lpc17xx_clkpwr.c **** 		LPC_SC->PCONP |= PPType & CLKPWR_PCONP_BITMASK;
 265:./Drivers/source/lpc17xx_clkpwr.c **** 	}
 266:./Drivers/source/lpc17xx_clkpwr.c **** 	else if (NewState == DISABLE)
 221              		.loc 1 266 0
 222 0004 41B9     		cbnz	r1, .L21
 267:./Drivers/source/lpc17xx_clkpwr.c **** 	{
 268:./Drivers/source/lpc17xx_clkpwr.c **** 		LPC_SC->PCONP &= (~PPType) & CLKPWR_PCONP_BITMASK;
 223              		.loc 1 268 0
 224 0006 094A     		ldr	r2, .L25
 225 0008 094B     		ldr	r3, .L25+4
 226 000a D2F8C410 		ldr	r1, [r2, #196]
 227              	.LVL28:
 228 000e 0B40     		ands	r3, r3, r1
 229 0010 23EA0003 		bic	r3, r3, r0
 230 0014 C2F8C430 		str	r3, [r2, #196]
 231              	.L21:
 232 0018 7047     		bx	lr
 233              	.LVL29:
 234              	.L24:
 264:./Drivers/source/lpc17xx_clkpwr.c **** 		LPC_SC->PCONP |= PPType & CLKPWR_PCONP_BITMASK;
 235              		.loc 1 264 0
 236 001a 044A     		ldr	r2, .L25
 237 001c 044B     		ldr	r3, .L25+4
 238 001e D2F8C410 		ldr	r1, [r2, #196]
 239              	.LVL30:
 240 0022 0340     		ands	r3, r3, r0
 241 0024 0B43     		orrs	r3, r3, r1
 242 0026 C2F8C430 		str	r3, [r2, #196]
 243 002a 7047     		bx	lr
 244              	.L26:
 245              		.align	2
 246              	.L25:
 247 002c 00C00F40 		.word	1074774016
 248 0030 DEF7EFEF 		.word	-269486114
 249              		.cfi_endproc
 250              	.LFE58:
 252              		.section	.text.CLKPWR_Sleep,"ax",%progbits
 253              		.align	2
 254              		.global	CLKPWR_Sleep
 255              		.thumb
 256              		.thumb_func
 258              	CLKPWR_Sleep:
 259              	.LFB59:
 269:./Drivers/source/lpc17xx_clkpwr.c **** 	}
 270:./Drivers/source/lpc17xx_clkpwr.c **** }
 271:./Drivers/source/lpc17xx_clkpwr.c **** 
 272:./Drivers/source/lpc17xx_clkpwr.c **** 
 273:./Drivers/source/lpc17xx_clkpwr.c **** /*********************************************************************//**
 274:./Drivers/source/lpc17xx_clkpwr.c ****  * @brief 		Enter Sleep mode with co-operated instruction by the Cortex-M3.
 275:./Drivers/source/lpc17xx_clkpwr.c ****  * @param[in]	None
 276:./Drivers/source/lpc17xx_clkpwr.c ****  * @return		None
 277:./Drivers/source/lpc17xx_clkpwr.c ****  **********************************************************************/
 278:./Drivers/source/lpc17xx_clkpwr.c **** void CLKPWR_Sleep(void)
 279:./Drivers/source/lpc17xx_clkpwr.c **** {
 260              		.loc 1 279 0
 261              		.cfi_startproc
 262              		@ args = 0, pretend = 0, frame = 0
 263              		@ frame_needed = 0, uses_anonymous_args = 0
 264              		@ link register save eliminated.
 280:./Drivers/source/lpc17xx_clkpwr.c **** 	LPC_SC->PCON = 0x00;
 265              		.loc 1 280 0
 266 0000 024B     		ldr	r3, .L28
 267 0002 0022     		movs	r2, #0
 268 0004 C3F8C020 		str	r2, [r3, #192]
 269              	.LBB14:
 270              	.LBB15:
 271              		.file 2 "./Core/core_cmInstr.h"
   1:./Core/core_cmInstr.h **** /**************************************************************************//**
   2:./Core/core_cmInstr.h ****  * @file     core_cmInstr.h
   3:./Core/core_cmInstr.h ****  * @brief    CMSIS Cortex-M Core Instruction Access Header File
   4:./Core/core_cmInstr.h ****  * @version  V2.01
   5:./Core/core_cmInstr.h ****  * @date     06. December 2010
   6:./Core/core_cmInstr.h ****  *
   7:./Core/core_cmInstr.h ****  * @note
   8:./Core/core_cmInstr.h ****  * Copyright (C) 2009-2010 ARM Limited. All rights reserved.
   9:./Core/core_cmInstr.h ****  *
  10:./Core/core_cmInstr.h ****  * @par
  11:./Core/core_cmInstr.h ****  * ARM Limited (ARM) is supplying this software for use with Cortex-M
  12:./Core/core_cmInstr.h ****  * processor based microcontrollers.  This file can be freely distributed
  13:./Core/core_cmInstr.h ****  * within development tools that are supporting such ARM based processors.
  14:./Core/core_cmInstr.h ****  *
  15:./Core/core_cmInstr.h ****  * @par
  16:./Core/core_cmInstr.h ****  * THIS SOFTWARE IS PROVIDED "AS IS".  NO WARRANTIES, WHETHER EXPRESS, IMPLIED
  17:./Core/core_cmInstr.h ****  * OR STATUTORY, INCLUDING, BUT NOT LIMITED TO, IMPLIED WARRANTIES OF
  18:./Core/core_cmInstr.h ****  * MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE APPLY TO THIS SOFTWARE.
  19:./Core/core_cmInstr.h ****  * ARM SHALL NOT, IN ANY CIRCUMSTANCES, BE LIABLE FOR SPECIAL, INCIDENTAL, OR
  20:./Core/core_cmInstr.h ****  * CONSEQUENTIAL DAMAGES, FOR ANY REASON WHATSOEVER.
  21:./Core/core_cmInstr.h ****  *
  22:./Core/core_cmInstr.h ****  ******************************************************************************/
  23:./Core/core_cmInstr.h **** 
  24:./Core/core_cmInstr.h **** #ifndef __CORE_CMINSTR_H__
  25:./Core/core_cmInstr.h **** #define __CORE_CMINSTR_H__
  26:./Core/core_cmInstr.h **** 
  27:./Core/core_cmInstr.h **** 
  28:./Core/core_cmInstr.h **** /* ##########################  Core Instruction Access  ######################### */
  29:./Core/core_cmInstr.h **** /** \addtogroup CMSIS_Core_InstructionInterface CMSIS Core Instruction Interface
  30:./Core/core_cmInstr.h ****   Access to dedicated instructions
  31:./Core/core_cmInstr.h ****   @{
  32:./Core/core_cmInstr.h **** */
  33:./Core/core_cmInstr.h **** 
  34:./Core/core_cmInstr.h **** #if defined ( __CC_ARM   ) /*------------------ RealView Compiler ----------------*/
  35:./Core/core_cmInstr.h **** /* ARM armcc specific functions */
  36:./Core/core_cmInstr.h **** 
  37:./Core/core_cmInstr.h **** /** \brief  No Operation
  38:./Core/core_cmInstr.h **** 
  39:./Core/core_cmInstr.h ****     No Operation does nothing. This instruction can be used for code alignment purposes.
  40:./Core/core_cmInstr.h ****  */
  41:./Core/core_cmInstr.h **** #define __NOP                             __nop
  42:./Core/core_cmInstr.h **** 
  43:./Core/core_cmInstr.h **** 
  44:./Core/core_cmInstr.h **** /** \brief  Wait For Interrupt
  45:./Core/core_cmInstr.h **** 
  46:./Core/core_cmInstr.h ****     Wait For Interrupt is a hint instruction that suspends execution
  47:./Core/core_cmInstr.h ****     until one of a number of events occurs.
  48:./Core/core_cmInstr.h ****  */
  49:./Core/core_cmInstr.h **** #define __WFI                             __wfi
  50:./Core/core_cmInstr.h **** 
  51:./Core/core_cmInstr.h **** 
  52:./Core/core_cmInstr.h **** /** \brief  Wait For Event
  53:./Core/core_cmInstr.h **** 
  54:./Core/core_cmInstr.h ****     Wait For Event is a hint instruction that permits the processor to enter
  55:./Core/core_cmInstr.h ****     a low-power state until one of a number of events occurs.
  56:./Core/core_cmInstr.h ****  */
  57:./Core/core_cmInstr.h **** #define __WFE                             __wfe
  58:./Core/core_cmInstr.h **** 
  59:./Core/core_cmInstr.h **** 
  60:./Core/core_cmInstr.h **** /** \brief  Send Event
  61:./Core/core_cmInstr.h **** 
  62:./Core/core_cmInstr.h ****     Send Event is a hint instruction. It causes an event to be signaled to the CPU.
  63:./Core/core_cmInstr.h ****  */
  64:./Core/core_cmInstr.h **** #define __SEV                             __sev
  65:./Core/core_cmInstr.h **** 
  66:./Core/core_cmInstr.h **** 
  67:./Core/core_cmInstr.h **** /** \brief  Instruction Synchronization Barrier
  68:./Core/core_cmInstr.h **** 
  69:./Core/core_cmInstr.h ****     Instruction Synchronization Barrier flushes the pipeline in the processor,
  70:./Core/core_cmInstr.h ****     so that all instructions following the ISB are fetched from cache or
  71:./Core/core_cmInstr.h ****     memory, after the instruction has been completed.
  72:./Core/core_cmInstr.h ****  */
  73:./Core/core_cmInstr.h **** #define __ISB()                           __isb(0xF)
  74:./Core/core_cmInstr.h **** 
  75:./Core/core_cmInstr.h **** 
  76:./Core/core_cmInstr.h **** /** \brief  Data Synchronization Barrier
  77:./Core/core_cmInstr.h **** 
  78:./Core/core_cmInstr.h ****     This function acts as a special kind of Data Memory Barrier.
  79:./Core/core_cmInstr.h ****     It completes when all explicit memory accesses before this instruction complete.
  80:./Core/core_cmInstr.h ****  */
  81:./Core/core_cmInstr.h **** #define __DSB()                           __dsb(0xF)
  82:./Core/core_cmInstr.h **** 
  83:./Core/core_cmInstr.h **** 
  84:./Core/core_cmInstr.h **** /** \brief  Data Memory Barrier
  85:./Core/core_cmInstr.h **** 
  86:./Core/core_cmInstr.h ****     This function ensures the apparent order of the explicit memory operations before
  87:./Core/core_cmInstr.h ****     and after the instruction, without ensuring their completion.
  88:./Core/core_cmInstr.h ****  */
  89:./Core/core_cmInstr.h **** #define __DMB()                           __dmb(0xF)
  90:./Core/core_cmInstr.h **** 
  91:./Core/core_cmInstr.h **** 
  92:./Core/core_cmInstr.h **** /** \brief  Reverse byte order (32 bit)
  93:./Core/core_cmInstr.h **** 
  94:./Core/core_cmInstr.h ****     This function reverses the byte order in integer value.
  95:./Core/core_cmInstr.h **** 
  96:./Core/core_cmInstr.h ****     \param [in]    value  Value to reverse
  97:./Core/core_cmInstr.h ****     \return               Reversed value
  98:./Core/core_cmInstr.h ****  */
  99:./Core/core_cmInstr.h **** #define __REV                             __rev
 100:./Core/core_cmInstr.h **** 
 101:./Core/core_cmInstr.h **** 
 102:./Core/core_cmInstr.h **** /** \brief  Reverse byte order (16 bit)
 103:./Core/core_cmInstr.h **** 
 104:./Core/core_cmInstr.h ****     This function reverses the byte order in two unsigned short values.
 105:./Core/core_cmInstr.h **** 
 106:./Core/core_cmInstr.h ****     \param [in]    value  Value to reverse
 107:./Core/core_cmInstr.h ****     \return               Reversed value
 108:./Core/core_cmInstr.h ****  */
 109:./Core/core_cmInstr.h **** #if (__ARMCC_VERSION < 400677)
 110:./Core/core_cmInstr.h **** extern uint32_t __REV16(uint32_t value);
 111:./Core/core_cmInstr.h **** #else  /* (__ARMCC_VERSION >= 400677)  */
 112:./Core/core_cmInstr.h **** static __INLINE __ASM uint32_t __REV16(uint32_t value)
 113:./Core/core_cmInstr.h **** {
 114:./Core/core_cmInstr.h ****   rev16 r0, r0
 115:./Core/core_cmInstr.h ****   bx lr
 116:./Core/core_cmInstr.h **** }
 117:./Core/core_cmInstr.h **** #endif /* __ARMCC_VERSION  */
 118:./Core/core_cmInstr.h **** 
 119:./Core/core_cmInstr.h **** 
 120:./Core/core_cmInstr.h **** /** \brief  Reverse byte order in signed short value
 121:./Core/core_cmInstr.h **** 
 122:./Core/core_cmInstr.h ****     This function reverses the byte order in a signed short value with sign extension to integer.
 123:./Core/core_cmInstr.h **** 
 124:./Core/core_cmInstr.h ****     \param [in]    value  Value to reverse
 125:./Core/core_cmInstr.h ****     \return               Reversed value
 126:./Core/core_cmInstr.h ****  */
 127:./Core/core_cmInstr.h **** #if (__ARMCC_VERSION < 400677)
 128:./Core/core_cmInstr.h **** extern int32_t __REVSH(int32_t value);
 129:./Core/core_cmInstr.h **** #else  /* (__ARMCC_VERSION >= 400677)  */
 130:./Core/core_cmInstr.h **** static __INLINE __ASM int32_t __REVSH(int32_t value)
 131:./Core/core_cmInstr.h **** {
 132:./Core/core_cmInstr.h ****   revsh r0, r0
 133:./Core/core_cmInstr.h ****   bx lr
 134:./Core/core_cmInstr.h **** }
 135:./Core/core_cmInstr.h **** #endif /* __ARMCC_VERSION  */
 136:./Core/core_cmInstr.h **** 
 137:./Core/core_cmInstr.h **** 
 138:./Core/core_cmInstr.h **** #if       (__CORTEX_M >= 0x03)
 139:./Core/core_cmInstr.h **** 
 140:./Core/core_cmInstr.h **** /** \brief  Reverse bit order of value
 141:./Core/core_cmInstr.h **** 
 142:./Core/core_cmInstr.h ****     This function reverses the bit order of the given value.
 143:./Core/core_cmInstr.h **** 
 144:./Core/core_cmInstr.h ****     \param [in]    value  Value to reverse
 145:./Core/core_cmInstr.h ****     \return               Reversed value
 146:./Core/core_cmInstr.h ****  */
 147:./Core/core_cmInstr.h **** #define __RBIT                            __rbit
 148:./Core/core_cmInstr.h **** 
 149:./Core/core_cmInstr.h **** 
 150:./Core/core_cmInstr.h **** /** \brief  LDR Exclusive (8 bit)
 151:./Core/core_cmInstr.h **** 
 152:./Core/core_cmInstr.h ****     This function performs a exclusive LDR command for 8 bit value.
 153:./Core/core_cmInstr.h **** 
 154:./Core/core_cmInstr.h ****     \param [in]    ptr  Pointer to data
 155:./Core/core_cmInstr.h ****     \return             value of type uint8_t at (*ptr)
 156:./Core/core_cmInstr.h ****  */
 157:./Core/core_cmInstr.h **** #define __LDREXB(ptr)                     ((uint8_t ) __ldrex(ptr))
 158:./Core/core_cmInstr.h **** 
 159:./Core/core_cmInstr.h **** 
 160:./Core/core_cmInstr.h **** /** \brief  LDR Exclusive (16 bit)
 161:./Core/core_cmInstr.h **** 
 162:./Core/core_cmInstr.h ****     This function performs a exclusive LDR command for 16 bit values.
 163:./Core/core_cmInstr.h **** 
 164:./Core/core_cmInstr.h ****     \param [in]    ptr  Pointer to data
 165:./Core/core_cmInstr.h ****     \return        value of type uint16_t at (*ptr)
 166:./Core/core_cmInstr.h ****  */
 167:./Core/core_cmInstr.h **** #define __LDREXH(ptr)                     ((uint16_t) __ldrex(ptr))
 168:./Core/core_cmInstr.h **** 
 169:./Core/core_cmInstr.h **** 
 170:./Core/core_cmInstr.h **** /** \brief  LDR Exclusive (32 bit)
 171:./Core/core_cmInstr.h **** 
 172:./Core/core_cmInstr.h ****     This function performs a exclusive LDR command for 32 bit values.
 173:./Core/core_cmInstr.h **** 
 174:./Core/core_cmInstr.h ****     \param [in]    ptr  Pointer to data
 175:./Core/core_cmInstr.h ****     \return        value of type uint32_t at (*ptr)
 176:./Core/core_cmInstr.h ****  */
 177:./Core/core_cmInstr.h **** #define __LDREXW(ptr)                     ((uint32_t ) __ldrex(ptr))
 178:./Core/core_cmInstr.h **** 
 179:./Core/core_cmInstr.h **** 
 180:./Core/core_cmInstr.h **** /** \brief  STR Exclusive (8 bit)
 181:./Core/core_cmInstr.h **** 
 182:./Core/core_cmInstr.h ****     This function performs a exclusive STR command for 8 bit values.
 183:./Core/core_cmInstr.h **** 
 184:./Core/core_cmInstr.h ****     \param [in]  value  Value to store
 185:./Core/core_cmInstr.h ****     \param [in]    ptr  Pointer to location
 186:./Core/core_cmInstr.h ****     \return          0  Function succeeded
 187:./Core/core_cmInstr.h ****     \return          1  Function failed
 188:./Core/core_cmInstr.h ****  */
 189:./Core/core_cmInstr.h **** #define __STREXB(value, ptr)              __strex(value, ptr)
 190:./Core/core_cmInstr.h **** 
 191:./Core/core_cmInstr.h **** 
 192:./Core/core_cmInstr.h **** /** \brief  STR Exclusive (16 bit)
 193:./Core/core_cmInstr.h **** 
 194:./Core/core_cmInstr.h ****     This function performs a exclusive STR command for 16 bit values.
 195:./Core/core_cmInstr.h **** 
 196:./Core/core_cmInstr.h ****     \param [in]  value  Value to store
 197:./Core/core_cmInstr.h ****     \param [in]    ptr  Pointer to location
 198:./Core/core_cmInstr.h ****     \return          0  Function succeeded
 199:./Core/core_cmInstr.h ****     \return          1  Function failed
 200:./Core/core_cmInstr.h ****  */
 201:./Core/core_cmInstr.h **** #define __STREXH(value, ptr)              __strex(value, ptr)
 202:./Core/core_cmInstr.h **** 
 203:./Core/core_cmInstr.h **** 
 204:./Core/core_cmInstr.h **** /** \brief  STR Exclusive (32 bit)
 205:./Core/core_cmInstr.h **** 
 206:./Core/core_cmInstr.h ****     This function performs a exclusive STR command for 32 bit values.
 207:./Core/core_cmInstr.h **** 
 208:./Core/core_cmInstr.h ****     \param [in]  value  Value to store
 209:./Core/core_cmInstr.h ****     \param [in]    ptr  Pointer to location
 210:./Core/core_cmInstr.h ****     \return          0  Function succeeded
 211:./Core/core_cmInstr.h ****     \return          1  Function failed
 212:./Core/core_cmInstr.h ****  */
 213:./Core/core_cmInstr.h **** #define __STREXW(value, ptr)              __strex(value, ptr)
 214:./Core/core_cmInstr.h **** 
 215:./Core/core_cmInstr.h **** 
 216:./Core/core_cmInstr.h **** /** \brief  Remove the exclusive lock
 217:./Core/core_cmInstr.h **** 
 218:./Core/core_cmInstr.h ****     This function removes the exclusive lock which is created by LDREX.
 219:./Core/core_cmInstr.h **** 
 220:./Core/core_cmInstr.h ****  */
 221:./Core/core_cmInstr.h **** #if (__ARMCC_VERSION < 400000)
 222:./Core/core_cmInstr.h **** extern void __CLREX(void);
 223:./Core/core_cmInstr.h **** #else  /* (__ARMCC_VERSION >= 400000)  */
 224:./Core/core_cmInstr.h **** #define __CLREX                           __clrex
 225:./Core/core_cmInstr.h **** #endif /* __ARMCC_VERSION  */
 226:./Core/core_cmInstr.h **** 
 227:./Core/core_cmInstr.h **** 
 228:./Core/core_cmInstr.h **** /** \brief  Signed Saturate
 229:./Core/core_cmInstr.h **** 
 230:./Core/core_cmInstr.h ****     This function saturates a signed value.
 231:./Core/core_cmInstr.h **** 
 232:./Core/core_cmInstr.h ****     \param [in]  value  Value to be saturated
 233:./Core/core_cmInstr.h ****     \param [in]    sat  Bit position to saturate to (1..32)
 234:./Core/core_cmInstr.h ****     \return             Saturated value
 235:./Core/core_cmInstr.h ****  */
 236:./Core/core_cmInstr.h **** #define __SSAT                            __ssat
 237:./Core/core_cmInstr.h **** 
 238:./Core/core_cmInstr.h **** 
 239:./Core/core_cmInstr.h **** /** \brief  Unsigned Saturate
 240:./Core/core_cmInstr.h **** 
 241:./Core/core_cmInstr.h ****     This function saturates an unsigned value.
 242:./Core/core_cmInstr.h **** 
 243:./Core/core_cmInstr.h ****     \param [in]  value  Value to be saturated
 244:./Core/core_cmInstr.h ****     \param [in]    sat  Bit position to saturate to (0..31)
 245:./Core/core_cmInstr.h ****     \return             Saturated value
 246:./Core/core_cmInstr.h ****  */
 247:./Core/core_cmInstr.h **** #define __USAT                            __usat
 248:./Core/core_cmInstr.h **** 
 249:./Core/core_cmInstr.h **** 
 250:./Core/core_cmInstr.h **** /** \brief  Count leading zeros
 251:./Core/core_cmInstr.h **** 
 252:./Core/core_cmInstr.h ****     This function counts the number of leading zeros of a data value.
 253:./Core/core_cmInstr.h **** 
 254:./Core/core_cmInstr.h ****     \param [in]  value  Value to count the leading zeros
 255:./Core/core_cmInstr.h ****     \return             number of leading zeros in value
 256:./Core/core_cmInstr.h ****  */
 257:./Core/core_cmInstr.h **** #define __CLZ                             __clz
 258:./Core/core_cmInstr.h **** 
 259:./Core/core_cmInstr.h **** #endif /* (__CORTEX_M >= 0x03) */
 260:./Core/core_cmInstr.h **** 
 261:./Core/core_cmInstr.h **** 
 262:./Core/core_cmInstr.h **** 
 263:./Core/core_cmInstr.h **** #elif (defined (__ICCARM__)) /*---------------- ICC Compiler ---------------------*/
 264:./Core/core_cmInstr.h **** /* IAR iccarm specific functions */
 265:./Core/core_cmInstr.h **** 
 266:./Core/core_cmInstr.h **** #include <intrinsics.h>                     /* IAR Intrinsics   */
 267:./Core/core_cmInstr.h **** 
 268:./Core/core_cmInstr.h **** #pragma diag_suppress=Pe940
 269:./Core/core_cmInstr.h **** 
 270:./Core/core_cmInstr.h **** /** \brief  No Operation
 271:./Core/core_cmInstr.h **** 
 272:./Core/core_cmInstr.h ****     No Operation does nothing. This instruction can be used for code alignment purposes.
 273:./Core/core_cmInstr.h ****  */
 274:./Core/core_cmInstr.h **** #define __NOP                           __no_operation
 275:./Core/core_cmInstr.h **** 
 276:./Core/core_cmInstr.h **** 
 277:./Core/core_cmInstr.h **** /** \brief  Wait For Interrupt
 278:./Core/core_cmInstr.h **** 
 279:./Core/core_cmInstr.h ****     Wait For Interrupt is a hint instruction that suspends execution
 280:./Core/core_cmInstr.h ****     until one of a number of events occurs.
 281:./Core/core_cmInstr.h ****  */
 282:./Core/core_cmInstr.h **** static __INLINE  void __WFI(void)
 283:./Core/core_cmInstr.h **** {
 284:./Core/core_cmInstr.h ****   __ASM ("wfi");
 285:./Core/core_cmInstr.h **** }
 286:./Core/core_cmInstr.h **** 
 287:./Core/core_cmInstr.h **** 
 288:./Core/core_cmInstr.h **** /** \brief  Wait For Event
 289:./Core/core_cmInstr.h **** 
 290:./Core/core_cmInstr.h ****     Wait For Event is a hint instruction that permits the processor to enter
 291:./Core/core_cmInstr.h ****     a low-power state until one of a number of events occurs.
 292:./Core/core_cmInstr.h ****  */
 293:./Core/core_cmInstr.h **** static __INLINE  void __WFE(void)
 294:./Core/core_cmInstr.h **** {
 295:./Core/core_cmInstr.h ****   __ASM ("wfe");
 296:./Core/core_cmInstr.h **** }
 297:./Core/core_cmInstr.h **** 
 298:./Core/core_cmInstr.h **** 
 299:./Core/core_cmInstr.h **** /** \brief  Send Event
 300:./Core/core_cmInstr.h **** 
 301:./Core/core_cmInstr.h ****     Send Event is a hint instruction. It causes an event to be signaled to the CPU.
 302:./Core/core_cmInstr.h ****  */
 303:./Core/core_cmInstr.h **** static __INLINE  void __SEV(void)
 304:./Core/core_cmInstr.h **** {
 305:./Core/core_cmInstr.h ****   __ASM ("sev");
 306:./Core/core_cmInstr.h **** }
 307:./Core/core_cmInstr.h **** 
 308:./Core/core_cmInstr.h **** 
 309:./Core/core_cmInstr.h **** /* intrinsic     void __ISB(void)            (see intrinsics.h) */
 310:./Core/core_cmInstr.h **** /* intrinsic     void __DSB(void)            (see intrinsics.h) */
 311:./Core/core_cmInstr.h **** /* intrinsic     void __DMB(void)            (see intrinsics.h) */
 312:./Core/core_cmInstr.h **** /* intrinsic uint32_t __REV(uint32_t value)  (see intrinsics.h) */
 313:./Core/core_cmInstr.h **** /* intrinsic          __SSAT                 (see intrinsics.h) */
 314:./Core/core_cmInstr.h **** /* intrinsic          __USAT                 (see intrinsics.h) */
 315:./Core/core_cmInstr.h **** 
 316:./Core/core_cmInstr.h **** 
 317:./Core/core_cmInstr.h **** /** \brief  Reverse byte order (16 bit)
 318:./Core/core_cmInstr.h **** 
 319:./Core/core_cmInstr.h ****     This function reverses the byte order in two unsigned short values.
 320:./Core/core_cmInstr.h **** 
 321:./Core/core_cmInstr.h ****     \param [in]    value  Value to reverse
 322:./Core/core_cmInstr.h ****     \return               Reversed value
 323:./Core/core_cmInstr.h ****  */
 324:./Core/core_cmInstr.h **** static uint32_t __REV16(uint32_t value)
 325:./Core/core_cmInstr.h **** {
 326:./Core/core_cmInstr.h ****   __ASM("rev16 r0, r0");
 327:./Core/core_cmInstr.h **** }
 328:./Core/core_cmInstr.h **** 
 329:./Core/core_cmInstr.h **** 
 330:./Core/core_cmInstr.h **** /* intrinsic uint32_t __REVSH(uint32_t value)  (see intrinsics.h */
 331:./Core/core_cmInstr.h **** 
 332:./Core/core_cmInstr.h **** 
 333:./Core/core_cmInstr.h **** #if       (__CORTEX_M >= 0x03)
 334:./Core/core_cmInstr.h **** 
 335:./Core/core_cmInstr.h **** /** \brief  Reverse bit order of value
 336:./Core/core_cmInstr.h **** 
 337:./Core/core_cmInstr.h ****     This function reverses the bit order of the given value.
 338:./Core/core_cmInstr.h **** 
 339:./Core/core_cmInstr.h ****     \param [in]    value  Value to reverse
 340:./Core/core_cmInstr.h ****     \return               Reversed value
 341:./Core/core_cmInstr.h ****  */
 342:./Core/core_cmInstr.h **** static uint32_t __RBIT(uint32_t value)
 343:./Core/core_cmInstr.h **** {
 344:./Core/core_cmInstr.h ****   __ASM("rbit r0, r0");
 345:./Core/core_cmInstr.h **** }
 346:./Core/core_cmInstr.h **** 
 347:./Core/core_cmInstr.h **** 
 348:./Core/core_cmInstr.h **** /** \brief  LDR Exclusive (8 bit)
 349:./Core/core_cmInstr.h **** 
 350:./Core/core_cmInstr.h ****     This function performs a exclusive LDR command for 8 bit value.
 351:./Core/core_cmInstr.h **** 
 352:./Core/core_cmInstr.h ****     \param [in]    ptr  Pointer to data
 353:./Core/core_cmInstr.h ****     \return             value of type uint8_t at (*ptr)
 354:./Core/core_cmInstr.h ****  */
 355:./Core/core_cmInstr.h **** static uint8_t __LDREXB(volatile uint8_t *addr)
 356:./Core/core_cmInstr.h **** {
 357:./Core/core_cmInstr.h ****   __ASM("ldrexb r0, [r0]");
 358:./Core/core_cmInstr.h **** }
 359:./Core/core_cmInstr.h **** 
 360:./Core/core_cmInstr.h **** 
 361:./Core/core_cmInstr.h **** /** \brief  LDR Exclusive (16 bit)
 362:./Core/core_cmInstr.h **** 
 363:./Core/core_cmInstr.h ****     This function performs a exclusive LDR command for 16 bit values.
 364:./Core/core_cmInstr.h **** 
 365:./Core/core_cmInstr.h ****     \param [in]    ptr  Pointer to data
 366:./Core/core_cmInstr.h ****     \return        value of type uint16_t at (*ptr)
 367:./Core/core_cmInstr.h ****  */
 368:./Core/core_cmInstr.h **** static uint16_t __LDREXH(volatile uint16_t *addr)
 369:./Core/core_cmInstr.h **** {
 370:./Core/core_cmInstr.h ****   __ASM("ldrexh r0, [r0]");
 371:./Core/core_cmInstr.h **** }
 372:./Core/core_cmInstr.h **** 
 373:./Core/core_cmInstr.h **** 
 374:./Core/core_cmInstr.h **** /** \brief  LDR Exclusive (32 bit)
 375:./Core/core_cmInstr.h **** 
 376:./Core/core_cmInstr.h ****     This function performs a exclusive LDR command for 32 bit values.
 377:./Core/core_cmInstr.h **** 
 378:./Core/core_cmInstr.h ****     \param [in]    ptr  Pointer to data
 379:./Core/core_cmInstr.h ****     \return        value of type uint32_t at (*ptr)
 380:./Core/core_cmInstr.h ****  */
 381:./Core/core_cmInstr.h **** /* intrinsic unsigned long __LDREX(unsigned long *)  (see intrinsics.h) */
 382:./Core/core_cmInstr.h **** static uint32_t __LDREXW(volatile uint32_t *addr)
 383:./Core/core_cmInstr.h **** {
 384:./Core/core_cmInstr.h ****   __ASM("ldrex r0, [r0]");
 385:./Core/core_cmInstr.h **** }
 386:./Core/core_cmInstr.h **** 
 387:./Core/core_cmInstr.h **** 
 388:./Core/core_cmInstr.h **** /** \brief  STR Exclusive (8 bit)
 389:./Core/core_cmInstr.h **** 
 390:./Core/core_cmInstr.h ****     This function performs a exclusive STR command for 8 bit values.
 391:./Core/core_cmInstr.h **** 
 392:./Core/core_cmInstr.h ****     \param [in]  value  Value to store
 393:./Core/core_cmInstr.h ****     \param [in]    ptr  Pointer to location
 394:./Core/core_cmInstr.h ****     \return          0  Function succeeded
 395:./Core/core_cmInstr.h ****     \return          1  Function failed
 396:./Core/core_cmInstr.h ****  */
 397:./Core/core_cmInstr.h **** static uint32_t __STREXB(uint8_t value, volatile uint8_t *addr)
 398:./Core/core_cmInstr.h **** {
 399:./Core/core_cmInstr.h ****   __ASM("strexb r0, r0, [r1]");
 400:./Core/core_cmInstr.h **** }
 401:./Core/core_cmInstr.h **** 
 402:./Core/core_cmInstr.h **** 
 403:./Core/core_cmInstr.h **** /** \brief  STR Exclusive (16 bit)
 404:./Core/core_cmInstr.h **** 
 405:./Core/core_cmInstr.h ****     This function performs a exclusive STR command for 16 bit values.
 406:./Core/core_cmInstr.h **** 
 407:./Core/core_cmInstr.h ****     \param [in]  value  Value to store
 408:./Core/core_cmInstr.h ****     \param [in]    ptr  Pointer to location
 409:./Core/core_cmInstr.h ****     \return          0  Function succeeded
 410:./Core/core_cmInstr.h ****     \return          1  Function failed
 411:./Core/core_cmInstr.h ****  */
 412:./Core/core_cmInstr.h **** static uint32_t __STREXH(uint16_t value, volatile uint16_t *addr)
 413:./Core/core_cmInstr.h **** {
 414:./Core/core_cmInstr.h ****   __ASM("strexh r0, r0, [r1]");
 415:./Core/core_cmInstr.h **** }
 416:./Core/core_cmInstr.h **** 
 417:./Core/core_cmInstr.h **** 
 418:./Core/core_cmInstr.h **** /** \brief  STR Exclusive (32 bit)
 419:./Core/core_cmInstr.h **** 
 420:./Core/core_cmInstr.h ****     This function performs a exclusive STR command for 32 bit values.
 421:./Core/core_cmInstr.h **** 
 422:./Core/core_cmInstr.h ****     \param [in]  value  Value to store
 423:./Core/core_cmInstr.h ****     \param [in]    ptr  Pointer to location
 424:./Core/core_cmInstr.h ****     \return          0  Function succeeded
 425:./Core/core_cmInstr.h ****     \return          1  Function failed
 426:./Core/core_cmInstr.h ****  */
 427:./Core/core_cmInstr.h **** /* intrinsic unsigned long __STREX(unsigned long, unsigned long)  (see intrinsics.h )*/
 428:./Core/core_cmInstr.h **** static uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
 429:./Core/core_cmInstr.h **** {
 430:./Core/core_cmInstr.h ****   __ASM("strex r0, r0, [r1]");
 431:./Core/core_cmInstr.h **** }
 432:./Core/core_cmInstr.h **** 
 433:./Core/core_cmInstr.h **** 
 434:./Core/core_cmInstr.h **** /** \brief  Remove the exclusive lock
 435:./Core/core_cmInstr.h **** 
 436:./Core/core_cmInstr.h ****     This function removes the exclusive lock which is created by LDREX.
 437:./Core/core_cmInstr.h **** 
 438:./Core/core_cmInstr.h ****  */
 439:./Core/core_cmInstr.h **** static __INLINE void __CLREX(void)
 440:./Core/core_cmInstr.h **** {
 441:./Core/core_cmInstr.h ****   __ASM ("clrex");
 442:./Core/core_cmInstr.h **** }
 443:./Core/core_cmInstr.h **** 
 444:./Core/core_cmInstr.h **** /* intrinsic   unsigned char __CLZ( unsigned long )      (see intrinsics.h) */
 445:./Core/core_cmInstr.h **** 
 446:./Core/core_cmInstr.h **** #endif /* (__CORTEX_M >= 0x03) */
 447:./Core/core_cmInstr.h **** 
 448:./Core/core_cmInstr.h **** #pragma diag_default=Pe940
 449:./Core/core_cmInstr.h **** 
 450:./Core/core_cmInstr.h **** 
 451:./Core/core_cmInstr.h **** 
 452:./Core/core_cmInstr.h **** #elif (defined (__GNUC__)) /*------------------ GNU Compiler ---------------------*/
 453:./Core/core_cmInstr.h **** /* GNU gcc specific functions */
 454:./Core/core_cmInstr.h **** 
 455:./Core/core_cmInstr.h **** /** \brief  No Operation
 456:./Core/core_cmInstr.h **** 
 457:./Core/core_cmInstr.h ****     No Operation does nothing. This instruction can be used for code alignment purposes.
 458:./Core/core_cmInstr.h ****  */
 459:./Core/core_cmInstr.h **** __attribute__( ( always_inline ) ) static __INLINE void __NOP(void)
 460:./Core/core_cmInstr.h **** {
 461:./Core/core_cmInstr.h ****   __ASM volatile ("nop");
 462:./Core/core_cmInstr.h **** }
 463:./Core/core_cmInstr.h **** 
 464:./Core/core_cmInstr.h **** 
 465:./Core/core_cmInstr.h **** /** \brief  Wait For Interrupt
 466:./Core/core_cmInstr.h **** 
 467:./Core/core_cmInstr.h ****     Wait For Interrupt is a hint instruction that suspends execution
 468:./Core/core_cmInstr.h ****     until one of a number of events occurs.
 469:./Core/core_cmInstr.h ****  */
 470:./Core/core_cmInstr.h **** __attribute__( ( always_inline ) ) static __INLINE void __WFI(void)
 471:./Core/core_cmInstr.h **** {
 472:./Core/core_cmInstr.h ****   __ASM volatile ("wfi");
 272              		.loc 2 472 0
 273              	@ 472 "./Core/core_cmInstr.h" 1
 274 0008 30BF     		wfi
 275              	@ 0 "" 2
 276              		.thumb
 277 000a 7047     		bx	lr
 278              	.L29:
 279              		.align	2
 280              	.L28:
 281 000c 00C00F40 		.word	1074774016
 282              	.LBE15:
 283              	.LBE14:
 284              		.cfi_endproc
 285              	.LFE59:
 287              		.section	.text.CLKPWR_DeepSleep,"ax",%progbits
 288              		.align	2
 289              		.global	CLKPWR_DeepSleep
 290              		.thumb
 291              		.thumb_func
 293              	CLKPWR_DeepSleep:
 294              	.LFB60:
 281:./Drivers/source/lpc17xx_clkpwr.c **** 	/* Sleep Mode*/
 282:./Drivers/source/lpc17xx_clkpwr.c **** 	__WFI();
 283:./Drivers/source/lpc17xx_clkpwr.c **** }
 284:./Drivers/source/lpc17xx_clkpwr.c **** 
 285:./Drivers/source/lpc17xx_clkpwr.c **** 
 286:./Drivers/source/lpc17xx_clkpwr.c **** /*********************************************************************//**
 287:./Drivers/source/lpc17xx_clkpwr.c ****  * @brief 		Enter Deep Sleep mode with co-operated instruction by the Cortex-M3.
 288:./Drivers/source/lpc17xx_clkpwr.c ****  * @param[in]	None
 289:./Drivers/source/lpc17xx_clkpwr.c ****  * @return		None
 290:./Drivers/source/lpc17xx_clkpwr.c ****  **********************************************************************/
 291:./Drivers/source/lpc17xx_clkpwr.c **** void CLKPWR_DeepSleep(void)
 292:./Drivers/source/lpc17xx_clkpwr.c **** {
 295              		.loc 1 292 0
 296              		.cfi_startproc
 297              		@ args = 0, pretend = 0, frame = 0
 298              		@ frame_needed = 0, uses_anonymous_args = 0
 299              		@ link register save eliminated.
 293:./Drivers/source/lpc17xx_clkpwr.c ****     /* Deep-Sleep Mode, set SLEEPDEEP bit */
 294:./Drivers/source/lpc17xx_clkpwr.c **** 	SCB->SCR = 0x4;
 300              		.loc 1 294 0
 301 0000 0449     		ldr	r1, .L31
 295:./Drivers/source/lpc17xx_clkpwr.c **** 	LPC_SC->PCON = 0x8;
 302              		.loc 1 295 0
 303 0002 054B     		ldr	r3, .L31+4
 294:./Drivers/source/lpc17xx_clkpwr.c **** 	SCB->SCR = 0x4;
 304              		.loc 1 294 0
 305 0004 0420     		movs	r0, #4
 306              		.loc 1 295 0
 307 0006 0822     		movs	r2, #8
 294:./Drivers/source/lpc17xx_clkpwr.c **** 	SCB->SCR = 0x4;
 308              		.loc 1 294 0
 309 0008 0861     		str	r0, [r1, #16]
 310              		.loc 1 295 0
 311 000a C3F8C020 		str	r2, [r3, #192]
 312              	.LBB16:
 313              	.LBB17:
 314              		.loc 2 472 0
 315              	@ 472 "./Core/core_cmInstr.h" 1
 316 000e 30BF     		wfi
 317              	@ 0 "" 2
 318              		.thumb
 319 0010 7047     		bx	lr
 320              	.L32:
 321 0012 00BF     		.align	2
 322              	.L31:
 323 0014 00ED00E0 		.word	-536810240
 324 0018 00C00F40 		.word	1074774016
 325              	.LBE17:
 326              	.LBE16:
 327              		.cfi_endproc
 328              	.LFE60:
 330              		.section	.text.CLKPWR_PowerDown,"ax",%progbits
 331              		.align	2
 332              		.global	CLKPWR_PowerDown
 333              		.thumb
 334              		.thumb_func
 336              	CLKPWR_PowerDown:
 337              	.LFB61:
 296:./Drivers/source/lpc17xx_clkpwr.c **** 	/* Deep Sleep Mode*/
 297:./Drivers/source/lpc17xx_clkpwr.c **** 	__WFI();
 298:./Drivers/source/lpc17xx_clkpwr.c **** }
 299:./Drivers/source/lpc17xx_clkpwr.c **** 
 300:./Drivers/source/lpc17xx_clkpwr.c **** 
 301:./Drivers/source/lpc17xx_clkpwr.c **** /*********************************************************************//**
 302:./Drivers/source/lpc17xx_clkpwr.c ****  * @brief 		Enter Power Down mode with co-operated instruction by the Cortex-M3.
 303:./Drivers/source/lpc17xx_clkpwr.c ****  * @param[in]	None
 304:./Drivers/source/lpc17xx_clkpwr.c ****  * @return		None
 305:./Drivers/source/lpc17xx_clkpwr.c ****  **********************************************************************/
 306:./Drivers/source/lpc17xx_clkpwr.c **** void CLKPWR_PowerDown(void)
 307:./Drivers/source/lpc17xx_clkpwr.c **** {
 338              		.loc 1 307 0
 339              		.cfi_startproc
 340              		@ args = 0, pretend = 0, frame = 0
 341              		@ frame_needed = 0, uses_anonymous_args = 0
 342              		@ link register save eliminated.
 308:./Drivers/source/lpc17xx_clkpwr.c ****     /* Deep-Sleep Mode, set SLEEPDEEP bit */
 309:./Drivers/source/lpc17xx_clkpwr.c **** 	SCB->SCR = 0x4;
 343              		.loc 1 309 0
 344 0000 0449     		ldr	r1, .L34
 310:./Drivers/source/lpc17xx_clkpwr.c **** 	LPC_SC->PCON = 0x09;
 345              		.loc 1 310 0
 346 0002 054B     		ldr	r3, .L34+4
 309:./Drivers/source/lpc17xx_clkpwr.c **** 	SCB->SCR = 0x4;
 347              		.loc 1 309 0
 348 0004 0420     		movs	r0, #4
 349              		.loc 1 310 0
 350 0006 0922     		movs	r2, #9
 309:./Drivers/source/lpc17xx_clkpwr.c **** 	SCB->SCR = 0x4;
 351              		.loc 1 309 0
 352 0008 0861     		str	r0, [r1, #16]
 353              		.loc 1 310 0
 354 000a C3F8C020 		str	r2, [r3, #192]
 355              	.LBB18:
 356              	.LBB19:
 357              		.loc 2 472 0
 358              	@ 472 "./Core/core_cmInstr.h" 1
 359 000e 30BF     		wfi
 360              	@ 0 "" 2
 361              		.thumb
 362 0010 7047     		bx	lr
 363              	.L35:
 364 0012 00BF     		.align	2
 365              	.L34:
 366 0014 00ED00E0 		.word	-536810240
 367 0018 00C00F40 		.word	1074774016
 368              	.LBE19:
 369              	.LBE18:
 370              		.cfi_endproc
 371              	.LFE61:
 373              		.section	.text.CLKPWR_DeepPowerDown,"ax",%progbits
 374              		.align	2
 375              		.global	CLKPWR_DeepPowerDown
 376              		.thumb
 377              		.thumb_func
 379              	CLKPWR_DeepPowerDown:
 380              	.LFB62:
 311:./Drivers/source/lpc17xx_clkpwr.c **** 	/* Power Down Mode*/
 312:./Drivers/source/lpc17xx_clkpwr.c **** 	__WFI();
 313:./Drivers/source/lpc17xx_clkpwr.c **** }
 314:./Drivers/source/lpc17xx_clkpwr.c **** 
 315:./Drivers/source/lpc17xx_clkpwr.c **** 
 316:./Drivers/source/lpc17xx_clkpwr.c **** /*********************************************************************//**
 317:./Drivers/source/lpc17xx_clkpwr.c ****  * @brief 		Enter Deep Power Down mode with co-operated instruction by the Cortex-M3.
 318:./Drivers/source/lpc17xx_clkpwr.c ****  * @param[in]	None
 319:./Drivers/source/lpc17xx_clkpwr.c ****  * @return		None
 320:./Drivers/source/lpc17xx_clkpwr.c ****  **********************************************************************/
 321:./Drivers/source/lpc17xx_clkpwr.c **** void CLKPWR_DeepPowerDown(void)
 322:./Drivers/source/lpc17xx_clkpwr.c **** {
 381              		.loc 1 322 0
 382              		.cfi_startproc
 383              		@ args = 0, pretend = 0, frame = 0
 384              		@ frame_needed = 0, uses_anonymous_args = 0
 385              		@ link register save eliminated.
 323:./Drivers/source/lpc17xx_clkpwr.c ****     /* Deep-Sleep Mode, set SLEEPDEEP bit */
 324:./Drivers/source/lpc17xx_clkpwr.c **** 	SCB->SCR = 0x4;
 386              		.loc 1 324 0
 387 0000 0449     		ldr	r1, .L37
 325:./Drivers/source/lpc17xx_clkpwr.c **** 	LPC_SC->PCON = 0x03;
 388              		.loc 1 325 0
 389 0002 054B     		ldr	r3, .L37+4
 324:./Drivers/source/lpc17xx_clkpwr.c **** 	SCB->SCR = 0x4;
 390              		.loc 1 324 0
 391 0004 0420     		movs	r0, #4
 392              		.loc 1 325 0
 393 0006 0322     		movs	r2, #3
 324:./Drivers/source/lpc17xx_clkpwr.c **** 	SCB->SCR = 0x4;
 394              		.loc 1 324 0
 395 0008 0861     		str	r0, [r1, #16]
 396              		.loc 1 325 0
 397 000a C3F8C020 		str	r2, [r3, #192]
 398              	.LBB20:
 399              	.LBB21:
 400              		.loc 2 472 0
 401              	@ 472 "./Core/core_cmInstr.h" 1
 402 000e 30BF     		wfi
 403              	@ 0 "" 2
 404              		.thumb
 405 0010 7047     		bx	lr
 406              	.L38:
 407 0012 00BF     		.align	2
 408              	.L37:
 409 0014 00ED00E0 		.word	-536810240
 410 0018 00C00F40 		.word	1074774016
 411              	.LBE21:
 412              	.LBE20:
 413              		.cfi_endproc
 414              	.LFE62:
 416              		.text
 417              	.Letext0:
 418              		.file 3 "d:\\gnu\\4_8\\arm-none-eabi\\include\\machine\\_default_types.h"
 419              		.file 4 "d:\\gnu\\4_8\\arm-none-eabi\\include\\stdint.h"
 420              		.file 5 "./Core/core_cm3.h"
 421              		.file 6 "./LPC17xx/lpc17xx.h"
 422              		.file 7 "./Drivers/include/lpc_types.h"
 423              		.file 8 "./LPC17xx/system_LPC17xx.h"
DEFINED SYMBOLS
                            *ABS*:00000000 lpc17xx_clkpwr.c
C:\Users\kosmos\AppData\Local\Temp\ccV9bDTu.s:19     .text.CLKPWR_SetPCLKDiv:00000000 $t
C:\Users\kosmos\AppData\Local\Temp\ccV9bDTu.s:24     .text.CLKPWR_SetPCLKDiv:00000000 CLKPWR_SetPCLKDiv
C:\Users\kosmos\AppData\Local\Temp\ccV9bDTu.s:79     .text.CLKPWR_SetPCLKDiv:00000048 $d
C:\Users\kosmos\AppData\Local\Temp\ccV9bDTu.s:84     .text.CLKPWR_GetPCLKSEL:00000000 $t
C:\Users\kosmos\AppData\Local\Temp\ccV9bDTu.s:89     .text.CLKPWR_GetPCLKSEL:00000000 CLKPWR_GetPCLKSEL
C:\Users\kosmos\AppData\Local\Temp\ccV9bDTu.s:122    .text.CLKPWR_GetPCLKSEL:0000001c $d
C:\Users\kosmos\AppData\Local\Temp\ccV9bDTu.s:127    .text.CLKPWR_GetPCLK:00000000 $t
C:\Users\kosmos\AppData\Local\Temp\ccV9bDTu.s:132    .text.CLKPWR_GetPCLK:00000000 CLKPWR_GetPCLK
C:\Users\kosmos\AppData\Local\Temp\ccV9bDTu.s:199    .text.CLKPWR_GetPCLK:0000003c $d
C:\Users\kosmos\AppData\Local\Temp\ccV9bDTu.s:205    .text.CLKPWR_ConfigPPWR:00000000 $t
C:\Users\kosmos\AppData\Local\Temp\ccV9bDTu.s:210    .text.CLKPWR_ConfigPPWR:00000000 CLKPWR_ConfigPPWR
C:\Users\kosmos\AppData\Local\Temp\ccV9bDTu.s:247    .text.CLKPWR_ConfigPPWR:0000002c $d
C:\Users\kosmos\AppData\Local\Temp\ccV9bDTu.s:253    .text.CLKPWR_Sleep:00000000 $t
C:\Users\kosmos\AppData\Local\Temp\ccV9bDTu.s:258    .text.CLKPWR_Sleep:00000000 CLKPWR_Sleep
C:\Users\kosmos\AppData\Local\Temp\ccV9bDTu.s:281    .text.CLKPWR_Sleep:0000000c $d
C:\Users\kosmos\AppData\Local\Temp\ccV9bDTu.s:288    .text.CLKPWR_DeepSleep:00000000 $t
C:\Users\kosmos\AppData\Local\Temp\ccV9bDTu.s:293    .text.CLKPWR_DeepSleep:00000000 CLKPWR_DeepSleep
C:\Users\kosmos\AppData\Local\Temp\ccV9bDTu.s:323    .text.CLKPWR_DeepSleep:00000014 $d
C:\Users\kosmos\AppData\Local\Temp\ccV9bDTu.s:331    .text.CLKPWR_PowerDown:00000000 $t
C:\Users\kosmos\AppData\Local\Temp\ccV9bDTu.s:336    .text.CLKPWR_PowerDown:00000000 CLKPWR_PowerDown
C:\Users\kosmos\AppData\Local\Temp\ccV9bDTu.s:366    .text.CLKPWR_PowerDown:00000014 $d
C:\Users\kosmos\AppData\Local\Temp\ccV9bDTu.s:374    .text.CLKPWR_DeepPowerDown:00000000 $t
C:\Users\kosmos\AppData\Local\Temp\ccV9bDTu.s:379    .text.CLKPWR_DeepPowerDown:00000000 CLKPWR_DeepPowerDown
C:\Users\kosmos\AppData\Local\Temp\ccV9bDTu.s:409    .text.CLKPWR_DeepPowerDown:00000014 $d
                     .debug_frame:00000010 $d

UNDEFINED SYMBOLS
SystemCoreClock
